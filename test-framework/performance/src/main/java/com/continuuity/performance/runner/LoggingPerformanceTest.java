/*
 * Copyright 2012-2013 Continuuity,Inc. All Rights Reserved.
 */

package com.continuuity.performance.runner;

import com.continuuity.performance.application.BenchmarkRuntimeMetrics;
import com.continuuity.performance.apps.testing.LoggingApp;
import com.continuuity.test.ApplicationManager;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

/**
 *  Performance testing new distributed logging feature in Reactor.
 */
public class LoggingPerformanceTest {

  @PerformanceTest
  public void testApp() throws IOException, TimeoutException, InterruptedException {
    final int numEvents = 2000;

    ApplicationManager applicationManager = PerformanceTestRunner.deployApplication(LoggingApp.class);

    try {

      applicationManager.startFlow("LoggingFlow");

      BenchmarkRuntimeMetrics sourceFlowletMetrics = BenchmarkRuntimeStats.getFlowletMetrics("LoggingApp",
                                                                                             "LoggingFlow", "source");

      System.out.println(String.format("Number of events generated by source flowlet = %d",
                                       sourceFlowletMetrics.getProcessed()));

      sourceFlowletMetrics.waitForProcessed(numEvents, 120, TimeUnit.SECONDS);

      System.out.println(String.format("Number of events generated by source flowlet = %d",
                                       sourceFlowletMetrics.getProcessed()));

      BenchmarkRuntimeMetrics loggerFlowletMetrics = BenchmarkRuntimeStats.getFlowletMetrics("LoggingApp",
                                                                                             "LoggingFlow", "logger");

      System.out.println(String.format("Number of events processed by logger flowlet = %d",
                                       loggerFlowletMetrics.getProcessed()));

      loggerFlowletMetrics.waitForProcessed(numEvents, 120, TimeUnit.SECONDS);

      System.out.println(String.format("Number of events processed by logger flowlet = %d",
                                       loggerFlowletMetrics.getProcessed()));

    } finally {
      applicationManager.stopAll();
    }
  }
}

