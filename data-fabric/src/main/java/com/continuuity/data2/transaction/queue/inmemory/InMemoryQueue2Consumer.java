package com.continuuity.data2.transaction.queue.inmemory;

import com.continuuity.common.queue.QueueName;
import com.continuuity.common.utils.ImmutablePair;
import com.continuuity.data2.queue.ConsumerConfig;
import com.continuuity.data2.queue.DequeueResult;
import com.continuuity.data2.queue.DequeueStrategy;
import com.continuuity.data2.queue.Queue2Consumer;
import com.continuuity.data2.transaction.Transaction;
import com.continuuity.data2.transaction.TransactionAware;
import com.google.common.collect.ImmutableList;

import java.io.IOException;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;

/**
 * Consumer for an in-memory queue.
 */
public class InMemoryQueue2Consumer implements Queue2Consumer, TransactionAware {

  private final QueueName queueName;
  private Transaction currentTx;
  private boolean committed = false;
  private final InMemoryQueue queue;
  private final ConsumerConfig config;
  private final int numGroups;
  private List<InMemoryQueue.Key> dequeuedKeys;
  private final InMemoryQueue.ConsumerState state = new InMemoryQueue.ConsumerState();

  public InMemoryQueue2Consumer(QueueName queueName, ConsumerConfig config,
                                int numGroups, InMemoryQueueService queueService) {
    this.queueName = queueName;
    this.queue = queueService.getQueue(queueName);
    this.config = config;
    this.numGroups = numGroups;
  }

  @Override
  public QueueName getQueueName() {
    return queueName;
  }

  @Override
  public ConsumerConfig getConfig() {
    return config;
  }

  @Override
  public DequeueResult dequeue() throws IOException {
    return dequeue(1);
  }

  @Override
  public DequeueResult dequeue(int maxBatchSize) throws IOException {
    ImmutablePair<List<InMemoryQueue.Key>, List<byte[]>> result =
      queue.dequeue(currentTx, config, state, maxBatchSize);
    if (result == null) {
      return DequeueResult.EMPTY_RESULT;
    } else {
      dequeuedKeys = result.getFirst();
      return new InMemoryDequeueResult(result);
    }
  }

  @Override
  public void startTx(Transaction tx) {
    currentTx = tx;
    dequeuedKeys = null;
    committed = false;
  }

  @Override
  public Collection<byte[]> getTxChanges() {
    return ImmutableList.of(); // no conflicts generated by queues
  }

  @Override
  public boolean commitTx() throws Exception {
    queue.ack(dequeuedKeys, config);
    committed = true;
    return true;
  }

  @Override
  public void postTxCommit() {
    queue.evict(dequeuedKeys, numGroups);
  }

  @Override
  public boolean rollbackTx() throws Exception {
    if (committed || DequeueStrategy.FIFO.equals(config.getDequeueStrategy())) {
      if (dequeuedKeys != null) {
        queue.undoDequeue(dequeuedKeys, config);
      }
    }
    dequeuedKeys = null;
    return true;
  }

  private final class InMemoryDequeueResult implements DequeueResult {

    private final List<InMemoryQueue.Key> keys;
    private final List<byte[]> data;

    InMemoryDequeueResult(ImmutablePair<List<InMemoryQueue.Key>, List<byte[]>> result) {
      this.keys = ImmutableList.copyOf(result.getFirst());
      this.data = ImmutableList.copyOf(result.getSecond());
    }

    @Override
    public boolean isEmpty() {
      return data.isEmpty();
    }

    @Override
    public void reclaim() {
      if (dequeuedKeys != null) {
        dequeuedKeys.addAll(keys);
      } else {
        dequeuedKeys = keys;
      }
    }

    @Override
    public int size() {
      return keys.size();
    }

    @Override
    public Iterator<byte[]> iterator() {
      return data.iterator();
    }
  }

}
