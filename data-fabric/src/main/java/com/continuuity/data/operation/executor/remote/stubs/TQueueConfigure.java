/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.continuuity.data.operation.executor.remote.stubs;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TQueueConfigure implements org.apache.thrift.TBase<TQueueConfigure, TQueueConfigure._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TQueueConfigure");

  private static final org.apache.thrift.protocol.TField QUEUE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("queueName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NEW_CONSUMER_FIELD_DESC = new org.apache.thrift.protocol.TField("newConsumer", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField METRIC_FIELD_DESC = new org.apache.thrift.protocol.TField("metric", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TQueueConfigureStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TQueueConfigureTupleSchemeFactory());
  }

  public ByteBuffer queueName; // required
  public TQueueConsumer newConsumer; // required
  public String metric; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    QUEUE_NAME((short)1, "queueName"),
    NEW_CONSUMER((short)2, "newConsumer"),
    METRIC((short)3, "metric");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // QUEUE_NAME
          return QUEUE_NAME;
        case 2: // NEW_CONSUMER
          return NEW_CONSUMER;
        case 3: // METRIC
          return METRIC;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.METRIC};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.QUEUE_NAME, new org.apache.thrift.meta_data.FieldMetaData("queueName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.NEW_CONSUMER, new org.apache.thrift.meta_data.FieldMetaData("newConsumer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TQueueConsumer.class)));
    tmpMap.put(_Fields.METRIC, new org.apache.thrift.meta_data.FieldMetaData("metric", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TQueueConfigure.class, metaDataMap);
  }

  public TQueueConfigure() {
  }

  public TQueueConfigure(
    ByteBuffer queueName,
    TQueueConsumer newConsumer)
  {
    this();
    this.queueName = queueName;
    this.newConsumer = newConsumer;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TQueueConfigure(TQueueConfigure other) {
    if (other.isSetQueueName()) {
      this.queueName = org.apache.thrift.TBaseHelper.copyBinary(other.queueName);
;
    }
    if (other.isSetNewConsumer()) {
      this.newConsumer = new TQueueConsumer(other.newConsumer);
    }
    if (other.isSetMetric()) {
      this.metric = other.metric;
    }
  }

  public TQueueConfigure deepCopy() {
    return new TQueueConfigure(this);
  }

  @Override
  public void clear() {
    this.queueName = null;
    this.newConsumer = null;
    this.metric = null;
  }

  public byte[] getQueueName() {
    setQueueName(org.apache.thrift.TBaseHelper.rightSize(queueName));
    return queueName == null ? null : queueName.array();
  }

  public ByteBuffer bufferForQueueName() {
    return queueName;
  }

  public TQueueConfigure setQueueName(byte[] queueName) {
    setQueueName(queueName == null ? (ByteBuffer)null : ByteBuffer.wrap(queueName));
    return this;
  }

  public TQueueConfigure setQueueName(ByteBuffer queueName) {
    this.queueName = queueName;
    return this;
  }

  public void unsetQueueName() {
    this.queueName = null;
  }

  /** Returns true if field queueName is set (has been assigned a value) and false otherwise */
  public boolean isSetQueueName() {
    return this.queueName != null;
  }

  public void setQueueNameIsSet(boolean value) {
    if (!value) {
      this.queueName = null;
    }
  }

  public TQueueConsumer getNewConsumer() {
    return this.newConsumer;
  }

  public TQueueConfigure setNewConsumer(TQueueConsumer newConsumer) {
    this.newConsumer = newConsumer;
    return this;
  }

  public void unsetNewConsumer() {
    this.newConsumer = null;
  }

  /** Returns true if field newConsumer is set (has been assigned a value) and false otherwise */
  public boolean isSetNewConsumer() {
    return this.newConsumer != null;
  }

  public void setNewConsumerIsSet(boolean value) {
    if (!value) {
      this.newConsumer = null;
    }
  }

  public String getMetric() {
    return this.metric;
  }

  public TQueueConfigure setMetric(String metric) {
    this.metric = metric;
    return this;
  }

  public void unsetMetric() {
    this.metric = null;
  }

  /** Returns true if field metric is set (has been assigned a value) and false otherwise */
  public boolean isSetMetric() {
    return this.metric != null;
  }

  public void setMetricIsSet(boolean value) {
    if (!value) {
      this.metric = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case QUEUE_NAME:
      if (value == null) {
        unsetQueueName();
      } else {
        setQueueName((ByteBuffer)value);
      }
      break;

    case NEW_CONSUMER:
      if (value == null) {
        unsetNewConsumer();
      } else {
        setNewConsumer((TQueueConsumer)value);
      }
      break;

    case METRIC:
      if (value == null) {
        unsetMetric();
      } else {
        setMetric((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case QUEUE_NAME:
      return getQueueName();

    case NEW_CONSUMER:
      return getNewConsumer();

    case METRIC:
      return getMetric();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case QUEUE_NAME:
      return isSetQueueName();
    case NEW_CONSUMER:
      return isSetNewConsumer();
    case METRIC:
      return isSetMetric();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TQueueConfigure)
      return this.equals((TQueueConfigure)that);
    return false;
  }

  public boolean equals(TQueueConfigure that) {
    if (that == null)
      return false;

    boolean this_present_queueName = true && this.isSetQueueName();
    boolean that_present_queueName = true && that.isSetQueueName();
    if (this_present_queueName || that_present_queueName) {
      if (!(this_present_queueName && that_present_queueName))
        return false;
      if (!this.queueName.equals(that.queueName))
        return false;
    }

    boolean this_present_newConsumer = true && this.isSetNewConsumer();
    boolean that_present_newConsumer = true && that.isSetNewConsumer();
    if (this_present_newConsumer || that_present_newConsumer) {
      if (!(this_present_newConsumer && that_present_newConsumer))
        return false;
      if (!this.newConsumer.equals(that.newConsumer))
        return false;
    }

    boolean this_present_metric = true && this.isSetMetric();
    boolean that_present_metric = true && that.isSetMetric();
    if (this_present_metric || that_present_metric) {
      if (!(this_present_metric && that_present_metric))
        return false;
      if (!this.metric.equals(that.metric))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TQueueConfigure other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TQueueConfigure typedOther = (TQueueConfigure)other;

    lastComparison = Boolean.valueOf(isSetQueueName()).compareTo(typedOther.isSetQueueName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueueName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queueName, typedOther.queueName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNewConsumer()).compareTo(typedOther.isSetNewConsumer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewConsumer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newConsumer, typedOther.newConsumer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMetric()).compareTo(typedOther.isSetMetric());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetric()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metric, typedOther.metric);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TQueueConfigure(");
    boolean first = true;

    sb.append("queueName:");
    if (this.queueName == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.queueName, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("newConsumer:");
    if (this.newConsumer == null) {
      sb.append("null");
    } else {
      sb.append(this.newConsumer);
    }
    first = false;
    if (isSetMetric()) {
      if (!first) sb.append(", ");
      sb.append("metric:");
      if (this.metric == null) {
        sb.append("null");
      } else {
        sb.append(this.metric);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TQueueConfigureStandardSchemeFactory implements SchemeFactory {
    public TQueueConfigureStandardScheme getScheme() {
      return new TQueueConfigureStandardScheme();
    }
  }

  private static class TQueueConfigureStandardScheme extends StandardScheme<TQueueConfigure> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TQueueConfigure struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // QUEUE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.queueName = iprot.readBinary();
              struct.setQueueNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NEW_CONSUMER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.newConsumer = new TQueueConsumer();
              struct.newConsumer.read(iprot);
              struct.setNewConsumerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // METRIC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.metric = iprot.readString();
              struct.setMetricIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TQueueConfigure struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.queueName != null) {
        oprot.writeFieldBegin(QUEUE_NAME_FIELD_DESC);
        oprot.writeBinary(struct.queueName);
        oprot.writeFieldEnd();
      }
      if (struct.newConsumer != null) {
        oprot.writeFieldBegin(NEW_CONSUMER_FIELD_DESC);
        struct.newConsumer.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.metric != null) {
        if (struct.isSetMetric()) {
          oprot.writeFieldBegin(METRIC_FIELD_DESC);
          oprot.writeString(struct.metric);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TQueueConfigureTupleSchemeFactory implements SchemeFactory {
    public TQueueConfigureTupleScheme getScheme() {
      return new TQueueConfigureTupleScheme();
    }
  }

  private static class TQueueConfigureTupleScheme extends TupleScheme<TQueueConfigure> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TQueueConfigure struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetQueueName()) {
        optionals.set(0);
      }
      if (struct.isSetNewConsumer()) {
        optionals.set(1);
      }
      if (struct.isSetMetric()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetQueueName()) {
        oprot.writeBinary(struct.queueName);
      }
      if (struct.isSetNewConsumer()) {
        struct.newConsumer.write(oprot);
      }
      if (struct.isSetMetric()) {
        oprot.writeString(struct.metric);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TQueueConfigure struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.queueName = iprot.readBinary();
        struct.setQueueNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.newConsumer = new TQueueConsumer();
        struct.newConsumer.read(iprot);
        struct.setNewConsumerIsSet(true);
      }
      if (incoming.get(2)) {
        struct.metric = iprot.readString();
        struct.setMetricIsSet(true);
      }
    }
  }

}

