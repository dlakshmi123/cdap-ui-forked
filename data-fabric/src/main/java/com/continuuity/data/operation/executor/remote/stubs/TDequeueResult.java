/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.continuuity.data.operation.executor.remote.stubs;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TDequeueResult implements org.apache.thrift.TBase<TDequeueResult, TDequeueResult._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDequeueResult");

  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField POINTERS_FIELD_DESC = new org.apache.thrift.protocol.TField("pointers", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField ENTRIES_FIELD_DESC = new org.apache.thrift.protocol.TField("entries", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField CONSUMER_FIELD_DESC = new org.apache.thrift.protocol.TField("consumer", org.apache.thrift.protocol.TType.STRUCT, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TDequeueResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TDequeueResultTupleSchemeFactory());
  }

  /**
   * 
   * @see TDequeueStatus
   */
  public TDequeueStatus status; // required
  public List<TQueueEntryPointer> pointers; // optional
  public List<TQueueEntry> entries; // optional
  public TQueueConsumer consumer; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see TDequeueStatus
     */
    STATUS((short)1, "status"),
    POINTERS((short)2, "pointers"),
    ENTRIES((short)3, "entries"),
    CONSUMER((short)4, "consumer");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATUS
          return STATUS;
        case 2: // POINTERS
          return POINTERS;
        case 3: // ENTRIES
          return ENTRIES;
        case 4: // CONSUMER
          return CONSUMER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.POINTERS,_Fields.ENTRIES,_Fields.CONSUMER};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TDequeueStatus.class)));
    tmpMap.put(_Fields.POINTERS, new org.apache.thrift.meta_data.FieldMetaData("pointers", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TQueueEntryPointer.class))));
    tmpMap.put(_Fields.ENTRIES, new org.apache.thrift.meta_data.FieldMetaData("entries", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TQueueEntry.class))));
    tmpMap.put(_Fields.CONSUMER, new org.apache.thrift.meta_data.FieldMetaData("consumer", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TQueueConsumer.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDequeueResult.class, metaDataMap);
  }

  public TDequeueResult() {
  }

  public TDequeueResult(
    TDequeueStatus status)
  {
    this();
    this.status = status;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDequeueResult(TDequeueResult other) {
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetPointers()) {
      List<TQueueEntryPointer> __this__pointers = new ArrayList<TQueueEntryPointer>();
      for (TQueueEntryPointer other_element : other.pointers) {
        __this__pointers.add(new TQueueEntryPointer(other_element));
      }
      this.pointers = __this__pointers;
    }
    if (other.isSetEntries()) {
      List<TQueueEntry> __this__entries = new ArrayList<TQueueEntry>();
      for (TQueueEntry other_element : other.entries) {
        __this__entries.add(new TQueueEntry(other_element));
      }
      this.entries = __this__entries;
    }
    if (other.isSetConsumer()) {
      this.consumer = new TQueueConsumer(other.consumer);
    }
  }

  public TDequeueResult deepCopy() {
    return new TDequeueResult(this);
  }

  @Override
  public void clear() {
    this.status = null;
    this.pointers = null;
    this.entries = null;
    this.consumer = null;
  }

  /**
   * 
   * @see TDequeueStatus
   */
  public TDequeueStatus getStatus() {
    return this.status;
  }

  /**
   * 
   * @see TDequeueStatus
   */
  public TDequeueResult setStatus(TDequeueStatus status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public int getPointersSize() {
    return (this.pointers == null) ? 0 : this.pointers.size();
  }

  public java.util.Iterator<TQueueEntryPointer> getPointersIterator() {
    return (this.pointers == null) ? null : this.pointers.iterator();
  }

  public void addToPointers(TQueueEntryPointer elem) {
    if (this.pointers == null) {
      this.pointers = new ArrayList<TQueueEntryPointer>();
    }
    this.pointers.add(elem);
  }

  public List<TQueueEntryPointer> getPointers() {
    return this.pointers;
  }

  public TDequeueResult setPointers(List<TQueueEntryPointer> pointers) {
    this.pointers = pointers;
    return this;
  }

  public void unsetPointers() {
    this.pointers = null;
  }

  /** Returns true if field pointers is set (has been assigned a value) and false otherwise */
  public boolean isSetPointers() {
    return this.pointers != null;
  }

  public void setPointersIsSet(boolean value) {
    if (!value) {
      this.pointers = null;
    }
  }

  public int getEntriesSize() {
    return (this.entries == null) ? 0 : this.entries.size();
  }

  public java.util.Iterator<TQueueEntry> getEntriesIterator() {
    return (this.entries == null) ? null : this.entries.iterator();
  }

  public void addToEntries(TQueueEntry elem) {
    if (this.entries == null) {
      this.entries = new ArrayList<TQueueEntry>();
    }
    this.entries.add(elem);
  }

  public List<TQueueEntry> getEntries() {
    return this.entries;
  }

  public TDequeueResult setEntries(List<TQueueEntry> entries) {
    this.entries = entries;
    return this;
  }

  public void unsetEntries() {
    this.entries = null;
  }

  /** Returns true if field entries is set (has been assigned a value) and false otherwise */
  public boolean isSetEntries() {
    return this.entries != null;
  }

  public void setEntriesIsSet(boolean value) {
    if (!value) {
      this.entries = null;
    }
  }

  public TQueueConsumer getConsumer() {
    return this.consumer;
  }

  public TDequeueResult setConsumer(TQueueConsumer consumer) {
    this.consumer = consumer;
    return this;
  }

  public void unsetConsumer() {
    this.consumer = null;
  }

  /** Returns true if field consumer is set (has been assigned a value) and false otherwise */
  public boolean isSetConsumer() {
    return this.consumer != null;
  }

  public void setConsumerIsSet(boolean value) {
    if (!value) {
      this.consumer = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((TDequeueStatus)value);
      }
      break;

    case POINTERS:
      if (value == null) {
        unsetPointers();
      } else {
        setPointers((List<TQueueEntryPointer>)value);
      }
      break;

    case ENTRIES:
      if (value == null) {
        unsetEntries();
      } else {
        setEntries((List<TQueueEntry>)value);
      }
      break;

    case CONSUMER:
      if (value == null) {
        unsetConsumer();
      } else {
        setConsumer((TQueueConsumer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STATUS:
      return getStatus();

    case POINTERS:
      return getPointers();

    case ENTRIES:
      return getEntries();

    case CONSUMER:
      return getConsumer();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STATUS:
      return isSetStatus();
    case POINTERS:
      return isSetPointers();
    case ENTRIES:
      return isSetEntries();
    case CONSUMER:
      return isSetConsumer();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TDequeueResult)
      return this.equals((TDequeueResult)that);
    return false;
  }

  public boolean equals(TDequeueResult that) {
    if (that == null)
      return false;

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_pointers = true && this.isSetPointers();
    boolean that_present_pointers = true && that.isSetPointers();
    if (this_present_pointers || that_present_pointers) {
      if (!(this_present_pointers && that_present_pointers))
        return false;
      if (!this.pointers.equals(that.pointers))
        return false;
    }

    boolean this_present_entries = true && this.isSetEntries();
    boolean that_present_entries = true && that.isSetEntries();
    if (this_present_entries || that_present_entries) {
      if (!(this_present_entries && that_present_entries))
        return false;
      if (!this.entries.equals(that.entries))
        return false;
    }

    boolean this_present_consumer = true && this.isSetConsumer();
    boolean that_present_consumer = true && that.isSetConsumer();
    if (this_present_consumer || that_present_consumer) {
      if (!(this_present_consumer && that_present_consumer))
        return false;
      if (!this.consumer.equals(that.consumer))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TDequeueResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TDequeueResult typedOther = (TDequeueResult)other;

    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPointers()).compareTo(typedOther.isSetPointers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPointers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pointers, typedOther.pointers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEntries()).compareTo(typedOther.isSetEntries());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEntries()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entries, typedOther.entries);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConsumer()).compareTo(typedOther.isSetConsumer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConsumer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.consumer, typedOther.consumer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TDequeueResult(");
    boolean first = true;

    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (isSetPointers()) {
      if (!first) sb.append(", ");
      sb.append("pointers:");
      if (this.pointers == null) {
        sb.append("null");
      } else {
        sb.append(this.pointers);
      }
      first = false;
    }
    if (isSetEntries()) {
      if (!first) sb.append(", ");
      sb.append("entries:");
      if (this.entries == null) {
        sb.append("null");
      } else {
        sb.append(this.entries);
      }
      first = false;
    }
    if (isSetConsumer()) {
      if (!first) sb.append(", ");
      sb.append("consumer:");
      if (this.consumer == null) {
        sb.append("null");
      } else {
        sb.append(this.consumer);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDequeueResultStandardSchemeFactory implements SchemeFactory {
    public TDequeueResultStandardScheme getScheme() {
      return new TDequeueResultStandardScheme();
    }
  }

  private static class TDequeueResultStandardScheme extends StandardScheme<TDequeueResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TDequeueResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = TDequeueStatus.findByValue(iprot.readI32());
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // POINTERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list82 = iprot.readListBegin();
                struct.pointers = new ArrayList<TQueueEntryPointer>(_list82.size);
                for (int _i83 = 0; _i83 < _list82.size; ++_i83)
                {
                  TQueueEntryPointer _elem84; // required
                  _elem84 = new TQueueEntryPointer();
                  _elem84.read(iprot);
                  struct.pointers.add(_elem84);
                }
                iprot.readListEnd();
              }
              struct.setPointersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ENTRIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list85 = iprot.readListBegin();
                struct.entries = new ArrayList<TQueueEntry>(_list85.size);
                for (int _i86 = 0; _i86 < _list85.size; ++_i86)
                {
                  TQueueEntry _elem87; // required
                  _elem87 = new TQueueEntry();
                  _elem87.read(iprot);
                  struct.entries.add(_elem87);
                }
                iprot.readListEnd();
              }
              struct.setEntriesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CONSUMER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.consumer = new TQueueConsumer();
              struct.consumer.read(iprot);
              struct.setConsumerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TDequeueResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.pointers != null) {
        if (struct.isSetPointers()) {
          oprot.writeFieldBegin(POINTERS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.pointers.size()));
            for (TQueueEntryPointer _iter88 : struct.pointers)
            {
              _iter88.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.entries != null) {
        if (struct.isSetEntries()) {
          oprot.writeFieldBegin(ENTRIES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.entries.size()));
            for (TQueueEntry _iter89 : struct.entries)
            {
              _iter89.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.consumer != null) {
        if (struct.isSetConsumer()) {
          oprot.writeFieldBegin(CONSUMER_FIELD_DESC);
          struct.consumer.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDequeueResultTupleSchemeFactory implements SchemeFactory {
    public TDequeueResultTupleScheme getScheme() {
      return new TDequeueResultTupleScheme();
    }
  }

  private static class TDequeueResultTupleScheme extends TupleScheme<TDequeueResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDequeueResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetStatus()) {
        optionals.set(0);
      }
      if (struct.isSetPointers()) {
        optionals.set(1);
      }
      if (struct.isSetEntries()) {
        optionals.set(2);
      }
      if (struct.isSetConsumer()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status.getValue());
      }
      if (struct.isSetPointers()) {
        {
          oprot.writeI32(struct.pointers.size());
          for (TQueueEntryPointer _iter90 : struct.pointers)
          {
            _iter90.write(oprot);
          }
        }
      }
      if (struct.isSetEntries()) {
        {
          oprot.writeI32(struct.entries.size());
          for (TQueueEntry _iter91 : struct.entries)
          {
            _iter91.write(oprot);
          }
        }
      }
      if (struct.isSetConsumer()) {
        struct.consumer.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDequeueResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.status = TDequeueStatus.findByValue(iprot.readI32());
        struct.setStatusIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list92 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.pointers = new ArrayList<TQueueEntryPointer>(_list92.size);
          for (int _i93 = 0; _i93 < _list92.size; ++_i93)
          {
            TQueueEntryPointer _elem94; // required
            _elem94 = new TQueueEntryPointer();
            _elem94.read(iprot);
            struct.pointers.add(_elem94);
          }
        }
        struct.setPointersIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list95 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.entries = new ArrayList<TQueueEntry>(_list95.size);
          for (int _i96 = 0; _i96 < _list95.size; ++_i96)
          {
            TQueueEntry _elem97; // required
            _elem97 = new TQueueEntry();
            _elem97.read(iprot);
            struct.entries.add(_elem97);
          }
        }
        struct.setEntriesIsSet(true);
      }
      if (incoming.get(3)) {
        struct.consumer = new TQueueConsumer();
        struct.consumer.read(iprot);
        struct.setConsumerIsSet(true);
      }
    }
  }

}

