/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.continuuity.data.operation.executor.remote.stubs;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TTransaction implements org.apache.thrift.TBase<TTransaction, TTransaction._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TTransaction");

  private static final org.apache.thrift.protocol.TField IS_NULL_FIELD_DESC = new org.apache.thrift.protocol.TField("isNull", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField TXID_FIELD_DESC = new org.apache.thrift.protocol.TField("txid", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField READ_POINTER_FIELD_DESC = new org.apache.thrift.protocol.TField("readPointer", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField TRACK_CHANGES_FIELD_DESC = new org.apache.thrift.protocol.TField("trackChanges", org.apache.thrift.protocol.TType.BOOL, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TTransactionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TTransactionTupleSchemeFactory());
  }

  public boolean isNull; // required
  public long txid; // optional
  public TReadPointer readPointer; // optional
  public boolean trackChanges; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    IS_NULL((short)1, "isNull"),
    TXID((short)2, "txid"),
    READ_POINTER((short)3, "readPointer"),
    TRACK_CHANGES((short)4, "trackChanges");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // IS_NULL
          return IS_NULL;
        case 2: // TXID
          return TXID;
        case 3: // READ_POINTER
          return READ_POINTER;
        case 4: // TRACK_CHANGES
          return TRACK_CHANGES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISNULL_ISSET_ID = 0;
  private static final int __TXID_ISSET_ID = 1;
  private static final int __TRACKCHANGES_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);
  private _Fields optionals[] = {_Fields.TXID,_Fields.READ_POINTER,_Fields.TRACK_CHANGES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.IS_NULL, new org.apache.thrift.meta_data.FieldMetaData("isNull", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TXID, new org.apache.thrift.meta_data.FieldMetaData("txid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.READ_POINTER, new org.apache.thrift.meta_data.FieldMetaData("readPointer", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TReadPointer.class)));
    tmpMap.put(_Fields.TRACK_CHANGES, new org.apache.thrift.meta_data.FieldMetaData("trackChanges", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TTransaction.class, metaDataMap);
  }

  public TTransaction() {
  }

  public TTransaction(
    boolean isNull)
  {
    this();
    this.isNull = isNull;
    setIsNullIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TTransaction(TTransaction other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.isNull = other.isNull;
    this.txid = other.txid;
    if (other.isSetReadPointer()) {
      this.readPointer = new TReadPointer(other.readPointer);
    }
    this.trackChanges = other.trackChanges;
  }

  public TTransaction deepCopy() {
    return new TTransaction(this);
  }

  @Override
  public void clear() {
    setIsNullIsSet(false);
    this.isNull = false;
    setTxidIsSet(false);
    this.txid = 0;
    this.readPointer = null;
    setTrackChangesIsSet(false);
    this.trackChanges = false;
  }

  public boolean isIsNull() {
    return this.isNull;
  }

  public TTransaction setIsNull(boolean isNull) {
    this.isNull = isNull;
    setIsNullIsSet(true);
    return this;
  }

  public void unsetIsNull() {
    __isset_bit_vector.clear(__ISNULL_ISSET_ID);
  }

  /** Returns true if field isNull is set (has been assigned a value) and false otherwise */
  public boolean isSetIsNull() {
    return __isset_bit_vector.get(__ISNULL_ISSET_ID);
  }

  public void setIsNullIsSet(boolean value) {
    __isset_bit_vector.set(__ISNULL_ISSET_ID, value);
  }

  public long getTxid() {
    return this.txid;
  }

  public TTransaction setTxid(long txid) {
    this.txid = txid;
    setTxidIsSet(true);
    return this;
  }

  public void unsetTxid() {
    __isset_bit_vector.clear(__TXID_ISSET_ID);
  }

  /** Returns true if field txid is set (has been assigned a value) and false otherwise */
  public boolean isSetTxid() {
    return __isset_bit_vector.get(__TXID_ISSET_ID);
  }

  public void setTxidIsSet(boolean value) {
    __isset_bit_vector.set(__TXID_ISSET_ID, value);
  }

  public TReadPointer getReadPointer() {
    return this.readPointer;
  }

  public TTransaction setReadPointer(TReadPointer readPointer) {
    this.readPointer = readPointer;
    return this;
  }

  public void unsetReadPointer() {
    this.readPointer = null;
  }

  /** Returns true if field readPointer is set (has been assigned a value) and false otherwise */
  public boolean isSetReadPointer() {
    return this.readPointer != null;
  }

  public void setReadPointerIsSet(boolean value) {
    if (!value) {
      this.readPointer = null;
    }
  }

  public boolean isTrackChanges() {
    return this.trackChanges;
  }

  public TTransaction setTrackChanges(boolean trackChanges) {
    this.trackChanges = trackChanges;
    setTrackChangesIsSet(true);
    return this;
  }

  public void unsetTrackChanges() {
    __isset_bit_vector.clear(__TRACKCHANGES_ISSET_ID);
  }

  /** Returns true if field trackChanges is set (has been assigned a value) and false otherwise */
  public boolean isSetTrackChanges() {
    return __isset_bit_vector.get(__TRACKCHANGES_ISSET_ID);
  }

  public void setTrackChangesIsSet(boolean value) {
    __isset_bit_vector.set(__TRACKCHANGES_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case IS_NULL:
      if (value == null) {
        unsetIsNull();
      } else {
        setIsNull((Boolean)value);
      }
      break;

    case TXID:
      if (value == null) {
        unsetTxid();
      } else {
        setTxid((Long)value);
      }
      break;

    case READ_POINTER:
      if (value == null) {
        unsetReadPointer();
      } else {
        setReadPointer((TReadPointer)value);
      }
      break;

    case TRACK_CHANGES:
      if (value == null) {
        unsetTrackChanges();
      } else {
        setTrackChanges((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case IS_NULL:
      return Boolean.valueOf(isIsNull());

    case TXID:
      return Long.valueOf(getTxid());

    case READ_POINTER:
      return getReadPointer();

    case TRACK_CHANGES:
      return Boolean.valueOf(isTrackChanges());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case IS_NULL:
      return isSetIsNull();
    case TXID:
      return isSetTxid();
    case READ_POINTER:
      return isSetReadPointer();
    case TRACK_CHANGES:
      return isSetTrackChanges();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TTransaction)
      return this.equals((TTransaction)that);
    return false;
  }

  public boolean equals(TTransaction that) {
    if (that == null)
      return false;

    boolean this_present_isNull = true;
    boolean that_present_isNull = true;
    if (this_present_isNull || that_present_isNull) {
      if (!(this_present_isNull && that_present_isNull))
        return false;
      if (this.isNull != that.isNull)
        return false;
    }

    boolean this_present_txid = true && this.isSetTxid();
    boolean that_present_txid = true && that.isSetTxid();
    if (this_present_txid || that_present_txid) {
      if (!(this_present_txid && that_present_txid))
        return false;
      if (this.txid != that.txid)
        return false;
    }

    boolean this_present_readPointer = true && this.isSetReadPointer();
    boolean that_present_readPointer = true && that.isSetReadPointer();
    if (this_present_readPointer || that_present_readPointer) {
      if (!(this_present_readPointer && that_present_readPointer))
        return false;
      if (!this.readPointer.equals(that.readPointer))
        return false;
    }

    boolean this_present_trackChanges = true && this.isSetTrackChanges();
    boolean that_present_trackChanges = true && that.isSetTrackChanges();
    if (this_present_trackChanges || that_present_trackChanges) {
      if (!(this_present_trackChanges && that_present_trackChanges))
        return false;
      if (this.trackChanges != that.trackChanges)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TTransaction other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TTransaction typedOther = (TTransaction)other;

    lastComparison = Boolean.valueOf(isSetIsNull()).compareTo(typedOther.isSetIsNull());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsNull()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isNull, typedOther.isNull);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTxid()).compareTo(typedOther.isSetTxid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTxid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txid, typedOther.txid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReadPointer()).compareTo(typedOther.isSetReadPointer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReadPointer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.readPointer, typedOther.readPointer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTrackChanges()).compareTo(typedOther.isSetTrackChanges());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTrackChanges()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trackChanges, typedOther.trackChanges);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TTransaction(");
    boolean first = true;

    sb.append("isNull:");
    sb.append(this.isNull);
    first = false;
    if (isSetTxid()) {
      if (!first) sb.append(", ");
      sb.append("txid:");
      sb.append(this.txid);
      first = false;
    }
    if (isSetReadPointer()) {
      if (!first) sb.append(", ");
      sb.append("readPointer:");
      if (this.readPointer == null) {
        sb.append("null");
      } else {
        sb.append(this.readPointer);
      }
      first = false;
    }
    if (isSetTrackChanges()) {
      if (!first) sb.append(", ");
      sb.append("trackChanges:");
      sb.append(this.trackChanges);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TTransactionStandardSchemeFactory implements SchemeFactory {
    public TTransactionStandardScheme getScheme() {
      return new TTransactionStandardScheme();
    }
  }

  private static class TTransactionStandardScheme extends StandardScheme<TTransaction> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TTransaction struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // IS_NULL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isNull = iprot.readBool();
              struct.setIsNullIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TXID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.txid = iprot.readI64();
              struct.setTxidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // READ_POINTER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.readPointer = new TReadPointer();
              struct.readPointer.read(iprot);
              struct.setReadPointerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TRACK_CHANGES
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.trackChanges = iprot.readBool();
              struct.setTrackChangesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TTransaction struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(IS_NULL_FIELD_DESC);
      oprot.writeBool(struct.isNull);
      oprot.writeFieldEnd();
      if (struct.isSetTxid()) {
        oprot.writeFieldBegin(TXID_FIELD_DESC);
        oprot.writeI64(struct.txid);
        oprot.writeFieldEnd();
      }
      if (struct.readPointer != null) {
        if (struct.isSetReadPointer()) {
          oprot.writeFieldBegin(READ_POINTER_FIELD_DESC);
          struct.readPointer.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTrackChanges()) {
        oprot.writeFieldBegin(TRACK_CHANGES_FIELD_DESC);
        oprot.writeBool(struct.trackChanges);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TTransactionTupleSchemeFactory implements SchemeFactory {
    public TTransactionTupleScheme getScheme() {
      return new TTransactionTupleScheme();
    }
  }

  private static class TTransactionTupleScheme extends TupleScheme<TTransaction> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TTransaction struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetIsNull()) {
        optionals.set(0);
      }
      if (struct.isSetTxid()) {
        optionals.set(1);
      }
      if (struct.isSetReadPointer()) {
        optionals.set(2);
      }
      if (struct.isSetTrackChanges()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetIsNull()) {
        oprot.writeBool(struct.isNull);
      }
      if (struct.isSetTxid()) {
        oprot.writeI64(struct.txid);
      }
      if (struct.isSetReadPointer()) {
        struct.readPointer.write(oprot);
      }
      if (struct.isSetTrackChanges()) {
        oprot.writeBool(struct.trackChanges);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TTransaction struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.isNull = iprot.readBool();
        struct.setIsNullIsSet(true);
      }
      if (incoming.get(1)) {
        struct.txid = iprot.readI64();
        struct.setTxidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.readPointer = new TReadPointer();
        struct.readPointer.read(iprot);
        struct.setReadPointerIsSet(true);
      }
      if (incoming.get(3)) {
        struct.trackChanges = iprot.readBool();
        struct.setTrackChangesIsSet(true);
      }
    }
  }

}

