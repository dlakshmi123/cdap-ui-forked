/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.continuuity.data.operation.executor.remote.stubs;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TQueueConfig implements org.apache.thrift.TBase<TQueueConfig, TQueueConfig._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TQueueConfig");

  private static final org.apache.thrift.protocol.TField PARTITIONER_FIELD_DESC = new org.apache.thrift.protocol.TField("partitioner", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SINGLE_ENTRY_FIELD_DESC = new org.apache.thrift.protocol.TField("singleEntry", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField BATCH_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("batchSize", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField RETURN_BATCH_FIELD_DESC = new org.apache.thrift.protocol.TField("returnBatch", org.apache.thrift.protocol.TType.BOOL, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TQueueConfigStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TQueueConfigTupleSchemeFactory());
  }

  /**
   * 
   * @see TQueuePartitioner
   */
  public TQueuePartitioner partitioner; // required
  public boolean singleEntry; // required
  public int batchSize; // required
  public boolean returnBatch; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see TQueuePartitioner
     */
    PARTITIONER((short)1, "partitioner"),
    SINGLE_ENTRY((short)2, "singleEntry"),
    BATCH_SIZE((short)3, "batchSize"),
    RETURN_BATCH((short)4, "returnBatch");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PARTITIONER
          return PARTITIONER;
        case 2: // SINGLE_ENTRY
          return SINGLE_ENTRY;
        case 3: // BATCH_SIZE
          return BATCH_SIZE;
        case 4: // RETURN_BATCH
          return RETURN_BATCH;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SINGLEENTRY_ISSET_ID = 0;
  private static final int __BATCHSIZE_ISSET_ID = 1;
  private static final int __RETURNBATCH_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PARTITIONER, new org.apache.thrift.meta_data.FieldMetaData("partitioner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TQueuePartitioner.class)));
    tmpMap.put(_Fields.SINGLE_ENTRY, new org.apache.thrift.meta_data.FieldMetaData("singleEntry", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BATCH_SIZE, new org.apache.thrift.meta_data.FieldMetaData("batchSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RETURN_BATCH, new org.apache.thrift.meta_data.FieldMetaData("returnBatch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TQueueConfig.class, metaDataMap);
  }

  public TQueueConfig() {
  }

  public TQueueConfig(
    TQueuePartitioner partitioner,
    boolean singleEntry,
    int batchSize,
    boolean returnBatch)
  {
    this();
    this.partitioner = partitioner;
    this.singleEntry = singleEntry;
    setSingleEntryIsSet(true);
    this.batchSize = batchSize;
    setBatchSizeIsSet(true);
    this.returnBatch = returnBatch;
    setReturnBatchIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TQueueConfig(TQueueConfig other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetPartitioner()) {
      this.partitioner = other.partitioner;
    }
    this.singleEntry = other.singleEntry;
    this.batchSize = other.batchSize;
    this.returnBatch = other.returnBatch;
  }

  public TQueueConfig deepCopy() {
    return new TQueueConfig(this);
  }

  @Override
  public void clear() {
    this.partitioner = null;
    setSingleEntryIsSet(false);
    this.singleEntry = false;
    setBatchSizeIsSet(false);
    this.batchSize = 0;
    setReturnBatchIsSet(false);
    this.returnBatch = false;
  }

  /**
   * 
   * @see TQueuePartitioner
   */
  public TQueuePartitioner getPartitioner() {
    return this.partitioner;
  }

  /**
   * 
   * @see TQueuePartitioner
   */
  public TQueueConfig setPartitioner(TQueuePartitioner partitioner) {
    this.partitioner = partitioner;
    return this;
  }

  public void unsetPartitioner() {
    this.partitioner = null;
  }

  /** Returns true if field partitioner is set (has been assigned a value) and false otherwise */
  public boolean isSetPartitioner() {
    return this.partitioner != null;
  }

  public void setPartitionerIsSet(boolean value) {
    if (!value) {
      this.partitioner = null;
    }
  }

  public boolean isSingleEntry() {
    return this.singleEntry;
  }

  public TQueueConfig setSingleEntry(boolean singleEntry) {
    this.singleEntry = singleEntry;
    setSingleEntryIsSet(true);
    return this;
  }

  public void unsetSingleEntry() {
    __isset_bit_vector.clear(__SINGLEENTRY_ISSET_ID);
  }

  /** Returns true if field singleEntry is set (has been assigned a value) and false otherwise */
  public boolean isSetSingleEntry() {
    return __isset_bit_vector.get(__SINGLEENTRY_ISSET_ID);
  }

  public void setSingleEntryIsSet(boolean value) {
    __isset_bit_vector.set(__SINGLEENTRY_ISSET_ID, value);
  }

  public int getBatchSize() {
    return this.batchSize;
  }

  public TQueueConfig setBatchSize(int batchSize) {
    this.batchSize = batchSize;
    setBatchSizeIsSet(true);
    return this;
  }

  public void unsetBatchSize() {
    __isset_bit_vector.clear(__BATCHSIZE_ISSET_ID);
  }

  /** Returns true if field batchSize is set (has been assigned a value) and false otherwise */
  public boolean isSetBatchSize() {
    return __isset_bit_vector.get(__BATCHSIZE_ISSET_ID);
  }

  public void setBatchSizeIsSet(boolean value) {
    __isset_bit_vector.set(__BATCHSIZE_ISSET_ID, value);
  }

  public boolean isReturnBatch() {
    return this.returnBatch;
  }

  public TQueueConfig setReturnBatch(boolean returnBatch) {
    this.returnBatch = returnBatch;
    setReturnBatchIsSet(true);
    return this;
  }

  public void unsetReturnBatch() {
    __isset_bit_vector.clear(__RETURNBATCH_ISSET_ID);
  }

  /** Returns true if field returnBatch is set (has been assigned a value) and false otherwise */
  public boolean isSetReturnBatch() {
    return __isset_bit_vector.get(__RETURNBATCH_ISSET_ID);
  }

  public void setReturnBatchIsSet(boolean value) {
    __isset_bit_vector.set(__RETURNBATCH_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PARTITIONER:
      if (value == null) {
        unsetPartitioner();
      } else {
        setPartitioner((TQueuePartitioner)value);
      }
      break;

    case SINGLE_ENTRY:
      if (value == null) {
        unsetSingleEntry();
      } else {
        setSingleEntry((Boolean)value);
      }
      break;

    case BATCH_SIZE:
      if (value == null) {
        unsetBatchSize();
      } else {
        setBatchSize((Integer)value);
      }
      break;

    case RETURN_BATCH:
      if (value == null) {
        unsetReturnBatch();
      } else {
        setReturnBatch((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PARTITIONER:
      return getPartitioner();

    case SINGLE_ENTRY:
      return Boolean.valueOf(isSingleEntry());

    case BATCH_SIZE:
      return Integer.valueOf(getBatchSize());

    case RETURN_BATCH:
      return Boolean.valueOf(isReturnBatch());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PARTITIONER:
      return isSetPartitioner();
    case SINGLE_ENTRY:
      return isSetSingleEntry();
    case BATCH_SIZE:
      return isSetBatchSize();
    case RETURN_BATCH:
      return isSetReturnBatch();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TQueueConfig)
      return this.equals((TQueueConfig)that);
    return false;
  }

  public boolean equals(TQueueConfig that) {
    if (that == null)
      return false;

    boolean this_present_partitioner = true && this.isSetPartitioner();
    boolean that_present_partitioner = true && that.isSetPartitioner();
    if (this_present_partitioner || that_present_partitioner) {
      if (!(this_present_partitioner && that_present_partitioner))
        return false;
      if (!this.partitioner.equals(that.partitioner))
        return false;
    }

    boolean this_present_singleEntry = true;
    boolean that_present_singleEntry = true;
    if (this_present_singleEntry || that_present_singleEntry) {
      if (!(this_present_singleEntry && that_present_singleEntry))
        return false;
      if (this.singleEntry != that.singleEntry)
        return false;
    }

    boolean this_present_batchSize = true;
    boolean that_present_batchSize = true;
    if (this_present_batchSize || that_present_batchSize) {
      if (!(this_present_batchSize && that_present_batchSize))
        return false;
      if (this.batchSize != that.batchSize)
        return false;
    }

    boolean this_present_returnBatch = true;
    boolean that_present_returnBatch = true;
    if (this_present_returnBatch || that_present_returnBatch) {
      if (!(this_present_returnBatch && that_present_returnBatch))
        return false;
      if (this.returnBatch != that.returnBatch)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TQueueConfig other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TQueueConfig typedOther = (TQueueConfig)other;

    lastComparison = Boolean.valueOf(isSetPartitioner()).compareTo(typedOther.isSetPartitioner());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartitioner()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partitioner, typedOther.partitioner);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSingleEntry()).compareTo(typedOther.isSetSingleEntry());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSingleEntry()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.singleEntry, typedOther.singleEntry);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBatchSize()).compareTo(typedOther.isSetBatchSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBatchSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batchSize, typedOther.batchSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReturnBatch()).compareTo(typedOther.isSetReturnBatch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReturnBatch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.returnBatch, typedOther.returnBatch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TQueueConfig(");
    boolean first = true;

    sb.append("partitioner:");
    if (this.partitioner == null) {
      sb.append("null");
    } else {
      sb.append(this.partitioner);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("singleEntry:");
    sb.append(this.singleEntry);
    first = false;
    if (!first) sb.append(", ");
    sb.append("batchSize:");
    sb.append(this.batchSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("returnBatch:");
    sb.append(this.returnBatch);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TQueueConfigStandardSchemeFactory implements SchemeFactory {
    public TQueueConfigStandardScheme getScheme() {
      return new TQueueConfigStandardScheme();
    }
  }

  private static class TQueueConfigStandardScheme extends StandardScheme<TQueueConfig> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TQueueConfig struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PARTITIONER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.partitioner = TQueuePartitioner.findByValue(iprot.readI32());
              struct.setPartitionerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SINGLE_ENTRY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.singleEntry = iprot.readBool();
              struct.setSingleEntryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BATCH_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.batchSize = iprot.readI32();
              struct.setBatchSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RETURN_BATCH
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.returnBatch = iprot.readBool();
              struct.setReturnBatchIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TQueueConfig struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.partitioner != null) {
        oprot.writeFieldBegin(PARTITIONER_FIELD_DESC);
        oprot.writeI32(struct.partitioner.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SINGLE_ENTRY_FIELD_DESC);
      oprot.writeBool(struct.singleEntry);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BATCH_SIZE_FIELD_DESC);
      oprot.writeI32(struct.batchSize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RETURN_BATCH_FIELD_DESC);
      oprot.writeBool(struct.returnBatch);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TQueueConfigTupleSchemeFactory implements SchemeFactory {
    public TQueueConfigTupleScheme getScheme() {
      return new TQueueConfigTupleScheme();
    }
  }

  private static class TQueueConfigTupleScheme extends TupleScheme<TQueueConfig> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TQueueConfig struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPartitioner()) {
        optionals.set(0);
      }
      if (struct.isSetSingleEntry()) {
        optionals.set(1);
      }
      if (struct.isSetBatchSize()) {
        optionals.set(2);
      }
      if (struct.isSetReturnBatch()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetPartitioner()) {
        oprot.writeI32(struct.partitioner.getValue());
      }
      if (struct.isSetSingleEntry()) {
        oprot.writeBool(struct.singleEntry);
      }
      if (struct.isSetBatchSize()) {
        oprot.writeI32(struct.batchSize);
      }
      if (struct.isSetReturnBatch()) {
        oprot.writeBool(struct.returnBatch);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TQueueConfig struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.partitioner = TQueuePartitioner.findByValue(iprot.readI32());
        struct.setPartitionerIsSet(true);
      }
      if (incoming.get(1)) {
        struct.singleEntry = iprot.readBool();
        struct.setSingleEntryIsSet(true);
      }
      if (incoming.get(2)) {
        struct.batchSize = iprot.readI32();
        struct.setBatchSizeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.returnBatch = iprot.readBool();
        struct.setReturnBatchIsSet(true);
      }
    }
  }

}

