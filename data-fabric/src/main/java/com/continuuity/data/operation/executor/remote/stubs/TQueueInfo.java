/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.continuuity.data.operation.executor.remote.stubs;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TQueueInfo implements org.apache.thrift.TBase<TQueueInfo, TQueueInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TQueueInfo");

  private static final org.apache.thrift.protocol.TField EMPTY_FIELD_DESC = new org.apache.thrift.protocol.TField("empty", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField JSON_FIELD_DESC = new org.apache.thrift.protocol.TField("json", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TQueueInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TQueueInfoTupleSchemeFactory());
  }

  public boolean empty; // required
  public String json; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EMPTY((short)1, "empty"),
    JSON((short)2, "json");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EMPTY
          return EMPTY;
        case 2: // JSON
          return JSON;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EMPTY_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);
  private _Fields optionals[] = {_Fields.JSON};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EMPTY, new org.apache.thrift.meta_data.FieldMetaData("empty", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.JSON, new org.apache.thrift.meta_data.FieldMetaData("json", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TQueueInfo.class, metaDataMap);
  }

  public TQueueInfo() {
  }

  public TQueueInfo(
    boolean empty)
  {
    this();
    this.empty = empty;
    setEmptyIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TQueueInfo(TQueueInfo other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.empty = other.empty;
    if (other.isSetJson()) {
      this.json = other.json;
    }
  }

  public TQueueInfo deepCopy() {
    return new TQueueInfo(this);
  }

  @Override
  public void clear() {
    setEmptyIsSet(false);
    this.empty = false;
    this.json = null;
  }

  public boolean isEmpty() {
    return this.empty;
  }

  public TQueueInfo setEmpty(boolean empty) {
    this.empty = empty;
    setEmptyIsSet(true);
    return this;
  }

  public void unsetEmpty() {
    __isset_bit_vector.clear(__EMPTY_ISSET_ID);
  }

  /** Returns true if field empty is set (has been assigned a value) and false otherwise */
  public boolean isSetEmpty() {
    return __isset_bit_vector.get(__EMPTY_ISSET_ID);
  }

  public void setEmptyIsSet(boolean value) {
    __isset_bit_vector.set(__EMPTY_ISSET_ID, value);
  }

  public String getJson() {
    return this.json;
  }

  public TQueueInfo setJson(String json) {
    this.json = json;
    return this;
  }

  public void unsetJson() {
    this.json = null;
  }

  /** Returns true if field json is set (has been assigned a value) and false otherwise */
  public boolean isSetJson() {
    return this.json != null;
  }

  public void setJsonIsSet(boolean value) {
    if (!value) {
      this.json = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EMPTY:
      if (value == null) {
        unsetEmpty();
      } else {
        setEmpty((Boolean)value);
      }
      break;

    case JSON:
      if (value == null) {
        unsetJson();
      } else {
        setJson((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EMPTY:
      return Boolean.valueOf(isEmpty());

    case JSON:
      return getJson();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EMPTY:
      return isSetEmpty();
    case JSON:
      return isSetJson();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TQueueInfo)
      return this.equals((TQueueInfo)that);
    return false;
  }

  public boolean equals(TQueueInfo that) {
    if (that == null)
      return false;

    boolean this_present_empty = true;
    boolean that_present_empty = true;
    if (this_present_empty || that_present_empty) {
      if (!(this_present_empty && that_present_empty))
        return false;
      if (this.empty != that.empty)
        return false;
    }

    boolean this_present_json = true && this.isSetJson();
    boolean that_present_json = true && that.isSetJson();
    if (this_present_json || that_present_json) {
      if (!(this_present_json && that_present_json))
        return false;
      if (!this.json.equals(that.json))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TQueueInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TQueueInfo typedOther = (TQueueInfo)other;

    lastComparison = Boolean.valueOf(isSetEmpty()).compareTo(typedOther.isSetEmpty());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmpty()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.empty, typedOther.empty);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJson()).compareTo(typedOther.isSetJson());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJson()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json, typedOther.json);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TQueueInfo(");
    boolean first = true;

    sb.append("empty:");
    sb.append(this.empty);
    first = false;
    if (isSetJson()) {
      if (!first) sb.append(", ");
      sb.append("json:");
      if (this.json == null) {
        sb.append("null");
      } else {
        sb.append(this.json);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TQueueInfoStandardSchemeFactory implements SchemeFactory {
    public TQueueInfoStandardScheme getScheme() {
      return new TQueueInfoStandardScheme();
    }
  }

  private static class TQueueInfoStandardScheme extends StandardScheme<TQueueInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TQueueInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EMPTY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.empty = iprot.readBool();
              struct.setEmptyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // JSON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.json = iprot.readString();
              struct.setJsonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TQueueInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(EMPTY_FIELD_DESC);
      oprot.writeBool(struct.empty);
      oprot.writeFieldEnd();
      if (struct.json != null) {
        if (struct.isSetJson()) {
          oprot.writeFieldBegin(JSON_FIELD_DESC);
          oprot.writeString(struct.json);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TQueueInfoTupleSchemeFactory implements SchemeFactory {
    public TQueueInfoTupleScheme getScheme() {
      return new TQueueInfoTupleScheme();
    }
  }

  private static class TQueueInfoTupleScheme extends TupleScheme<TQueueInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TQueueInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetEmpty()) {
        optionals.set(0);
      }
      if (struct.isSetJson()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetEmpty()) {
        oprot.writeBool(struct.empty);
      }
      if (struct.isSetJson()) {
        oprot.writeString(struct.json);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TQueueInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.empty = iprot.readBool();
        struct.setEmptyIsSet(true);
      }
      if (incoming.get(1)) {
        struct.json = iprot.readString();
        struct.setJsonIsSet(true);
      }
    }
  }

}

