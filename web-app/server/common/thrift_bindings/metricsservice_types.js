//
// Autogenerated by Thrift Compiler (0.9.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var ttypes = module.exports = {};
ttypes.MetricTimeseriesLevel = {
'ACCOUNT_LEVEL' : 1,
'APPLICATION_LEVEL' : 2,
'FLOW_LEVEL' : 3,
'FLOWLET_LEVEL' : 4,
'RUNID_LEVEL' : 5
};
ttypes.TEntityType = {
'FLOW' : 1,
'PROCEDURE' : 2,
'MAP_REDUCE' : 3
};
Counter = module.exports.Counter = function(args) {
  this.qualifier = null;
  this.name = null;
  this.value = null;
  if (args) {
    if (args.qualifier !== undefined) {
      this.qualifier = args.qualifier;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
  }
};
Counter.prototype = {};
Counter.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.qualifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.value = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Counter.prototype.write = function(output) {
  output.writeStructBegin('Counter');
  if (this.qualifier !== null && this.qualifier !== undefined) {
    output.writeFieldBegin('qualifier', Thrift.Type.STRING, 1);
    output.writeString(this.qualifier);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetricsServiceException = module.exports.MetricsServiceException = function(args) {
  Thrift.TException.call(this, "MetricsServiceException")
  this.name = "MetricsServiceException"
  this.message = null;
  if (args) {
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(MetricsServiceException, Thrift.TException);
MetricsServiceException.prototype.name = 'MetricsServiceException';
MetricsServiceException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetricsServiceException.prototype.write = function(output) {
  output.writeStructBegin('MetricsServiceException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FlowArgument = module.exports.FlowArgument = function(args) {
  this.accountId = null;
  this.applicationId = null;
  this.flowId = null;
  this.runId = null;
  this.flowletId = null;
  this.instanceId = null;
  if (args) {
    if (args.accountId !== undefined) {
      this.accountId = args.accountId;
    }
    if (args.applicationId !== undefined) {
      this.applicationId = args.applicationId;
    }
    if (args.flowId !== undefined) {
      this.flowId = args.flowId;
    }
    if (args.runId !== undefined) {
      this.runId = args.runId;
    }
    if (args.flowletId !== undefined) {
      this.flowletId = args.flowletId;
    }
    if (args.instanceId !== undefined) {
      this.instanceId = args.instanceId;
    }
  }
};
FlowArgument.prototype = {};
FlowArgument.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.accountId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.applicationId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.flowId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.runId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.flowletId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.instanceId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FlowArgument.prototype.write = function(output) {
  output.writeStructBegin('FlowArgument');
  if (this.accountId !== null && this.accountId !== undefined) {
    output.writeFieldBegin('accountId', Thrift.Type.STRING, 1);
    output.writeString(this.accountId);
    output.writeFieldEnd();
  }
  if (this.applicationId !== null && this.applicationId !== undefined) {
    output.writeFieldBegin('applicationId', Thrift.Type.STRING, 2);
    output.writeString(this.applicationId);
    output.writeFieldEnd();
  }
  if (this.flowId !== null && this.flowId !== undefined) {
    output.writeFieldBegin('flowId', Thrift.Type.STRING, 3);
    output.writeString(this.flowId);
    output.writeFieldEnd();
  }
  if (this.runId !== null && this.runId !== undefined) {
    output.writeFieldBegin('runId', Thrift.Type.STRING, 4);
    output.writeString(this.runId);
    output.writeFieldEnd();
  }
  if (this.flowletId !== null && this.flowletId !== undefined) {
    output.writeFieldBegin('flowletId', Thrift.Type.STRING, 5);
    output.writeString(this.flowletId);
    output.writeFieldEnd();
  }
  if (this.instanceId !== null && this.instanceId !== undefined) {
    output.writeFieldBegin('instanceId', Thrift.Type.I32, 6);
    output.writeI32(this.instanceId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CounterRequest = module.exports.CounterRequest = function(args) {
  this.argument = null;
  this.name = null;
  if (args) {
    if (args.argument !== undefined) {
      this.argument = args.argument;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
  }
};
CounterRequest.prototype = {};
CounterRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.argument = new ttypes.FlowArgument();
        this.argument.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.name = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString();
          this.name.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CounterRequest.prototype.write = function(output) {
  output.writeStructBegin('CounterRequest');
  if (this.argument !== null && this.argument !== undefined) {
    output.writeFieldBegin('argument', Thrift.Type.STRUCT, 1);
    this.argument.write(output);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.name.length);
    for (var iter7 in this.name)
    {
      if (this.name.hasOwnProperty(iter7))
      {
        iter7 = this.name[iter7];
        output.writeString(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Point = module.exports.Point = function(args) {
  this.timestamp = null;
  this.value = null;
  if (args) {
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
  }
};
Point.prototype = {};
Point.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.value = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Point.prototype.write = function(output) {
  output.writeStructBegin('Point');
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 1);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Points = module.exports.Points = function(args) {
  this.points = null;
  this.latest = null;
  if (args) {
    if (args.points !== undefined) {
      this.points = args.points;
    }
    if (args.latest !== undefined) {
      this.latest = args.latest;
    }
  }
};
Points.prototype = {};
Points.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size8 = 0;
        var _rtmp312;
        this.points = {};
        var _ktype9 = 0;
        var _vtype10 = 0;
        _rtmp312 = input.readMapBegin();
        _ktype9 = _rtmp312.ktype;
        _vtype10 = _rtmp312.vtype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var key14 = null;
          var val15 = null;
          key14 = input.readString();
          var _size16 = 0;
          var _rtmp320;
          val15 = [];
          var _etype19 = 0;
          _rtmp320 = input.readListBegin();
          _etype19 = _rtmp320.etype;
          _size16 = _rtmp320.size;
          for (var _i21 = 0; _i21 < _size16; ++_i21)
          {
            var elem22 = null;
            elem22 = new ttypes.Point();
            elem22.read(input);
            val15.push(elem22);
          }
          input.readListEnd();
          this.points[key14] = val15;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size23 = 0;
        var _rtmp327;
        this.latest = {};
        var _ktype24 = 0;
        var _vtype25 = 0;
        _rtmp327 = input.readMapBegin();
        _ktype24 = _rtmp327.ktype;
        _vtype25 = _rtmp327.vtype;
        _size23 = _rtmp327.size;
        for (var _i28 = 0; _i28 < _size23; ++_i28)
        {
          var key29 = null;
          var val30 = null;
          key29 = input.readString();
          val30 = input.readDouble();
          this.latest[key29] = val30;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Points.prototype.write = function(output) {
  output.writeStructBegin('Points');
  if (this.points !== null && this.points !== undefined) {
    output.writeFieldBegin('points', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.points));
    for (var kiter31 in this.points)
    {
      if (this.points.hasOwnProperty(kiter31))
      {
        var viter32 = this.points[kiter31];
        output.writeString(kiter31);
        output.writeListBegin(Thrift.Type.STRUCT, viter32.length);
        for (var iter33 in viter32)
        {
          if (viter32.hasOwnProperty(iter33))
          {
            iter33 = viter32[iter33];
            iter33.write(output);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.latest !== null && this.latest !== undefined) {
    output.writeFieldBegin('latest', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.DOUBLE, Thrift.objectLength(this.latest));
    for (var kiter34 in this.latest)
    {
      if (this.latest.hasOwnProperty(kiter34))
      {
        var viter35 = this.latest[kiter34];
        output.writeString(kiter34);
        output.writeDouble(viter35);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimeseriesRequest = module.exports.TimeseriesRequest = function(args) {
  this.argument = null;
  this.metrics = null;
  this.level = null;
  this.startts = null;
  this.endts = null;
  this.summary = true;
  if (args) {
    if (args.argument !== undefined) {
      this.argument = args.argument;
    }
    if (args.metrics !== undefined) {
      this.metrics = args.metrics;
    }
    if (args.level !== undefined) {
      this.level = args.level;
    }
    if (args.startts !== undefined) {
      this.startts = args.startts;
    }
    if (args.endts !== undefined) {
      this.endts = args.endts;
    }
    if (args.summary !== undefined) {
      this.summary = args.summary;
    }
  }
};
TimeseriesRequest.prototype = {};
TimeseriesRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.argument = new ttypes.FlowArgument();
        this.argument.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size36 = 0;
        var _rtmp340;
        this.metrics = [];
        var _etype39 = 0;
        _rtmp340 = input.readListBegin();
        _etype39 = _rtmp340.etype;
        _size36 = _rtmp340.size;
        for (var _i41 = 0; _i41 < _size36; ++_i41)
        {
          var elem42 = null;
          elem42 = input.readString();
          this.metrics.push(elem42);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.level = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.startts = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.endts = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.summary = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimeseriesRequest.prototype.write = function(output) {
  output.writeStructBegin('TimeseriesRequest');
  if (this.argument !== null && this.argument !== undefined) {
    output.writeFieldBegin('argument', Thrift.Type.STRUCT, 1);
    this.argument.write(output);
    output.writeFieldEnd();
  }
  if (this.metrics !== null && this.metrics !== undefined) {
    output.writeFieldBegin('metrics', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.metrics.length);
    for (var iter43 in this.metrics)
    {
      if (this.metrics.hasOwnProperty(iter43))
      {
        iter43 = this.metrics[iter43];
        output.writeString(iter43);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.level !== null && this.level !== undefined) {
    output.writeFieldBegin('level', Thrift.Type.I32, 3);
    output.writeI32(this.level);
    output.writeFieldEnd();
  }
  if (this.startts !== null && this.startts !== undefined) {
    output.writeFieldBegin('startts', Thrift.Type.I64, 4);
    output.writeI64(this.startts);
    output.writeFieldEnd();
  }
  if (this.endts !== null && this.endts !== undefined) {
    output.writeFieldBegin('endts', Thrift.Type.I64, 5);
    output.writeI64(this.endts);
    output.writeFieldEnd();
  }
  if (this.summary !== null && this.summary !== undefined) {
    output.writeFieldBegin('summary', Thrift.Type.BOOL, 6);
    output.writeBool(this.summary);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TLogResult = module.exports.TLogResult = function(args) {
  this.logLine = null;
  this.offset = null;
  if (args) {
    if (args.logLine !== undefined) {
      this.logLine = args.logLine;
    }
    if (args.offset !== undefined) {
      this.offset = args.offset;
    }
  }
};
TLogResult.prototype = {};
TLogResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.logLine = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.offset = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TLogResult.prototype.write = function(output) {
  output.writeStructBegin('TLogResult');
  if (this.logLine !== null && this.logLine !== undefined) {
    output.writeFieldBegin('logLine', Thrift.Type.STRING, 1);
    output.writeString(this.logLine);
    output.writeFieldEnd();
  }
  if (this.offset !== null && this.offset !== undefined) {
    output.writeFieldBegin('offset', Thrift.Type.I64, 2);
    output.writeI64(this.offset);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

