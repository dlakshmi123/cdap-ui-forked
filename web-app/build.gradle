apply from: "$rootProject.projectDir/gradle/packaging.gradle"

/**
 * Executes a passed in command and waits for it's completion.
 */
def executeCommand(command) {
  def runnableCommand = command.join(' ')
  def proc = runnableCommand.execute();
  proc.waitFor()
  proc.exitValue()
}

/**
 * Task for running jshint over Javascript code base.
 */
task jshint << {
  def command = [
    "$rootProject.projectDir/web-app/tools/jshint/bin/hint",

    "$rootProject.projectDir/web-app/client/core/models/",
    "$rootProject.projectDir/web-app/client/core/embeddables/",
    "$rootProject.projectDir/web-app/client/core/controllers/",
    "$rootProject.projectDir/web-app/client/core/",
    "$rootProject.projectDir/web-app/client/main.js",

    "$rootProject.projectDir/web-app/client/local/views",
    "$rootProject.projectDir/web-app/client/sandbox/views",
    "$rootProject.projectDir/web-app/client/enterprise/views",

    "$rootProject.projectDir/web-app/server/local/main.js",
    "$rootProject.projectDir/web-app/server/sandbox/main.js",
    "$rootProject.projectDir/web-app/server/enterprise/main.js",

    "--config", "$rootProject.projectDir/web-app/jshint.json"
  ]

  print command.join(' ');

/* Exluding command to fix build.
  if(executeCommand(command) != 0) {
    throw new GradleScriptException("JSHint reported errors while building command app", null)
  }
*/

}

/**
 * Runs node js tests.
 */
task nodeTests << {
  def command = [
    "$rootProject.projectDir/web-app/test/node_modules/mocha/bin/mocha"
  ]
  /*
  if(executeCommand(command) != 0) {
    throw new GradleScriptException("Error running node tests", null)
  }
  */
}

/**
 * Builds an edition
 */
def build_edition(edition, base) {
  def installDir = "$buildDir/$edition"
  if(base != null) {
    installDir = "$buildDir/$base"
  }

  println "Directory $installDir"
  mkdir(installDir)
  mkdir("$installDir/client")

  def rcmd = [
    "node",
    "$projectDir/tools/requirejs/bin/r.js",
    "-o", "$projectDir/app.build.js",
    "baseUrl=$projectDir/client/",
    "out=$installDir/client/main.js"
  ]

  print rcmd.join(' ')

  if(executeCommand(rcmd) != 0) {
    throw new GradleScriptException("Failed while running r.js for edition '${edition}'", null)
  }

  copy {
    from 'client/core/lib'
    into "$installDir/client/core/lib"
  }

  copy {
    from 'client/third_party'
    into "$installDir/client/third_party"
  }

  copy {
    from 'client/assets'
    into "$installDir/client/assets"
  }

  copy {
    from "client/${edition}/views"
    into "$installDir/client/${edition}/views"
  }

  copy {
    from "client/${edition}/partials"
    into "$installDir/client/${edition}/partials"
  }

  copy {
    from "client/${edition}"
    include('*.html')
    into "$installDir/client/"
  }

  copy {
    from "client/index.html"
    into "$installDir/client/"
  }

  copy {
    from "server/common"
    into "$installDir/common"
  }

  copy {
    from "server/${edition}"
    into "$installDir/server"
    include('bin/*', 'package.json', 'node_modules/**/*', 'thrift_bindings/**/*', 'continuuity-local.xml', 'main.js')
    if(edition == 'sandbox') {
      include 'env.js'
    }
  }
}

task local(dependsOn: ['jshint', 'nodeTests']) {
  build_edition('local', null)
}

task sandbox(dependsOn: 'jshint') {
  build_edition('sandbox', null)
}

task enterprise(dependsOn: ['jshint', 'nodeTests']) {
  build_edition('enterprise', null)
}

task prepackager(dependsOn: 'build', overwrite: true) {
  def stageDir = file("$buildDir/stage-packaging")
  def installDir = file("$stageDir/opt/continuuity/$project.name")
  def edition = 'enterprise'
  if(project.hasProperty('edition')) {
    edition = project.edition
  }
  if(edition != 'cloud' && edition != 'enterprise') {
    throw new GradleException('Invalid edition supplied')
  }
  println "Packaging ${edition} ..."
  doLast {
    build_edition(edition, 'stage-packaging/opt/continuuity/web-app')
    copy {
      from "$rootProject.projectDir/common/bin"
      into "${installDir}/bin"
    }
    copy {
      from 'conf'
      into "${installDir}/conf"
    }
  }
}

packaging {
  extraOptions['--config-files'] = "/opt/continuuity/web-app/server/continuuity-local.xml"
}

rpm.doFirst {
  packaging.extraOptions['--config-files'] = "/opt/continuuity/web-app/server/continuuity-local.xml"
}

debianPrepackager.dependsOn prepackager
rpmPrepackager.dependsOn prepackager

task build(dependsOn: [ 'local', 'sandbox', 'enterprise' ]) { }
