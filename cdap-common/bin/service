#!/usr/bin/env bash

# Copyright Â© 2014-2015 Cask Data, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

# Source function library. used for "status" use case
if [ -f /etc/rc.d/init.d/functions ]; then
  PLATFORM="RHEL"
  source /etc/rc.d/init.d/functions
elif [ -f /lib/lsb/init-functions ] ; then
  PLATFORM="UBUNTU"
  source /lib/lsb/init-functions
else
  echo "Platform is unsupported."
  exit 1
fi

SVCNAME=${0##*/}

if [[ "${SVCNAME}" == "service" ]]; then
  echo "Create a soft link to this script as svc-<component>"
  echo "Example: ln -s service svc-<component>"
  exit 1
fi

# APP is shortened SVCNAME
APP=${SVCNAME##svc-}
export APP

# Determine symlink target (full path)
TARGET=$(readlink ${0}) # TODO: readlink isn't always available
if [[ $? -ne 0 ]]; then
  echo "Create a soft link to this script as svc-<component>"
  echo "Example: ln -s service svc-<component>"
  exit 1
fi

# Determine package name by applying regex to the target of the symlink being run
COMPONENT_HOME=${TARGET%/*/*}
COMPONENT_BIN="${COMPONENT_HOME}"/bin
PKGNAME=${COMPONENT_HOME##*/}
if [[ -z "${PKGNAME}" ]]; then
  echo "Create a soft link to this script as svc-<component>"
  echo "Example: ln -s service svc-<component>"
  exit 1
fi

# Set CDAP_HOME from COMPONENT_HOME if not set
CDAP_HOME="${CDAP_HOME:-${COMPONENT_HOME%/*}}"

# Default CDAP_CONF to /etc/cdap/conf (package default)
CDAP_CONF=${CDAP_CONF:-/etc/cdap/conf}

export CDAP_HOME CDAP_CONF COMPONENT_HOME

# Load variables/functions from COMPONENT_HOME
for i in bin/common-env.sh bin/common.sh conf/${APP}-env.sh; do
  test -f "${COMPONENT_HOME}"/${i} && source ${COMPONENT_HOME}/${i}
done

# Load user-modifiable configuration
test -f "${CDAP_CONF}"/cdap-env.sh && source "${CDAP_CONF}"/cdap-env.sh

logecho() {
  echo ${*} | tee -a ${loglog}
}

# Start a non-Java application with arguments in the background
_start_bin() {
  check_before_start || exit 1 # Error output is done in function
  create_pid_dir || die "Could not create PID dir: ${PID_DIR}"
  logecho "$(date) Starting ${APP} service on ${HOSTNAME}"
  ulimit -a >>${loglog} 2>&1
  nohup nice -n ${NICENESS} ${MAIN_CMD} ${MAIN_CMD_ARGS} </dev/null >>${loglog} 2>&1 &
  echo $! >${pid}
  kill -0 $(<${pid}) 2>/dev/null
  return $?
}

# Start a Java application from class name with arguments in the background
_start_java() {
  # Check and set classpath if in development environment. 
  check_and_set_classpath_for_dev_environment "${CDAP_HOME}"
  # Setup classpaths.
  set_classpath "${COMPONENT_HOME}" "${CDAP_CONF}"
  set_hive_classpath || exit 1
  # Setup Java
  set_java || exit 1
  # Add proper HBase compatibility to CLASSPATH
  set_hbase || exit 1
  # Master requires this local directory
  if [ "${PKGNAME}" == "master" ]; then
    check_or_create_master_local_dir || die "Could not create Master local directory"
  fi
  check_before_start || exit 1
  create_pid_dir || die "Could not create PID dir: ${PID_DIR}"
  logecho "$(date) Starting Java ${APP} service on ${HOSTNAME}"
  "${JAVA}" -version 2>>${loglog}
  ulimit -a >>${loglog}
  echo "CLASSPATH=${CLASSPATH}" >>${loglog}
  # Start our JVM
  local __defines="-Dcdap.service=${APP} ${JAVA_HEAPMAX} -Duser.dir=${LOCAL_DIR}"
  __defines+=" -Dexplore.conf.files=${EXPLORE_CONF_FILES} -Dexplore.classpath=${EXPLORE_CLASSPATH}"
  __defines+=" ${OPTS}"
  nohup nice -n ${NICENESS} "${JAVA}" ${__defines} -cp ${CLASSPATH} ${MAIN_CLASS} ${MAIN_CLASS_ARGS} ${@} </dev/null >>${loglog} 2>&1 &
  echo $! >${pid}
  # Now, wait for JVM spinup
  sleep 2
  kill -0 $(<${pid}) >/dev/null 2>&1
  return $?
}

start() {
  if [ ${MAIN_CMD} ]; then
    _start_bin || die "Failed to start ${APP} service"
  elif [ ${MAIN_CLASS} ]; then
    _start_java || die "Failed to start Java ${APP} service"
  else
    die "Neither MAIN_CLASS or MAIN_CMD are set.  Please set one in ${CDAP_CONF}/cdap-env.sh"
  fi
}

stop() {
  if [ -f ${pid} ]; then
    pidToKill=$(<${pid})
    # kill -0 == see if the PID exists
    if kill -0 ${pidToKill} > /dev/null 2>&1; then
      echo -n "Stopping ${APP}"
      echo "$(date) Stopping ${APP}" >>${loglog}
      kill ${pidToKill} > /dev/null 2>&1
      # TODO: infinite loops are bad, mm'kay?
      while kill -0 ${pidToKill} > /dev/null 2>&1; do
        echo -n "."
        sleep 1
      done
    else
      retval=$?
      echo "Nothing to stop because kill -0 of pid ${pidToKill} failed with status ${retval}"
    fi
    rm -f $pid
  else
    echo "Nothing to stop because no pid file ${pid}"
  fi
}

restart() {
  stop
  start
}

_status() {
  case ${PLATFORM} in
    RHEL)
      rh_status > /dev/null 2>&1
      retval=$?
    ;;
    UBUNTU)
      ub_status > /dev/null 2>&1
      retval=$?
    ;;
  esac
  return ${retval}
}

rh_status() {
  echo "Checking status"
  # call sourced status function
  status -p ${pid}
}

ub_status() {
  echo "Checking status"
  # call sourced status function
  status_of_proc -p ${pid} ${0} ${APP}
}

# Executes a specific class' main method with the classpath and environment setup
run() {
  MAIN_CLASS=${1}
  shift
  if [ -z "${MAIN_CLASS}" ]; then
    echo "Error: No classname given!"
    die "Usage: ${0} run <fully qualified classname> [arguments]"
  fi

  # TODO: why can't we use _start_java and pass arguments?

  # Check and set classpath if in development environment. 
  check_and_set_classpath_for_dev_environment "${CDAP_HOME}"
  # Setup classpaths.
  set_classpath "${COMPONENT_HOME}" "${CDAP_CONF}"
  set_hive_classpath || exit 1
  # Setup Java
  set_java || exit 1
  # Add proper HBase compatibility to CLASSPATH
  set_hbase || exit 1
  # Master requires this local directory
  if [ "${PKGNAME}" == "master" ]; then
    check_or_create_master_local_dir || die "Could not create Master local directory"
  fi

  if [ ${#@} -ne 0 ]; then
    echo "Running class ${MAIN_CLASS} with arguments: ${@}"
  else
    echo "Running class ${MAIN_CLASS}"
  fi
  "${JAVA}" "${JAVA_HEAPMAX}" -Dhive.classpath=${HIVE_CLASSPATH} -Duser.dir=${LOCAL_DIR} ${OPTS} -cp ${CLASSPATH} ${MAIN_CLASS} ${@}
}

case ${1} in
  start|stop|restart) ${1} ;;
  status) _status && echo "CDAP ${APP} ($(<${pid})) is running" ;;
  condrestart) _status && restart ;;  
  run) shift; run ${@} ;;
  classpath)
    set_classpath "${COMPONENT_HOME}" "${CDAP_CONF}"
    set_java || exit 1
    set_hbase || exit 1
    echo "${CLASSPATH}"
  ;;

  *) die "Usage: $0 {start|stop|restart|status|condrestart|run}" ;;
esac
exit $? 
