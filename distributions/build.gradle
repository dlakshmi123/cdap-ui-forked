evaluationDependsOn(':singlenode')
evaluationDependsOn(':unit-test')
evaluationDependsOn(':passport')

apply plugin:'maven'
apply from: "$rootProject.projectDir/gradle/packaging.gradle"
apply from: "$rootProject.projectDir/gradle/run-maven.gradle"
apply from: "$rootProject.projectDir/gradle/run-sphinx.gradle"

task javadoc(type: Javadoc, overwrite: true) {
  source = project.parent.subprojects.collect { proj ->
   if(proj.plugins.findPlugin("java") && proj.sourceSets.findByName("api") != null){
     return proj.sourceSets.api.allJava.exclude{ print it.file.name }
   }else{
    return []
   }
  }

  exclude '**/internal/**'
  exclude '**/passport/**'

  doFirst{
    classpath = files(project.parent.subprojects.collect { project ->
    if(project.plugins.findPlugin("java")){
      return  project.sourceSets.main.compileClasspath
    }else{
      return []
    }
   })
  }
  group = 'Documentation'
  description = 'Aggregates API javadocs across all projects.'
  options.windowTitle = "Continuuity Reactor Javadoc ${rootProject.version}"
  options.bottom = "Copyright 2012-2014 Continuuity,Inc."
  options.links('http://docs.oracle.com/javase/6/docs/api/', 'http://docs.oracle.com/javaee/6/api/',
          'http://hadoop.apache.org/docs/current/api/')
  options.stylesheetFile = new File("$rootProject.projectDir/distributions/src/javadoc/stylesheet.css")
  options.extDirs(new File("$rootProject.projectDir/distributions/src/javadoc/resources"))

  destinationDir = new File(buildDir, 'javadoc')
  // Might need a classpath
}

task combinedApiJar(type: Jar) {
    baseName "continuuity-api"
    appendix ""
    classifier ""
    from project(':app-fabric').sourceSets.api.output
    from project(':data-fabric').sourceSets.api.output
    from project(':common').sourceSets.api.output
}

task combinedApiSourceJar(type: Jar) {
    baseName "continuuity-api"
    appendix ""
    classifier "source"
    from (project(':app-fabric').sourceSets.api.allSource) {
      exclude "**/internal/"
      exclude "**/passport/"
    }
    from project(':data-fabric').sourceSets.api.allSource
    from (project(':common').sourceSets.api.allSource) {
      exclude "**/internal/"
      exclude "**/passport/"
    }
}

task combinedApiJavadocJar(type: Jar, dependsOn: javadoc) {
    baseName "continuuity-api"
    appendix ""
    classifier "javadoc"
    from (javadoc.destinationDir) {
      exclude "**/internal/"
      exclude "**/passport/"
    }
}

configurations{
  distributions
  apiArchives
}

import org.apache.tools.ant.filters.ReplaceTokens
import org.gradle.api.tasks.bundling.Compression


task reactor_sdk_dist (type: Zip, dependsOn: [':web-app:build', ':examples:build']) {
  group = 'Continuuity'

  baseName = "continuuity"
  appendix = "sdk"
  def sdkName = "${baseName}-${appendix}-${version}"
  into sdkName
  description = 'Generates the singlenode distribution zip file'

  from combinedApiJar.outputs
  from combinedApiSourceJar.outputs
  from combinedApiJavadocJar.outputs
  from project(':singlenode').files('src/dist')

  //bin
  into ("bin"){
    // :singlenode/bin contains the startscript, not using startScripts task
    // include project bin directories
    from project.parent.subprojects.findAll { ! ['performance','commandLine'].contains(it.name) }
                                           .collect { project -> project.file('bin') }

    exclude 'node'
    exclude 'far-server'
    exclude 'run-java'
    exclude 'flow-config.sh'
    exclude 'service'
    exclude 'dfbench'
    exclude 'reactor-client'
    exclude 'flume-client'
    exclude 'NonceCleanup.sh'
    exclude 'common*'
    exclude 'DailyAccountReport.sh'
    exclude 'DeleteVpcFromPassport.sh'
    exclude 'VpcInfo.sh'
    exclude 'mensa-client'
    exclude 'mensa-build-validator'
    def cp = project(':singlenode').tasks.getByName('startScripts').classpath.collect { "\$APP_HOME/lib/${it.name}" }.join(':')
    cp += ":\$APP_HOME/conf/"
    filter(ReplaceTokens, tokens: [classpath: cp])
  }


  //create/include empty data directory
  doFirst{
    new File("${buildDir}/tmp/singlenode/data").mkdirs()
  }

  from("${buildDir}/tmp/singlenode/")

  //conf
  from(project(':singlenode').tasks.getByName('stageConfSingleNode').outputs){
    into "conf"
  }

  //native
  from(project(':singlenode').tasks.getByName('stageDllSingleNode').outputs){
      into "lib/native"
  }

  //exe
  from(project(':singlenode').tasks.getByName('stageExeSingleNode').outputs){
      into "libexec/bin"
  }

  //distribution
  into("lib"){
    from project(':singlenode').configurations.getByName('runtime')
    from project(':singlenode').tasks.getByName('jar').outputs
    from project(':unit-test').tasks.getByName('jar').outputs
    exclude 'cglib-*v2*.jar'
  }

  //docs
  into("javadocs"){
    from project(':distributions').tasks.getByName('javadoc').outputs
  }

  //examples
  into("examples"){
    from project(':examples').projectDir
    exclude "README.md"
    exclude "build/"
    exclude ".gitignore"
    exclude "**/*.gradle"
    exclude "**/classes/"
    exclude "PayvmentDemo/"
    exclude "DependencyRandomNumber/"
    exclude "TwitterScanner/"
    exclude "LishApps/"
    exclude "AggregateMetrics/"
    exclude "lib/"
    exclude "build-checkstyle.xml"
    exclude "checkstyle_report.xml"
    exclude "**/*.iml"
    exclude "**/dependency-reduced-pom.xml"
    exclude "**/.idea/"

    // include only the jar file from target directory for packaging into sdk
    exclude { it.file.absolutePath.contains('/target/') &&
                (!it.file.name.endsWith(".jar") || it.file.name.startsWith("original-")) }

    includeEmptyDirs = false
  }

  //webapp
  into ("web-app/local/client"){
    from project(':web-app').file('build/local/client')
  }

  into("web-app/local/server"){
    from project(':web-app').file('build/local/server')
  }

  into("web-app/local/common"){
    from project(':web-app').file('build/local/common')
  }

  // VERSION
  from("VERSION"){
    def versiontxt
    if( project.hasProperty('teamcityBuildNumber')) {
      versiontxt = version + "-" + teamcityBuildNumber
    } else {
      versiontxt = version
    }
    filter(ReplaceTokens, tokens: [cversion: versiontxt ])
  }

  //classifier = "beta"
  if( project.hasProperty('teamcityBuildNumber')) {
    classifier = teamcityBuildNumber
  } else {
    classifier = ""
  }
  ext.distName = "${baseName}-${appendix}"

  // Verify SDK
  doLast {
    copy {
      from zipTree(outputs.files.singleFile)
      into temporaryDir
    }

    def apiJar = new File(temporaryDir, sdkName + "/" + combinedApiJar.outputs.files.singleFile.name)
    def pomPath = new File(temporaryDir, sdkName + "/examples/pom.xml")
    def mvnOpts = "-Dcontinuuity-api-jar-path=" + apiJar + " -P build" + "  -f " + pomPath
    runMaven("clean package", mvnOpts)
  }
}

task sandbox_dist (type: Zip) {
  dependsOn ':web-app:build' //webapp-server stuff TODO revisit this
  group = 'Continuuity'

  baseName = "continuuity"
  appendix = "developer-sandbox"
  into "${baseName}-${appendix}-${version}"
  description = 'Generates the dev kit distribution zip file for cloud'

  //copySpec:
  //root
  from combinedApiJar.outputs
  from combinedApiSourceJar.outputs
  from combinedApiJavadocJar.outputs
  from project(':singlenode').files('src/dist')

  //bin
  into ("bin"){
    // :singlenode/bin contains the startscript, not using startScripts task
    // include project bin directories
    from project.parent.subprojects.findAll { ! ['performance','commandLine'].contains(it.name) }
                                           .collect { project -> project.file('bin') }

    exclude 'node'
    exclude 'far-server'
    exclude 'run-java'
    exclude 'flow-config.sh'
    exclude 'service'
    exclude 'dfbench'
    exclude 'flume-client'
    exclude 'NonceCleanup.sh'
    exclude 'common*'
    def cp = project(':singlenode').tasks.getByName('startScripts').classpath.collect { "\$APP_HOME/lib/${it.name}" }.join(':')
    cp += ":\$APP_HOME/conf/"
    filter(ReplaceTokens, tokens: [classpath: cp])
  }

  //conf
  from(project(':singlenode').tasks.getByName('stageConfSingleNode').outputs){
    into "conf"
  }

  //distribution
  into("lib"){
    from project(':singlenode').configurations.getByName('runtime')
    from project(':singlenode').tasks.getByName('jar').outputs
    from project(':unit-test').tasks.getByName('jar').outputs
    exclude 'cglib-*v2*.jar'
  }

  //webapp
  into ("web-app/cloud/client"){
    from project(':web-app').file('build/sandbox/client')
  }

  into("web-app/cloud/server"){
    from project(':web-app').file('build/sandbox/server')
    exclude "continuuity-local.xml"
    exclude "certs/"
  }

  into("web-app/cloud/common"){
    from project(':web-app').file('build/sandbox/common')
  }
  
  // Disable nux in sandbox
  from (".nux_dashboard") 

  // VERSION
  from("VERSION"){
    def versiontxt
    if( project.hasProperty('teamcityBuildNumber')) {
      versiontxt = version + "-" + teamcityBuildNumber
    } else {
      versiontxt = version
    }
    filter(ReplaceTokens, tokens: [cversion: versiontxt ])
  }

  //classifier = "beta"
  if( project.hasProperty('teamcityBuildNumber')) {
    classifier = teamcityBuildNumber
  } else {
    classifier = ""
  }
  ext.distName = "${baseName}-${appendix}"
}


artifacts{
  // Asigning the artifact to the configuration
  distributions reactor_sdk_dist
  distributions sandbox_dist
}

uploadDistributions {
  repositories {
    repositories.mavenDeployer {
      repository(url: "https://repository.continuuity.com/service/local/staging/deploy/maven2") {
        authentication(userName: nexusUsername, password: nexusPassword)
      }
      snapshotRepository(url: "https://repository.continuuity.com/content/repositories/snapshots") {
        authentication(userName: nexusUsername, password: nexusPassword)
      }
      addFilter('sdk') {artifact, file ->
        file.name == reactor_sdk_dist.archiveName
      }
      addFilter('sandbox') {artifact, file ->
        file.name == sandbox_dist.archiveName
      }
      pom('sdk').artifactId = reactor_sdk_dist.distName
      pom('sandbox').artifactId = sandbox_dist.distName
    }
  }
}

artifacts {
  apiArchives combinedApiJar
  apiArchives combinedApiSourceJar
  apiArchives combinedApiJavadocJar
}

uploadApiArchives {
  repositories {
    repositories.mavenDeployer {
      repository(url: "https://repository.continuuity.com/service/local/staging/deploy/maven2") {
        authentication(userName: nexusUsername, password: nexusPassword)
      }
      snapshotRepository(url: "https://repository.continuuity.com/content/repositories/snapshots") {
        authentication(userName: nexusUsername, password: nexusPassword)
      }
      pom.whenConfigured { pom ->
        // Removes groovy dependency and test dependencies from generated pom file
        pom.dependencies = pom.dependencies.findAll { dep ->
          dep.artifactId != 'groovy-all' && dep.scope != 'test'
        }
      }
    }
  }
}

// Couldn't find a good way to create the zip files for the three examples
// without having to create three tasks
task examples_response_analytics (type: Zip) {
   group='Continuuity'
   baseName = "continuuity"
   appendix="ResponseCodeAnalytics"
   def name = "${baseName}-${appendix}-${version}"
   into name
   description='Log analytics application'
   into("examples") {
     from "${buildDir}/../../examples/${appendix}"
   } 
}
 
// Couldn't find a good way to create the zip files for the three examples
// without having to create three tasks
task examples_traffic_analytics (type: Zip) {
   group='Continuuity'
   baseName = "continuuity"
   appendix="TrafficAnalytics"
   def name = "${baseName}-${appendix}-${version}"
   into name
   description='Log analytics application'
   into("examples") {
     from "${buildDir}/../../examples/${appendix}"
   }
}

// Couldn't find a good way to create the zip files for the three examples
// without having to create three tasks
task examples_page_analytics (type: Zip) {
   group='Continuuity'
   baseName = "continuuity"
   appendix="PageViewAnalytics"
   def name = "${baseName}-${appendix}-${version}"
   into name
   description='Log analytics application'
   into("examples") {
     from "${buildDir}/../../examples/${appendix}"
   }
}

task docs_dist_pdf (type: Zip) {
   doFirst {
     runSphinxPDF("${buildDir}/../../docs/developer-guide")
   }
   group = 'Continuuity'
   baseName = "continuuity"
   appendix = "pdf-docs"
   def name = "${baseName}-${appendix}-${version}"
   into name
   description = 'Distribution to package PDF documents'
   into("pdf") {
    from "${buildDir}/../../docs/developer-guide/build-pdf"
   } 
}

task docs_dist (type: Zip, dependsOn: ['examples_response_analytics', 'examples_traffic_analytics', 'examples_page_analytics']) {
   doFirst {
     runSphinx("${buildDir}/../../docs/developer-guide")
   }
   group = 'Continuuity'
   baseName = "continuuity"
   appendix = "docs"
   def name = "${baseName}-${appendix}-${version}"
   into name
   description = 'Distribution to package documents'
   into("javadocs"){
     from project(':distributions').tasks.getByName('javadoc').outputs
   }
   into("html") {
    from "${buildDir}/../../docs/developer-guide/build"
   } 
 }

// common continuuity package
task prepackager(overwrite: true) {
  def stageDir = file("$buildDir/stage-packaging")
  def installDir = file("$stageDir/opt/continuuity")
  doLast {
    copy {
      from "$rootProject.projectDir/distributions/src/etc"
      into "${stageDir}/etc"
    }
  }
}

// Override some of our base packaging.gradle parameters for common package
packaging {
  dependencies = []
  extraOptions['--name'] = "continuuity"
  extraOptions['--directories'] = "/opt/continuuity"
  extraOptions['--after-install'] = "$rootProject.projectDir/distributions/src/debian/scripts/common-postinst"
  packaging.extraOptions['--before-install'] = "$rootProject.projectDir/distributions/src/rpm/scripts/common-preinst"
  packaging.extraOptions['--before-remove'] = "$rootProject.projectDir/distributions/src/rpm/scripts/common-prerm"
  extraOptions['--template-value'] = "project=continuuity"
}
rpm {
  dependencies = []
}

rpm.doFirst {
  packaging.extraOptions['--name'] = "continuuity"
  packaging.extraOptions['--directories'] = "/opt/continuuity"
  packaging.extraOptions['--after-install'] = "$rootProject.projectDir/distributions/src/rpm/scripts/common-postinst"
  packaging.extraOptions['--before-install'] = "$rootProject.projectDir/distributions/src/rpm/scripts/common-preinst"
  packaging.extraOptions['--before-remove'] = "$rootProject.projectDir/distributions/src/rpm/scripts/common-prerm"
  packaging.extraOptions['--template-value'] = "project=continuuity"
}


debianPrepackager.dependsOn prepackager
rpmPrepackager.dependsOn prepackager


