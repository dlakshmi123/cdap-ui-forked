/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.continuuity.app.services;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;

/**
 * Provides the state of flows.
 */
public class ActiveFlow implements org.apache.thrift.TBase<ActiveFlow, ActiveFlow._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ActiveFlow");

  private static final org.apache.thrift.protocol.TField APPLICATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField FLOW_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("flowId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField LAST_STOPPED_FIELD_DESC = new org.apache.thrift.protocol.TField("lastStopped", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField LAST_STARTED_FIELD_DESC = new org.apache.thrift.protocol.TField("lastStarted", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField CURRENT_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("currentState", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField RUNS_FIELD_DESC = new org.apache.thrift.protocol.TField("runs", org.apache.thrift.protocol.TType.I32, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ActiveFlowStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ActiveFlowTupleSchemeFactory());
  }

  private String applicationId; // required
  private String flowId; // required
  private EntityType type; // required
  private long lastStopped; // required
  private long lastStarted; // required
  private String currentState; // required
  private int runs; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    APPLICATION_ID((short)1, "applicationId"),
    FLOW_ID((short)2, "flowId"),
    /**
     * 
     * @see EntityType
     */
    TYPE((short)3, "type"),
    LAST_STOPPED((short)4, "lastStopped"),
    LAST_STARTED((short)5, "lastStarted"),
    CURRENT_STATE((short)6, "currentState"),
    RUNS((short)7, "runs");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // APPLICATION_ID
          return APPLICATION_ID;
        case 2: // FLOW_ID
          return FLOW_ID;
        case 3: // TYPE
          return TYPE;
        case 4: // LAST_STOPPED
          return LAST_STOPPED;
        case 5: // LAST_STARTED
          return LAST_STARTED;
        case 6: // CURRENT_STATE
          return CURRENT_STATE;
        case 7: // RUNS
          return RUNS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LASTSTOPPED_ISSET_ID = 0;
  private static final int __LASTSTARTED_ISSET_ID = 1;
  private static final int __RUNS_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.APPLICATION_ID, new org.apache.thrift.meta_data.FieldMetaData("applicationId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FLOW_ID, new org.apache.thrift.meta_data.FieldMetaData("flowId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EntityType.class)));
    tmpMap.put(_Fields.LAST_STOPPED, new org.apache.thrift.meta_data.FieldMetaData("lastStopped", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_STARTED, new org.apache.thrift.meta_data.FieldMetaData("lastStarted", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CURRENT_STATE, new org.apache.thrift.meta_data.FieldMetaData("currentState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RUNS, new org.apache.thrift.meta_data.FieldMetaData("runs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ActiveFlow.class, metaDataMap);
  }

  public ActiveFlow() {
  }

  public ActiveFlow(
    String applicationId,
    String flowId,
    EntityType type,
    long lastStopped,
    long lastStarted,
    String currentState,
    int runs)
  {
    this();
    this.applicationId = applicationId;
    this.flowId = flowId;
    this.type = type;
    this.lastStopped = lastStopped;
    setLastStoppedIsSet(true);
    this.lastStarted = lastStarted;
    setLastStartedIsSet(true);
    this.currentState = currentState;
    this.runs = runs;
    setRunsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ActiveFlow(ActiveFlow other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetApplicationId()) {
      this.applicationId = other.applicationId;
    }
    if (other.isSetFlowId()) {
      this.flowId = other.flowId;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    this.lastStopped = other.lastStopped;
    this.lastStarted = other.lastStarted;
    if (other.isSetCurrentState()) {
      this.currentState = other.currentState;
    }
    this.runs = other.runs;
  }

  public ActiveFlow deepCopy() {
    return new ActiveFlow(this);
  }

  @Override
  public void clear() {
    this.applicationId = null;
    this.flowId = null;
    this.type = null;
    setLastStoppedIsSet(false);
    this.lastStopped = 0;
    setLastStartedIsSet(false);
    this.lastStarted = 0;
    this.currentState = null;
    setRunsIsSet(false);
    this.runs = 0;
  }

  public String getApplicationId() {
    return this.applicationId;
  }

  public void setApplicationId(String applicationId) {
    this.applicationId = applicationId;
  }

  public void unsetApplicationId() {
    this.applicationId = null;
  }

  /** Returns true if field applicationId is set (has been assigned a value) and false otherwise */
  public boolean isSetApplicationId() {
    return this.applicationId != null;
  }

  public void setApplicationIdIsSet(boolean value) {
    if (!value) {
      this.applicationId = null;
    }
  }

  public String getFlowId() {
    return this.flowId;
  }

  public void setFlowId(String flowId) {
    this.flowId = flowId;
  }

  public void unsetFlowId() {
    this.flowId = null;
  }

  /** Returns true if field flowId is set (has been assigned a value) and false otherwise */
  public boolean isSetFlowId() {
    return this.flowId != null;
  }

  public void setFlowIdIsSet(boolean value) {
    if (!value) {
      this.flowId = null;
    }
  }

  /**
   * 
   * @see EntityType
   */
  public EntityType getType() {
    return this.type;
  }

  /**
   * 
   * @see EntityType
   */
  public void setType(EntityType type) {
    this.type = type;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public long getLastStopped() {
    return this.lastStopped;
  }

  public void setLastStopped(long lastStopped) {
    this.lastStopped = lastStopped;
    setLastStoppedIsSet(true);
  }

  public void unsetLastStopped() {
    __isset_bit_vector.clear(__LASTSTOPPED_ISSET_ID);
  }

  /** Returns true if field lastStopped is set (has been assigned a value) and false otherwise */
  public boolean isSetLastStopped() {
    return __isset_bit_vector.get(__LASTSTOPPED_ISSET_ID);
  }

  public void setLastStoppedIsSet(boolean value) {
    __isset_bit_vector.set(__LASTSTOPPED_ISSET_ID, value);
  }

  public long getLastStarted() {
    return this.lastStarted;
  }

  public void setLastStarted(long lastStarted) {
    this.lastStarted = lastStarted;
    setLastStartedIsSet(true);
  }

  public void unsetLastStarted() {
    __isset_bit_vector.clear(__LASTSTARTED_ISSET_ID);
  }

  /** Returns true if field lastStarted is set (has been assigned a value) and false otherwise */
  public boolean isSetLastStarted() {
    return __isset_bit_vector.get(__LASTSTARTED_ISSET_ID);
  }

  public void setLastStartedIsSet(boolean value) {
    __isset_bit_vector.set(__LASTSTARTED_ISSET_ID, value);
  }

  public String getCurrentState() {
    return this.currentState;
  }

  public void setCurrentState(String currentState) {
    this.currentState = currentState;
  }

  public void unsetCurrentState() {
    this.currentState = null;
  }

  /** Returns true if field currentState is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrentState() {
    return this.currentState != null;
  }

  public void setCurrentStateIsSet(boolean value) {
    if (!value) {
      this.currentState = null;
    }
  }

  public int getRuns() {
    return this.runs;
  }

  public void setRuns(int runs) {
    this.runs = runs;
    setRunsIsSet(true);
  }

  public void unsetRuns() {
    __isset_bit_vector.clear(__RUNS_ISSET_ID);
  }

  /** Returns true if field runs is set (has been assigned a value) and false otherwise */
  public boolean isSetRuns() {
    return __isset_bit_vector.get(__RUNS_ISSET_ID);
  }

  public void setRunsIsSet(boolean value) {
    __isset_bit_vector.set(__RUNS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case APPLICATION_ID:
      if (value == null) {
        unsetApplicationId();
      } else {
        setApplicationId((String)value);
      }
      break;

    case FLOW_ID:
      if (value == null) {
        unsetFlowId();
      } else {
        setFlowId((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((EntityType)value);
      }
      break;

    case LAST_STOPPED:
      if (value == null) {
        unsetLastStopped();
      } else {
        setLastStopped((Long)value);
      }
      break;

    case LAST_STARTED:
      if (value == null) {
        unsetLastStarted();
      } else {
        setLastStarted((Long)value);
      }
      break;

    case CURRENT_STATE:
      if (value == null) {
        unsetCurrentState();
      } else {
        setCurrentState((String)value);
      }
      break;

    case RUNS:
      if (value == null) {
        unsetRuns();
      } else {
        setRuns((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case APPLICATION_ID:
      return getApplicationId();

    case FLOW_ID:
      return getFlowId();

    case TYPE:
      return getType();

    case LAST_STOPPED:
      return Long.valueOf(getLastStopped());

    case LAST_STARTED:
      return Long.valueOf(getLastStarted());

    case CURRENT_STATE:
      return getCurrentState();

    case RUNS:
      return Integer.valueOf(getRuns());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case APPLICATION_ID:
      return isSetApplicationId();
    case FLOW_ID:
      return isSetFlowId();
    case TYPE:
      return isSetType();
    case LAST_STOPPED:
      return isSetLastStopped();
    case LAST_STARTED:
      return isSetLastStarted();
    case CURRENT_STATE:
      return isSetCurrentState();
    case RUNS:
      return isSetRuns();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ActiveFlow)
      return this.equals((ActiveFlow)that);
    return false;
  }

  public boolean equals(ActiveFlow that) {
    if (that == null)
      return false;

    boolean this_present_applicationId = true && this.isSetApplicationId();
    boolean that_present_applicationId = true && that.isSetApplicationId();
    if (this_present_applicationId || that_present_applicationId) {
      if (!(this_present_applicationId && that_present_applicationId))
        return false;
      if (!this.applicationId.equals(that.applicationId))
        return false;
    }

    boolean this_present_flowId = true && this.isSetFlowId();
    boolean that_present_flowId = true && that.isSetFlowId();
    if (this_present_flowId || that_present_flowId) {
      if (!(this_present_flowId && that_present_flowId))
        return false;
      if (!this.flowId.equals(that.flowId))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_lastStopped = true;
    boolean that_present_lastStopped = true;
    if (this_present_lastStopped || that_present_lastStopped) {
      if (!(this_present_lastStopped && that_present_lastStopped))
        return false;
      if (this.lastStopped != that.lastStopped)
        return false;
    }

    boolean this_present_lastStarted = true;
    boolean that_present_lastStarted = true;
    if (this_present_lastStarted || that_present_lastStarted) {
      if (!(this_present_lastStarted && that_present_lastStarted))
        return false;
      if (this.lastStarted != that.lastStarted)
        return false;
    }

    boolean this_present_currentState = true && this.isSetCurrentState();
    boolean that_present_currentState = true && that.isSetCurrentState();
    if (this_present_currentState || that_present_currentState) {
      if (!(this_present_currentState && that_present_currentState))
        return false;
      if (!this.currentState.equals(that.currentState))
        return false;
    }

    boolean this_present_runs = true;
    boolean that_present_runs = true;
    if (this_present_runs || that_present_runs) {
      if (!(this_present_runs && that_present_runs))
        return false;
      if (this.runs != that.runs)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_applicationId = true && (isSetApplicationId());
    builder.append(present_applicationId);
    if (present_applicationId)
      builder.append(applicationId);

    boolean present_flowId = true && (isSetFlowId());
    builder.append(present_flowId);
    if (present_flowId)
      builder.append(flowId);

    boolean present_type = true && (isSetType());
    builder.append(present_type);
    if (present_type)
      builder.append(type.getValue());

    boolean present_lastStopped = true;
    builder.append(present_lastStopped);
    if (present_lastStopped)
      builder.append(lastStopped);

    boolean present_lastStarted = true;
    builder.append(present_lastStarted);
    if (present_lastStarted)
      builder.append(lastStarted);

    boolean present_currentState = true && (isSetCurrentState());
    builder.append(present_currentState);
    if (present_currentState)
      builder.append(currentState);

    boolean present_runs = true;
    builder.append(present_runs);
    if (present_runs)
      builder.append(runs);

    return builder.toHashCode();
  }

  public int compareTo(ActiveFlow other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ActiveFlow typedOther = (ActiveFlow)other;

    lastComparison = Boolean.valueOf(isSetApplicationId()).compareTo(typedOther.isSetApplicationId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplicationId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationId, typedOther.applicationId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlowId()).compareTo(typedOther.isSetFlowId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlowId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flowId, typedOther.flowId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, typedOther.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastStopped()).compareTo(typedOther.isSetLastStopped());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastStopped()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastStopped, typedOther.lastStopped);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastStarted()).compareTo(typedOther.isSetLastStarted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastStarted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastStarted, typedOther.lastStarted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrentState()).compareTo(typedOther.isSetCurrentState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrentState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentState, typedOther.currentState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRuns()).compareTo(typedOther.isSetRuns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRuns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runs, typedOther.runs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ActiveFlow(");
    boolean first = true;

    sb.append("applicationId:");
    if (this.applicationId == null) {
      sb.append("null");
    } else {
      sb.append(this.applicationId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("flowId:");
    if (this.flowId == null) {
      sb.append("null");
    } else {
      sb.append(this.flowId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastStopped:");
    sb.append(this.lastStopped);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastStarted:");
    sb.append(this.lastStarted);
    first = false;
    if (!first) sb.append(", ");
    sb.append("currentState:");
    if (this.currentState == null) {
      sb.append("null");
    } else {
      sb.append(this.currentState);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("runs:");
    sb.append(this.runs);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ActiveFlowStandardSchemeFactory implements SchemeFactory {
    public ActiveFlowStandardScheme getScheme() {
      return new ActiveFlowStandardScheme();
    }
  }

  private static class ActiveFlowStandardScheme extends StandardScheme<ActiveFlow> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ActiveFlow struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // APPLICATION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.applicationId = iprot.readString();
              struct.setApplicationIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FLOW_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.flowId = iprot.readString();
              struct.setFlowIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = EntityType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LAST_STOPPED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastStopped = iprot.readI64();
              struct.setLastStoppedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LAST_STARTED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastStarted = iprot.readI64();
              struct.setLastStartedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CURRENT_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.currentState = iprot.readString();
              struct.setCurrentStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // RUNS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.runs = iprot.readI32();
              struct.setRunsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ActiveFlow struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.applicationId != null) {
        oprot.writeFieldBegin(APPLICATION_ID_FIELD_DESC);
        oprot.writeString(struct.applicationId);
        oprot.writeFieldEnd();
      }
      if (struct.flowId != null) {
        oprot.writeFieldBegin(FLOW_ID_FIELD_DESC);
        oprot.writeString(struct.flowId);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LAST_STOPPED_FIELD_DESC);
      oprot.writeI64(struct.lastStopped);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LAST_STARTED_FIELD_DESC);
      oprot.writeI64(struct.lastStarted);
      oprot.writeFieldEnd();
      if (struct.currentState != null) {
        oprot.writeFieldBegin(CURRENT_STATE_FIELD_DESC);
        oprot.writeString(struct.currentState);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RUNS_FIELD_DESC);
      oprot.writeI32(struct.runs);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ActiveFlowTupleSchemeFactory implements SchemeFactory {
    public ActiveFlowTupleScheme getScheme() {
      return new ActiveFlowTupleScheme();
    }
  }

  private static class ActiveFlowTupleScheme extends TupleScheme<ActiveFlow> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ActiveFlow struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetApplicationId()) {
        optionals.set(0);
      }
      if (struct.isSetFlowId()) {
        optionals.set(1);
      }
      if (struct.isSetType()) {
        optionals.set(2);
      }
      if (struct.isSetLastStopped()) {
        optionals.set(3);
      }
      if (struct.isSetLastStarted()) {
        optionals.set(4);
      }
      if (struct.isSetCurrentState()) {
        optionals.set(5);
      }
      if (struct.isSetRuns()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetApplicationId()) {
        oprot.writeString(struct.applicationId);
      }
      if (struct.isSetFlowId()) {
        oprot.writeString(struct.flowId);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetLastStopped()) {
        oprot.writeI64(struct.lastStopped);
      }
      if (struct.isSetLastStarted()) {
        oprot.writeI64(struct.lastStarted);
      }
      if (struct.isSetCurrentState()) {
        oprot.writeString(struct.currentState);
      }
      if (struct.isSetRuns()) {
        oprot.writeI32(struct.runs);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ActiveFlow struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.applicationId = iprot.readString();
        struct.setApplicationIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.flowId = iprot.readString();
        struct.setFlowIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.type = EntityType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.lastStopped = iprot.readI64();
        struct.setLastStoppedIsSet(true);
      }
      if (incoming.get(4)) {
        struct.lastStarted = iprot.readI64();
        struct.setLastStartedIsSet(true);
      }
      if (incoming.get(5)) {
        struct.currentState = iprot.readString();
        struct.setCurrentStateIsSet(true);
      }
      if (incoming.get(6)) {
        struct.runs = iprot.readI32();
        struct.setRunsIsSet(true);
      }
    }
  }

}

