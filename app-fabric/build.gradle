apply plugin: 'java'
apply from: "$rootProject.projectDir/gradle/packaging.gradle"

/**
 * Building of API archive
 */
smartyFacts {
  api {
    enableJavadoc()
    enableSourceJar()
  }
  thrift
}

/**
 * Test Runners for different environments specifying testsuites
 */
testrunner {
    integration {
        setup {
            environment(os: "mac os x")
        }
    }
}

/**
 * Specify all the dependencies for smartyFacts & main.
 */
dependencies {
  // Dependencies for smartyFacts & main
  apiCompile elastic([group: 'com.continuuity', name: 'data-fabric', classifier: 'api', version: "${version}", changing: true],"data-fabric")

  compile elastic([group: 'com.continuuity', name: 'data-fabric', classifier: 'api', version: "${version}", changing: true],"data-fabric")
  compile elastic([group: 'com.continuuity', name: 'watchdog', version: "${version}", changing: true], "watchdog")

  // Dependencies required by api.

  // Dependencies required by main.
  compile libraries.asm
  compile libraries.slf4j_api
  compile libraries.apache_commons_cli
  compile libraries.google_gson
  compile libraries.google_guice
  compile libraries.google_guice_assistedinject
  compile libraries.google_guice_multibindings
  compile libraries.google_guava
  compile libraries.http_client
  compile libraries.jcl_over_slf4j
  compile libraries.jsr_305
  compile libraries.netty
  compile (libraries.hadoop_minicluster) {
    exclude group: 'commons-logging'
  }
  compile libraries.twill_api
  compile libraries.twill_common
  compile (libraries.twill_yarn) {
    exclude group: 'org.apache.hadoop'
  }

  compile libraries.hadoop_annotations
  compile libraries.hadoop_auth
  compile libraries.hadoop_common
  compile libraries.hadoop_yarn_api
  compile libraries.hadoop_yarn_client
  compile libraries.hadoop_yarn_common

  compile libraries.quartz
  compile libraries.quartz_jobs

  // Thrift related stuff.
  thriftCompile libraries.thrift
  thriftCompile libraries.slf4j_api

  // Test dependencies
  testCompile libraries.junit
  compile libraries.continuuity_netty_http
}

/**
 * Includes API output to main and test source sets.
 */
sourceSets {
  main {
    compileClasspath += api.output
    compileClasspath += thrift.output
    runtimeClasspath += api.output 
    runtimeClasspath += thrift.output
  }
  test {
    compileClasspath += api.output
    compileClasspath += thrift.output
    runtimeClasspath += api.output
    runtimeClasspath += thrift.output
  }
}

test {
    jvmArgs '-Xmx1536m'
}

/**
 * Generates API javadoc.
 */
javadoc {
  classpath += (sourceSets.api.output + sourceSets.thrift.output)
}

/**
 * Excludes stubs from clover.
 */
clover {
  excludes << '**/manager/stubs/*'
}

/**
 * Excludes stubs from sonar report exclusion.
 */
sonar {
  project {
    sourceExclusions = '**/manager/stubs/*'
  }
}

checkstyleMain {
  source = sourceSets.main.allJava.matching {
    exclude '**/LocalJobRunnerWithFix*'
  }
}

checkstyleThrift {
  source = sourceSets.main.allJava.matching {
    exclude '**'
  }
}

/**
 * Use io.netty instead of org.jboss.netty
 */
configurations {
    all*.exclude group: 'org.jboss.netty', module: 'netty'
    all*.exclude group: 'asm', module: 'asm'
}

/**
 * Excludes Tests that are part of test suite.
 */
test {
    exclude '**/handlers/**'
}
