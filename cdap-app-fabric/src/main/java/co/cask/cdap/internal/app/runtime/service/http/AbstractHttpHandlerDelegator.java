/*
 * Copyright Â© 2014 Cask Data, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */

package co.cask.cdap.internal.app.runtime.service.http;

import co.cask.cdap.api.metrics.MetricsContext;
import co.cask.cdap.api.service.http.HttpContentConsumer;
import co.cask.cdap.api.service.http.HttpServiceContext;
import co.cask.cdap.api.service.http.HttpServiceHandler;
import co.cask.cdap.api.service.http.HttpServiceRequest;
import co.cask.cdap.common.conf.Constants;
import co.cask.http.BodyConsumer;
import co.cask.http.HandlerContext;
import co.cask.http.HttpHandler;
import co.cask.http.HttpResponder;
import co.cask.tephra.TransactionContext;
import com.google.common.base.Preconditions;
import org.apache.twill.common.Cancellable;
import org.jboss.netty.handler.codec.http.HttpRequest;

/**
 * An abstract base class for all {@link HttpHandler} generated through the {@link HttpHandlerGenerator}.
 *
 * @param <T> Type of the user {@link HttpServiceHandler}.
 */
public abstract class AbstractHttpHandlerDelegator<T extends HttpServiceHandler> implements HttpHandler {

  private final DelegatorContext<T> context;
  private MetricsContext metricsContext;

  protected AbstractHttpHandlerDelegator(DelegatorContext<T> context, MetricsContext metricsContext) {
    this.context = context;
    this.metricsContext = metricsContext;
  }

  @Override
  public void init(HandlerContext context) {
  }

  @Override
  public void destroy(HandlerContext context) {
  }

  /**
   * Returns the {@link HttpServiceHandler} associated with the current thread.
   * This method is called from handler class generated by {@link HttpHandlerGenerator}.
   */
  protected final T getHandler() {
    return context.getHandler();
  }

  /**
   * Returns a {@link TransactionContext} instance to be used for creating transaction.
   * This method is called from handler class generated by {@link HttpHandlerGenerator}.
   */
  protected final TransactionContext getTransactionContext() {
    HttpServiceContext serviceContext = context.getServiceContext();
    Preconditions.checkState(serviceContext instanceof TransactionalHttpServiceContext,
                             "This instance of HttpServiceContext does not support transactions.");
    return ((TransactionalHttpServiceContext) serviceContext).newTransactionContext();
  }

  /**
   * Dismiss the current transaction context.
   * This method is called by the generated sub-class handler method.
   */
  protected final void dismissTransactionContext() {
    ((TransactionalHttpServiceContext) context.getServiceContext()).dismissTransactionContext();
  }

  /**
   * Returns a new instance of {@link HttpServiceRequest} that wraps around the given {@link HttpRequest} object.
   * This method is called from handler class generated by {@link HttpHandlerGenerator}.
   */
  @SuppressWarnings("unused")
  protected final HttpServiceRequest wrapRequest(HttpRequest request) {
    return new DefaultHttpServiceRequest(request);
  }

  /**
   * Returns a new instance of {@link DelayedHttpServiceResponder} that wraps around the given {@link HttpResponder}
   * object. This method is called from handler class generated by {@link HttpHandlerGenerator}.
   */
  @SuppressWarnings("unused")
  protected final DelayedHttpServiceResponder wrapResponder(HttpResponder responder) {
    MetricsContext collector = this.metricsContext;
    HttpServiceContext serviceContext = context.getServiceContext();
    if (serviceContext != null && serviceContext.getSpecification() != null) {
      collector = metricsContext.childContext(Constants.Metrics.Tag.HANDLER,
                                              serviceContext.getSpecification().getName());
    }
    return new DelayedHttpServiceResponder(responder, collector);
  }

  /**
   * Returns a new instance of {@link BodyConsumer} that wraps around the given {@link HttpContentConsumer}
   * and {@link DelayedHttpServiceResponder}.
   *
   * IMPORTANT: This method will also capture the context associated with the current thread, hence after
   * this method is called, no other methods on this class should be called from the current thread.
   *
   * This method is called from handler class generated by {@link HttpHandlerGenerator}.
   */
  @SuppressWarnings("unused")
  protected final BodyConsumer wrapContentConsumer(HttpContentConsumer consumer,
                                                   DelayedHttpServiceResponder responder,
                                                   TransactionContext txContext) {
    HttpServiceContext serviceContext = context.getServiceContext();
    Preconditions.checkState(serviceContext instanceof TransactionalHttpServiceContext,
                             "This instance of HttpServiceContext does not support transactions.");
    Cancellable contextReleaser = context.capture();
    return new BodyConsumerAdapter(responder, consumer, txContext,
                                   ((TransactionalHttpServiceContext) serviceContext), contextReleaser);
  }
}
