//
// Autogenerated by Thrift Compiler (0.9.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = require('./metadataservice_types');
//HELPER FUNCTIONS AND STRUCTURES

MetadataService_createStream_args = function(args) {
  this.account = null;
  this.stream = null;
  if (args) {
    if (args.account !== undefined) {
      this.account = args.account;
    }
    if (args.stream !== undefined) {
      this.stream = args.stream;
    }
  }
};
MetadataService_createStream_args.prototype = {};
MetadataService_createStream_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.account = new ttypes.Account();
        this.account.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.stream = new ttypes.Stream();
        this.stream.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_createStream_args.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_createStream_args');
  if (this.account !== null && this.account !== undefined) {
    output.writeFieldBegin('account', Thrift.Type.STRUCT, 1);
    this.account.write(output);
    output.writeFieldEnd();
  }
  if (this.stream !== null && this.stream !== undefined) {
    output.writeFieldBegin('stream', Thrift.Type.STRUCT, 2);
    this.stream.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_createStream_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.MetadataServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MetadataService_createStream_result.prototype = {};
MetadataService_createStream_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.MetadataServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_createStream_result.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_createStream_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_assertStream_args = function(args) {
  this.account = null;
  this.stream = null;
  if (args) {
    if (args.account !== undefined) {
      this.account = args.account;
    }
    if (args.stream !== undefined) {
      this.stream = args.stream;
    }
  }
};
MetadataService_assertStream_args.prototype = {};
MetadataService_assertStream_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.account = new ttypes.Account();
        this.account.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.stream = new ttypes.Stream();
        this.stream.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_assertStream_args.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_assertStream_args');
  if (this.account !== null && this.account !== undefined) {
    output.writeFieldBegin('account', Thrift.Type.STRUCT, 1);
    this.account.write(output);
    output.writeFieldEnd();
  }
  if (this.stream !== null && this.stream !== undefined) {
    output.writeFieldBegin('stream', Thrift.Type.STRUCT, 2);
    this.stream.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_assertStream_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.MetadataServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MetadataService_assertStream_result.prototype = {};
MetadataService_assertStream_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.MetadataServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_assertStream_result.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_assertStream_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_deleteStream_args = function(args) {
  this.account = null;
  this.stream = null;
  if (args) {
    if (args.account !== undefined) {
      this.account = args.account;
    }
    if (args.stream !== undefined) {
      this.stream = args.stream;
    }
  }
};
MetadataService_deleteStream_args.prototype = {};
MetadataService_deleteStream_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.account = new ttypes.Account();
        this.account.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.stream = new ttypes.Stream();
        this.stream.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_deleteStream_args.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_deleteStream_args');
  if (this.account !== null && this.account !== undefined) {
    output.writeFieldBegin('account', Thrift.Type.STRUCT, 1);
    this.account.write(output);
    output.writeFieldEnd();
  }
  if (this.stream !== null && this.stream !== undefined) {
    output.writeFieldBegin('stream', Thrift.Type.STRUCT, 2);
    this.stream.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_deleteStream_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.MetadataServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MetadataService_deleteStream_result.prototype = {};
MetadataService_deleteStream_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.MetadataServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_deleteStream_result.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_deleteStream_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_getStreams_args = function(args) {
  this.account = null;
  if (args) {
    if (args.account !== undefined) {
      this.account = args.account;
    }
  }
};
MetadataService_getStreams_args.prototype = {};
MetadataService_getStreams_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.account = new ttypes.Account();
        this.account.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_getStreams_args.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_getStreams_args');
  if (this.account !== null && this.account !== undefined) {
    output.writeFieldBegin('account', Thrift.Type.STRUCT, 1);
    this.account.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_getStreams_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.MetadataServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MetadataService_getStreams_result.prototype = {};
MetadataService_getStreams_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.success = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = new ttypes.Stream();
          elem38.read(input);
          this.success.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.MetadataServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_getStreams_result.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_getStreams_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter39 in this.success)
    {
      if (this.success.hasOwnProperty(iter39))
      {
        iter39 = this.success[iter39];
        iter39.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_getStream_args = function(args) {
  this.account = null;
  this.stream = null;
  if (args) {
    if (args.account !== undefined) {
      this.account = args.account;
    }
    if (args.stream !== undefined) {
      this.stream = args.stream;
    }
  }
};
MetadataService_getStream_args.prototype = {};
MetadataService_getStream_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.account = new ttypes.Account();
        this.account.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.stream = new ttypes.Stream();
        this.stream.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_getStream_args.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_getStream_args');
  if (this.account !== null && this.account !== undefined) {
    output.writeFieldBegin('account', Thrift.Type.STRUCT, 1);
    this.account.write(output);
    output.writeFieldEnd();
  }
  if (this.stream !== null && this.stream !== undefined) {
    output.writeFieldBegin('stream', Thrift.Type.STRUCT, 2);
    this.stream.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_getStream_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.MetadataServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MetadataService_getStream_result.prototype = {};
MetadataService_getStream_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Stream();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.MetadataServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_getStream_result.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_getStream_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_createDataset_args = function(args) {
  this.account = null;
  this.dataset = null;
  if (args) {
    if (args.account !== undefined) {
      this.account = args.account;
    }
    if (args.dataset !== undefined) {
      this.dataset = args.dataset;
    }
  }
};
MetadataService_createDataset_args.prototype = {};
MetadataService_createDataset_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.account = new ttypes.Account();
        this.account.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.dataset = new ttypes.Dataset();
        this.dataset.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_createDataset_args.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_createDataset_args');
  if (this.account !== null && this.account !== undefined) {
    output.writeFieldBegin('account', Thrift.Type.STRUCT, 1);
    this.account.write(output);
    output.writeFieldEnd();
  }
  if (this.dataset !== null && this.dataset !== undefined) {
    output.writeFieldBegin('dataset', Thrift.Type.STRUCT, 2);
    this.dataset.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_createDataset_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.MetadataServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MetadataService_createDataset_result.prototype = {};
MetadataService_createDataset_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.MetadataServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_createDataset_result.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_createDataset_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_assertDataset_args = function(args) {
  this.account = null;
  this.dataset = null;
  if (args) {
    if (args.account !== undefined) {
      this.account = args.account;
    }
    if (args.dataset !== undefined) {
      this.dataset = args.dataset;
    }
  }
};
MetadataService_assertDataset_args.prototype = {};
MetadataService_assertDataset_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.account = new ttypes.Account();
        this.account.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.dataset = new ttypes.Dataset();
        this.dataset.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_assertDataset_args.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_assertDataset_args');
  if (this.account !== null && this.account !== undefined) {
    output.writeFieldBegin('account', Thrift.Type.STRUCT, 1);
    this.account.write(output);
    output.writeFieldEnd();
  }
  if (this.dataset !== null && this.dataset !== undefined) {
    output.writeFieldBegin('dataset', Thrift.Type.STRUCT, 2);
    this.dataset.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_assertDataset_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.MetadataServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MetadataService_assertDataset_result.prototype = {};
MetadataService_assertDataset_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.MetadataServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_assertDataset_result.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_assertDataset_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_deleteDataset_args = function(args) {
  this.account = null;
  this.dataset = null;
  if (args) {
    if (args.account !== undefined) {
      this.account = args.account;
    }
    if (args.dataset !== undefined) {
      this.dataset = args.dataset;
    }
  }
};
MetadataService_deleteDataset_args.prototype = {};
MetadataService_deleteDataset_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.account = new ttypes.Account();
        this.account.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.dataset = new ttypes.Dataset();
        this.dataset.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_deleteDataset_args.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_deleteDataset_args');
  if (this.account !== null && this.account !== undefined) {
    output.writeFieldBegin('account', Thrift.Type.STRUCT, 1);
    this.account.write(output);
    output.writeFieldEnd();
  }
  if (this.dataset !== null && this.dataset !== undefined) {
    output.writeFieldBegin('dataset', Thrift.Type.STRUCT, 2);
    this.dataset.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_deleteDataset_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.MetadataServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MetadataService_deleteDataset_result.prototype = {};
MetadataService_deleteDataset_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.MetadataServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_deleteDataset_result.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_deleteDataset_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_getDatasets_args = function(args) {
  this.account = null;
  if (args) {
    if (args.account !== undefined) {
      this.account = args.account;
    }
  }
};
MetadataService_getDatasets_args.prototype = {};
MetadataService_getDatasets_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.account = new ttypes.Account();
        this.account.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_getDatasets_args.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_getDatasets_args');
  if (this.account !== null && this.account !== undefined) {
    output.writeFieldBegin('account', Thrift.Type.STRUCT, 1);
    this.account.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_getDatasets_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.MetadataServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MetadataService_getDatasets_result.prototype = {};
MetadataService_getDatasets_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size40 = 0;
        var _rtmp344;
        this.success = [];
        var _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          elem46 = new ttypes.Dataset();
          elem46.read(input);
          this.success.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.MetadataServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_getDatasets_result.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_getDatasets_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter47 in this.success)
    {
      if (this.success.hasOwnProperty(iter47))
      {
        iter47 = this.success[iter47];
        iter47.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_getDataset_args = function(args) {
  this.account = null;
  this.dataset = null;
  if (args) {
    if (args.account !== undefined) {
      this.account = args.account;
    }
    if (args.dataset !== undefined) {
      this.dataset = args.dataset;
    }
  }
};
MetadataService_getDataset_args.prototype = {};
MetadataService_getDataset_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.account = new ttypes.Account();
        this.account.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.dataset = new ttypes.Dataset();
        this.dataset.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_getDataset_args.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_getDataset_args');
  if (this.account !== null && this.account !== undefined) {
    output.writeFieldBegin('account', Thrift.Type.STRUCT, 1);
    this.account.write(output);
    output.writeFieldEnd();
  }
  if (this.dataset !== null && this.dataset !== undefined) {
    output.writeFieldBegin('dataset', Thrift.Type.STRUCT, 2);
    this.dataset.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_getDataset_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.MetadataServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MetadataService_getDataset_result.prototype = {};
MetadataService_getDataset_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Dataset();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.MetadataServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_getDataset_result.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_getDataset_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_createApplication_args = function(args) {
  this.account = null;
  this.application = null;
  if (args) {
    if (args.account !== undefined) {
      this.account = args.account;
    }
    if (args.application !== undefined) {
      this.application = args.application;
    }
  }
};
MetadataService_createApplication_args.prototype = {};
MetadataService_createApplication_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.account = new ttypes.Account();
        this.account.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.application = new ttypes.Application();
        this.application.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_createApplication_args.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_createApplication_args');
  if (this.account !== null && this.account !== undefined) {
    output.writeFieldBegin('account', Thrift.Type.STRUCT, 1);
    this.account.write(output);
    output.writeFieldEnd();
  }
  if (this.application !== null && this.application !== undefined) {
    output.writeFieldBegin('application', Thrift.Type.STRUCT, 2);
    this.application.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_createApplication_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.MetadataServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MetadataService_createApplication_result.prototype = {};
MetadataService_createApplication_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.MetadataServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_createApplication_result.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_createApplication_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_updateApplication_args = function(args) {
  this.account = null;
  this.application = null;
  if (args) {
    if (args.account !== undefined) {
      this.account = args.account;
    }
    if (args.application !== undefined) {
      this.application = args.application;
    }
  }
};
MetadataService_updateApplication_args.prototype = {};
MetadataService_updateApplication_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.account = new ttypes.Account();
        this.account.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.application = new ttypes.Application();
        this.application.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_updateApplication_args.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_updateApplication_args');
  if (this.account !== null && this.account !== undefined) {
    output.writeFieldBegin('account', Thrift.Type.STRUCT, 1);
    this.account.write(output);
    output.writeFieldEnd();
  }
  if (this.application !== null && this.application !== undefined) {
    output.writeFieldBegin('application', Thrift.Type.STRUCT, 2);
    this.application.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_updateApplication_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.MetadataServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MetadataService_updateApplication_result.prototype = {};
MetadataService_updateApplication_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.MetadataServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_updateApplication_result.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_updateApplication_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_deleteApplication_args = function(args) {
  this.account = null;
  this.application = null;
  if (args) {
    if (args.account !== undefined) {
      this.account = args.account;
    }
    if (args.application !== undefined) {
      this.application = args.application;
    }
  }
};
MetadataService_deleteApplication_args.prototype = {};
MetadataService_deleteApplication_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.account = new ttypes.Account();
        this.account.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.application = new ttypes.Application();
        this.application.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_deleteApplication_args.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_deleteApplication_args');
  if (this.account !== null && this.account !== undefined) {
    output.writeFieldBegin('account', Thrift.Type.STRUCT, 1);
    this.account.write(output);
    output.writeFieldEnd();
  }
  if (this.application !== null && this.application !== undefined) {
    output.writeFieldBegin('application', Thrift.Type.STRUCT, 2);
    this.application.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_deleteApplication_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.MetadataServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MetadataService_deleteApplication_result.prototype = {};
MetadataService_deleteApplication_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.MetadataServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_deleteApplication_result.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_deleteApplication_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_getApplications_args = function(args) {
  this.account = null;
  if (args) {
    if (args.account !== undefined) {
      this.account = args.account;
    }
  }
};
MetadataService_getApplications_args.prototype = {};
MetadataService_getApplications_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.account = new ttypes.Account();
        this.account.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_getApplications_args.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_getApplications_args');
  if (this.account !== null && this.account !== undefined) {
    output.writeFieldBegin('account', Thrift.Type.STRUCT, 1);
    this.account.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_getApplications_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.MetadataServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MetadataService_getApplications_result.prototype = {};
MetadataService_getApplications_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size48 = 0;
        var _rtmp352;
        this.success = [];
        var _etype51 = 0;
        _rtmp352 = input.readListBegin();
        _etype51 = _rtmp352.etype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var elem54 = null;
          elem54 = new ttypes.Application();
          elem54.read(input);
          this.success.push(elem54);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.MetadataServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_getApplications_result.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_getApplications_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter55 in this.success)
    {
      if (this.success.hasOwnProperty(iter55))
      {
        iter55 = this.success[iter55];
        iter55.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_getApplication_args = function(args) {
  this.account = null;
  this.application = null;
  if (args) {
    if (args.account !== undefined) {
      this.account = args.account;
    }
    if (args.application !== undefined) {
      this.application = args.application;
    }
  }
};
MetadataService_getApplication_args.prototype = {};
MetadataService_getApplication_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.account = new ttypes.Account();
        this.account.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.application = new ttypes.Application();
        this.application.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_getApplication_args.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_getApplication_args');
  if (this.account !== null && this.account !== undefined) {
    output.writeFieldBegin('account', Thrift.Type.STRUCT, 1);
    this.account.write(output);
    output.writeFieldEnd();
  }
  if (this.application !== null && this.application !== undefined) {
    output.writeFieldBegin('application', Thrift.Type.STRUCT, 2);
    this.application.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_getApplication_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.MetadataServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MetadataService_getApplication_result.prototype = {};
MetadataService_getApplication_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Application();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.MetadataServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_getApplication_result.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_getApplication_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_createQuery_args = function(args) {
  this.account = null;
  this.query = null;
  if (args) {
    if (args.account !== undefined) {
      this.account = args.account;
    }
    if (args.query !== undefined) {
      this.query = args.query;
    }
  }
};
MetadataService_createQuery_args.prototype = {};
MetadataService_createQuery_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.account = new ttypes.Account();
        this.account.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.query = new ttypes.Query();
        this.query.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_createQuery_args.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_createQuery_args');
  if (this.account !== null && this.account !== undefined) {
    output.writeFieldBegin('account', Thrift.Type.STRUCT, 1);
    this.account.write(output);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRUCT, 2);
    this.query.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_createQuery_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.MetadataServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MetadataService_createQuery_result.prototype = {};
MetadataService_createQuery_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.MetadataServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_createQuery_result.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_createQuery_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_updateQuery_args = function(args) {
  this.account = null;
  this.query = null;
  if (args) {
    if (args.account !== undefined) {
      this.account = args.account;
    }
    if (args.query !== undefined) {
      this.query = args.query;
    }
  }
};
MetadataService_updateQuery_args.prototype = {};
MetadataService_updateQuery_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.account = new ttypes.Account();
        this.account.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.query = new ttypes.Query();
        this.query.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_updateQuery_args.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_updateQuery_args');
  if (this.account !== null && this.account !== undefined) {
    output.writeFieldBegin('account', Thrift.Type.STRUCT, 1);
    this.account.write(output);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRUCT, 2);
    this.query.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_updateQuery_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.MetadataServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MetadataService_updateQuery_result.prototype = {};
MetadataService_updateQuery_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.MetadataServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_updateQuery_result.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_updateQuery_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_addDatasetToQuery_args = function(args) {
  this.account = null;
  this.app = null;
  this.query = null;
  this.dataset = null;
  if (args) {
    if (args.account !== undefined) {
      this.account = args.account;
    }
    if (args.app !== undefined) {
      this.app = args.app;
    }
    if (args.query !== undefined) {
      this.query = args.query;
    }
    if (args.dataset !== undefined) {
      this.dataset = args.dataset;
    }
  }
};
MetadataService_addDatasetToQuery_args.prototype = {};
MetadataService_addDatasetToQuery_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.account = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.app = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.query = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.dataset = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_addDatasetToQuery_args.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_addDatasetToQuery_args');
  if (this.account !== null && this.account !== undefined) {
    output.writeFieldBegin('account', Thrift.Type.STRING, 1);
    output.writeString(this.account);
    output.writeFieldEnd();
  }
  if (this.app !== null && this.app !== undefined) {
    output.writeFieldBegin('app', Thrift.Type.STRING, 2);
    output.writeString(this.app);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRING, 3);
    output.writeString(this.query);
    output.writeFieldEnd();
  }
  if (this.dataset !== null && this.dataset !== undefined) {
    output.writeFieldBegin('dataset', Thrift.Type.STRING, 4);
    output.writeString(this.dataset);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_addDatasetToQuery_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.MetadataServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MetadataService_addDatasetToQuery_result.prototype = {};
MetadataService_addDatasetToQuery_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.MetadataServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_addDatasetToQuery_result.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_addDatasetToQuery_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_deleteQuery_args = function(args) {
  this.account = null;
  this.query = null;
  if (args) {
    if (args.account !== undefined) {
      this.account = args.account;
    }
    if (args.query !== undefined) {
      this.query = args.query;
    }
  }
};
MetadataService_deleteQuery_args.prototype = {};
MetadataService_deleteQuery_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.account = new ttypes.Account();
        this.account.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.query = new ttypes.Query();
        this.query.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_deleteQuery_args.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_deleteQuery_args');
  if (this.account !== null && this.account !== undefined) {
    output.writeFieldBegin('account', Thrift.Type.STRUCT, 1);
    this.account.write(output);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRUCT, 2);
    this.query.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_deleteQuery_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.MetadataServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MetadataService_deleteQuery_result.prototype = {};
MetadataService_deleteQuery_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.MetadataServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_deleteQuery_result.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_deleteQuery_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_getQueries_args = function(args) {
  this.account = null;
  if (args) {
    if (args.account !== undefined) {
      this.account = args.account;
    }
  }
};
MetadataService_getQueries_args.prototype = {};
MetadataService_getQueries_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.account = new ttypes.Account();
        this.account.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_getQueries_args.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_getQueries_args');
  if (this.account !== null && this.account !== undefined) {
    output.writeFieldBegin('account', Thrift.Type.STRUCT, 1);
    this.account.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_getQueries_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.MetadataServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MetadataService_getQueries_result.prototype = {};
MetadataService_getQueries_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size56 = 0;
        var _rtmp360;
        this.success = [];
        var _etype59 = 0;
        _rtmp360 = input.readListBegin();
        _etype59 = _rtmp360.etype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var elem62 = null;
          elem62 = new ttypes.Query();
          elem62.read(input);
          this.success.push(elem62);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.MetadataServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_getQueries_result.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_getQueries_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter63 in this.success)
    {
      if (this.success.hasOwnProperty(iter63))
      {
        iter63 = this.success[iter63];
        iter63.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_getQuery_args = function(args) {
  this.account = null;
  this.query = null;
  if (args) {
    if (args.account !== undefined) {
      this.account = args.account;
    }
    if (args.query !== undefined) {
      this.query = args.query;
    }
  }
};
MetadataService_getQuery_args.prototype = {};
MetadataService_getQuery_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.account = new ttypes.Account();
        this.account.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.query = new ttypes.Query();
        this.query.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_getQuery_args.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_getQuery_args');
  if (this.account !== null && this.account !== undefined) {
    output.writeFieldBegin('account', Thrift.Type.STRUCT, 1);
    this.account.write(output);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRUCT, 2);
    this.query.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_getQuery_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.MetadataServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MetadataService_getQuery_result.prototype = {};
MetadataService_getQuery_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Query();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.MetadataServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_getQuery_result.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_getQuery_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_createMapreduce_args = function(args) {
  this.account = null;
  this.mapreduce = null;
  if (args) {
    if (args.account !== undefined) {
      this.account = args.account;
    }
    if (args.mapreduce !== undefined) {
      this.mapreduce = args.mapreduce;
    }
  }
};
MetadataService_createMapreduce_args.prototype = {};
MetadataService_createMapreduce_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.account = new ttypes.Account();
        this.account.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.mapreduce = new ttypes.Mapreduce();
        this.mapreduce.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_createMapreduce_args.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_createMapreduce_args');
  if (this.account !== null && this.account !== undefined) {
    output.writeFieldBegin('account', Thrift.Type.STRUCT, 1);
    this.account.write(output);
    output.writeFieldEnd();
  }
  if (this.mapreduce !== null && this.mapreduce !== undefined) {
    output.writeFieldBegin('mapreduce', Thrift.Type.STRUCT, 2);
    this.mapreduce.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_createMapreduce_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.MetadataServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MetadataService_createMapreduce_result.prototype = {};
MetadataService_createMapreduce_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.MetadataServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_createMapreduce_result.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_createMapreduce_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_updateMapreduce_args = function(args) {
  this.account = null;
  this.mapreduce = null;
  if (args) {
    if (args.account !== undefined) {
      this.account = args.account;
    }
    if (args.mapreduce !== undefined) {
      this.mapreduce = args.mapreduce;
    }
  }
};
MetadataService_updateMapreduce_args.prototype = {};
MetadataService_updateMapreduce_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.account = new ttypes.Account();
        this.account.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.mapreduce = new ttypes.Mapreduce();
        this.mapreduce.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_updateMapreduce_args.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_updateMapreduce_args');
  if (this.account !== null && this.account !== undefined) {
    output.writeFieldBegin('account', Thrift.Type.STRUCT, 1);
    this.account.write(output);
    output.writeFieldEnd();
  }
  if (this.mapreduce !== null && this.mapreduce !== undefined) {
    output.writeFieldBegin('mapreduce', Thrift.Type.STRUCT, 2);
    this.mapreduce.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_updateMapreduce_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.MetadataServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MetadataService_updateMapreduce_result.prototype = {};
MetadataService_updateMapreduce_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.MetadataServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_updateMapreduce_result.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_updateMapreduce_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_addDatasetToMapreduce_args = function(args) {
  this.account = null;
  this.app = null;
  this.mapreduce = null;
  this.dataset = null;
  if (args) {
    if (args.account !== undefined) {
      this.account = args.account;
    }
    if (args.app !== undefined) {
      this.app = args.app;
    }
    if (args.mapreduce !== undefined) {
      this.mapreduce = args.mapreduce;
    }
    if (args.dataset !== undefined) {
      this.dataset = args.dataset;
    }
  }
};
MetadataService_addDatasetToMapreduce_args.prototype = {};
MetadataService_addDatasetToMapreduce_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.account = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.app = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.mapreduce = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.dataset = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_addDatasetToMapreduce_args.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_addDatasetToMapreduce_args');
  if (this.account !== null && this.account !== undefined) {
    output.writeFieldBegin('account', Thrift.Type.STRING, 1);
    output.writeString(this.account);
    output.writeFieldEnd();
  }
  if (this.app !== null && this.app !== undefined) {
    output.writeFieldBegin('app', Thrift.Type.STRING, 2);
    output.writeString(this.app);
    output.writeFieldEnd();
  }
  if (this.mapreduce !== null && this.mapreduce !== undefined) {
    output.writeFieldBegin('mapreduce', Thrift.Type.STRING, 3);
    output.writeString(this.mapreduce);
    output.writeFieldEnd();
  }
  if (this.dataset !== null && this.dataset !== undefined) {
    output.writeFieldBegin('dataset', Thrift.Type.STRING, 4);
    output.writeString(this.dataset);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_addDatasetToMapreduce_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.MetadataServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MetadataService_addDatasetToMapreduce_result.prototype = {};
MetadataService_addDatasetToMapreduce_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.MetadataServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_addDatasetToMapreduce_result.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_addDatasetToMapreduce_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_deleteMapreduce_args = function(args) {
  this.account = null;
  this.mapreduce = null;
  if (args) {
    if (args.account !== undefined) {
      this.account = args.account;
    }
    if (args.mapreduce !== undefined) {
      this.mapreduce = args.mapreduce;
    }
  }
};
MetadataService_deleteMapreduce_args.prototype = {};
MetadataService_deleteMapreduce_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.account = new ttypes.Account();
        this.account.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.mapreduce = new ttypes.Mapreduce();
        this.mapreduce.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_deleteMapreduce_args.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_deleteMapreduce_args');
  if (this.account !== null && this.account !== undefined) {
    output.writeFieldBegin('account', Thrift.Type.STRUCT, 1);
    this.account.write(output);
    output.writeFieldEnd();
  }
  if (this.mapreduce !== null && this.mapreduce !== undefined) {
    output.writeFieldBegin('mapreduce', Thrift.Type.STRUCT, 2);
    this.mapreduce.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_deleteMapreduce_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.MetadataServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MetadataService_deleteMapreduce_result.prototype = {};
MetadataService_deleteMapreduce_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.MetadataServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_deleteMapreduce_result.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_deleteMapreduce_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_getMapreduces_args = function(args) {
  this.account = null;
  if (args) {
    if (args.account !== undefined) {
      this.account = args.account;
    }
  }
};
MetadataService_getMapreduces_args.prototype = {};
MetadataService_getMapreduces_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.account = new ttypes.Account();
        this.account.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_getMapreduces_args.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_getMapreduces_args');
  if (this.account !== null && this.account !== undefined) {
    output.writeFieldBegin('account', Thrift.Type.STRUCT, 1);
    this.account.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_getMapreduces_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.MetadataServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MetadataService_getMapreduces_result.prototype = {};
MetadataService_getMapreduces_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size64 = 0;
        var _rtmp368;
        this.success = [];
        var _etype67 = 0;
        _rtmp368 = input.readListBegin();
        _etype67 = _rtmp368.etype;
        _size64 = _rtmp368.size;
        for (var _i69 = 0; _i69 < _size64; ++_i69)
        {
          var elem70 = null;
          elem70 = new ttypes.Mapreduce();
          elem70.read(input);
          this.success.push(elem70);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.MetadataServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_getMapreduces_result.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_getMapreduces_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter71 in this.success)
    {
      if (this.success.hasOwnProperty(iter71))
      {
        iter71 = this.success[iter71];
        iter71.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_getMapreduce_args = function(args) {
  this.account = null;
  this.mapreduce = null;
  if (args) {
    if (args.account !== undefined) {
      this.account = args.account;
    }
    if (args.mapreduce !== undefined) {
      this.mapreduce = args.mapreduce;
    }
  }
};
MetadataService_getMapreduce_args.prototype = {};
MetadataService_getMapreduce_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.account = new ttypes.Account();
        this.account.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.mapreduce = new ttypes.Mapreduce();
        this.mapreduce.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_getMapreduce_args.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_getMapreduce_args');
  if (this.account !== null && this.account !== undefined) {
    output.writeFieldBegin('account', Thrift.Type.STRUCT, 1);
    this.account.write(output);
    output.writeFieldEnd();
  }
  if (this.mapreduce !== null && this.mapreduce !== undefined) {
    output.writeFieldBegin('mapreduce', Thrift.Type.STRUCT, 2);
    this.mapreduce.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_getMapreduce_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.MetadataServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MetadataService_getMapreduce_result.prototype = {};
MetadataService_getMapreduce_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Mapreduce();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.MetadataServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_getMapreduce_result.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_getMapreduce_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_createFlow_args = function(args) {
  this.account = null;
  this.flow = null;
  if (args) {
    if (args.account !== undefined) {
      this.account = args.account;
    }
    if (args.flow !== undefined) {
      this.flow = args.flow;
    }
  }
};
MetadataService_createFlow_args.prototype = {};
MetadataService_createFlow_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.account = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.flow = new ttypes.Flow();
        this.flow.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_createFlow_args.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_createFlow_args');
  if (this.account !== null && this.account !== undefined) {
    output.writeFieldBegin('account', Thrift.Type.STRING, 1);
    output.writeString(this.account);
    output.writeFieldEnd();
  }
  if (this.flow !== null && this.flow !== undefined) {
    output.writeFieldBegin('flow', Thrift.Type.STRUCT, 2);
    this.flow.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_createFlow_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.MetadataServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MetadataService_createFlow_result.prototype = {};
MetadataService_createFlow_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.MetadataServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_createFlow_result.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_createFlow_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_updateFlow_args = function(args) {
  this.account = null;
  this.flow = null;
  if (args) {
    if (args.account !== undefined) {
      this.account = args.account;
    }
    if (args.flow !== undefined) {
      this.flow = args.flow;
    }
  }
};
MetadataService_updateFlow_args.prototype = {};
MetadataService_updateFlow_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.account = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.flow = new ttypes.Flow();
        this.flow.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_updateFlow_args.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_updateFlow_args');
  if (this.account !== null && this.account !== undefined) {
    output.writeFieldBegin('account', Thrift.Type.STRING, 1);
    output.writeString(this.account);
    output.writeFieldEnd();
  }
  if (this.flow !== null && this.flow !== undefined) {
    output.writeFieldBegin('flow', Thrift.Type.STRUCT, 2);
    this.flow.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_updateFlow_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.MetadataServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MetadataService_updateFlow_result.prototype = {};
MetadataService_updateFlow_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.MetadataServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_updateFlow_result.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_updateFlow_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_addDatasetToFlow_args = function(args) {
  this.account = null;
  this.app = null;
  this.flowid = null;
  this.dataset = null;
  if (args) {
    if (args.account !== undefined) {
      this.account = args.account;
    }
    if (args.app !== undefined) {
      this.app = args.app;
    }
    if (args.flowid !== undefined) {
      this.flowid = args.flowid;
    }
    if (args.dataset !== undefined) {
      this.dataset = args.dataset;
    }
  }
};
MetadataService_addDatasetToFlow_args.prototype = {};
MetadataService_addDatasetToFlow_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.account = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.app = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.flowid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.dataset = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_addDatasetToFlow_args.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_addDatasetToFlow_args');
  if (this.account !== null && this.account !== undefined) {
    output.writeFieldBegin('account', Thrift.Type.STRING, 1);
    output.writeString(this.account);
    output.writeFieldEnd();
  }
  if (this.app !== null && this.app !== undefined) {
    output.writeFieldBegin('app', Thrift.Type.STRING, 2);
    output.writeString(this.app);
    output.writeFieldEnd();
  }
  if (this.flowid !== null && this.flowid !== undefined) {
    output.writeFieldBegin('flowid', Thrift.Type.STRING, 3);
    output.writeString(this.flowid);
    output.writeFieldEnd();
  }
  if (this.dataset !== null && this.dataset !== undefined) {
    output.writeFieldBegin('dataset', Thrift.Type.STRING, 4);
    output.writeString(this.dataset);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_addDatasetToFlow_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.MetadataServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MetadataService_addDatasetToFlow_result.prototype = {};
MetadataService_addDatasetToFlow_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.MetadataServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_addDatasetToFlow_result.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_addDatasetToFlow_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_addStreamToFlow_args = function(args) {
  this.account = null;
  this.app = null;
  this.flowid = null;
  this.stream = null;
  if (args) {
    if (args.account !== undefined) {
      this.account = args.account;
    }
    if (args.app !== undefined) {
      this.app = args.app;
    }
    if (args.flowid !== undefined) {
      this.flowid = args.flowid;
    }
    if (args.stream !== undefined) {
      this.stream = args.stream;
    }
  }
};
MetadataService_addStreamToFlow_args.prototype = {};
MetadataService_addStreamToFlow_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.account = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.app = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.flowid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.stream = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_addStreamToFlow_args.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_addStreamToFlow_args');
  if (this.account !== null && this.account !== undefined) {
    output.writeFieldBegin('account', Thrift.Type.STRING, 1);
    output.writeString(this.account);
    output.writeFieldEnd();
  }
  if (this.app !== null && this.app !== undefined) {
    output.writeFieldBegin('app', Thrift.Type.STRING, 2);
    output.writeString(this.app);
    output.writeFieldEnd();
  }
  if (this.flowid !== null && this.flowid !== undefined) {
    output.writeFieldBegin('flowid', Thrift.Type.STRING, 3);
    output.writeString(this.flowid);
    output.writeFieldEnd();
  }
  if (this.stream !== null && this.stream !== undefined) {
    output.writeFieldBegin('stream', Thrift.Type.STRING, 4);
    output.writeString(this.stream);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_addStreamToFlow_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.MetadataServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MetadataService_addStreamToFlow_result.prototype = {};
MetadataService_addStreamToFlow_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.MetadataServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_addStreamToFlow_result.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_addStreamToFlow_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_deleteFlow_args = function(args) {
  this.account = null;
  this.app = null;
  this.flowid = null;
  if (args) {
    if (args.account !== undefined) {
      this.account = args.account;
    }
    if (args.app !== undefined) {
      this.app = args.app;
    }
    if (args.flowid !== undefined) {
      this.flowid = args.flowid;
    }
  }
};
MetadataService_deleteFlow_args.prototype = {};
MetadataService_deleteFlow_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.account = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.app = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.flowid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_deleteFlow_args.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_deleteFlow_args');
  if (this.account !== null && this.account !== undefined) {
    output.writeFieldBegin('account', Thrift.Type.STRING, 1);
    output.writeString(this.account);
    output.writeFieldEnd();
  }
  if (this.app !== null && this.app !== undefined) {
    output.writeFieldBegin('app', Thrift.Type.STRING, 2);
    output.writeString(this.app);
    output.writeFieldEnd();
  }
  if (this.flowid !== null && this.flowid !== undefined) {
    output.writeFieldBegin('flowid', Thrift.Type.STRING, 3);
    output.writeString(this.flowid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_deleteFlow_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.MetadataServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MetadataService_deleteFlow_result.prototype = {};
MetadataService_deleteFlow_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.MetadataServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_deleteFlow_result.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_deleteFlow_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_getFlows_args = function(args) {
  this.account = null;
  if (args) {
    if (args.account !== undefined) {
      this.account = args.account;
    }
  }
};
MetadataService_getFlows_args.prototype = {};
MetadataService_getFlows_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.account = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_getFlows_args.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_getFlows_args');
  if (this.account !== null && this.account !== undefined) {
    output.writeFieldBegin('account', Thrift.Type.STRING, 1);
    output.writeString(this.account);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_getFlows_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.MetadataServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MetadataService_getFlows_result.prototype = {};
MetadataService_getFlows_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size72 = 0;
        var _rtmp376;
        this.success = [];
        var _etype75 = 0;
        _rtmp376 = input.readListBegin();
        _etype75 = _rtmp376.etype;
        _size72 = _rtmp376.size;
        for (var _i77 = 0; _i77 < _size72; ++_i77)
        {
          var elem78 = null;
          elem78 = new ttypes.Flow();
          elem78.read(input);
          this.success.push(elem78);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.MetadataServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_getFlows_result.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_getFlows_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter79 in this.success)
    {
      if (this.success.hasOwnProperty(iter79))
      {
        iter79 = this.success[iter79];
        iter79.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_getFlow_args = function(args) {
  this.account = null;
  this.app = null;
  this.flowid = null;
  if (args) {
    if (args.account !== undefined) {
      this.account = args.account;
    }
    if (args.app !== undefined) {
      this.app = args.app;
    }
    if (args.flowid !== undefined) {
      this.flowid = args.flowid;
    }
  }
};
MetadataService_getFlow_args.prototype = {};
MetadataService_getFlow_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.account = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.app = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.flowid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_getFlow_args.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_getFlow_args');
  if (this.account !== null && this.account !== undefined) {
    output.writeFieldBegin('account', Thrift.Type.STRING, 1);
    output.writeString(this.account);
    output.writeFieldEnd();
  }
  if (this.app !== null && this.app !== undefined) {
    output.writeFieldBegin('app', Thrift.Type.STRING, 2);
    output.writeString(this.app);
    output.writeFieldEnd();
  }
  if (this.flowid !== null && this.flowid !== undefined) {
    output.writeFieldBegin('flowid', Thrift.Type.STRING, 3);
    output.writeString(this.flowid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_getFlow_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.MetadataServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MetadataService_getFlow_result.prototype = {};
MetadataService_getFlow_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Flow();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.MetadataServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_getFlow_result.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_getFlow_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_getFlowsByApplication_args = function(args) {
  this.account = null;
  this.application = null;
  if (args) {
    if (args.account !== undefined) {
      this.account = args.account;
    }
    if (args.application !== undefined) {
      this.application = args.application;
    }
  }
};
MetadataService_getFlowsByApplication_args.prototype = {};
MetadataService_getFlowsByApplication_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.account = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.application = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_getFlowsByApplication_args.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_getFlowsByApplication_args');
  if (this.account !== null && this.account !== undefined) {
    output.writeFieldBegin('account', Thrift.Type.STRING, 1);
    output.writeString(this.account);
    output.writeFieldEnd();
  }
  if (this.application !== null && this.application !== undefined) {
    output.writeFieldBegin('application', Thrift.Type.STRING, 2);
    output.writeString(this.application);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_getFlowsByApplication_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.MetadataServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MetadataService_getFlowsByApplication_result.prototype = {};
MetadataService_getFlowsByApplication_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size80 = 0;
        var _rtmp384;
        this.success = [];
        var _etype83 = 0;
        _rtmp384 = input.readListBegin();
        _etype83 = _rtmp384.etype;
        _size80 = _rtmp384.size;
        for (var _i85 = 0; _i85 < _size80; ++_i85)
        {
          var elem86 = null;
          elem86 = new ttypes.Flow();
          elem86.read(input);
          this.success.push(elem86);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.MetadataServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_getFlowsByApplication_result.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_getFlowsByApplication_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter87 in this.success)
    {
      if (this.success.hasOwnProperty(iter87))
      {
        iter87 = this.success[iter87];
        iter87.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_getQueriesByApplication_args = function(args) {
  this.account = null;
  this.application = null;
  if (args) {
    if (args.account !== undefined) {
      this.account = args.account;
    }
    if (args.application !== undefined) {
      this.application = args.application;
    }
  }
};
MetadataService_getQueriesByApplication_args.prototype = {};
MetadataService_getQueriesByApplication_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.account = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.application = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_getQueriesByApplication_args.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_getQueriesByApplication_args');
  if (this.account !== null && this.account !== undefined) {
    output.writeFieldBegin('account', Thrift.Type.STRING, 1);
    output.writeString(this.account);
    output.writeFieldEnd();
  }
  if (this.application !== null && this.application !== undefined) {
    output.writeFieldBegin('application', Thrift.Type.STRING, 2);
    output.writeString(this.application);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_getQueriesByApplication_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.MetadataServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MetadataService_getQueriesByApplication_result.prototype = {};
MetadataService_getQueriesByApplication_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size88 = 0;
        var _rtmp392;
        this.success = [];
        var _etype91 = 0;
        _rtmp392 = input.readListBegin();
        _etype91 = _rtmp392.etype;
        _size88 = _rtmp392.size;
        for (var _i93 = 0; _i93 < _size88; ++_i93)
        {
          var elem94 = null;
          elem94 = new ttypes.Query();
          elem94.read(input);
          this.success.push(elem94);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.MetadataServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_getQueriesByApplication_result.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_getQueriesByApplication_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter95 in this.success)
    {
      if (this.success.hasOwnProperty(iter95))
      {
        iter95 = this.success[iter95];
        iter95.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_getMapreducesByApplication_args = function(args) {
  this.account = null;
  this.application = null;
  if (args) {
    if (args.account !== undefined) {
      this.account = args.account;
    }
    if (args.application !== undefined) {
      this.application = args.application;
    }
  }
};
MetadataService_getMapreducesByApplication_args.prototype = {};
MetadataService_getMapreducesByApplication_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.account = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.application = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_getMapreducesByApplication_args.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_getMapreducesByApplication_args');
  if (this.account !== null && this.account !== undefined) {
    output.writeFieldBegin('account', Thrift.Type.STRING, 1);
    output.writeString(this.account);
    output.writeFieldEnd();
  }
  if (this.application !== null && this.application !== undefined) {
    output.writeFieldBegin('application', Thrift.Type.STRING, 2);
    output.writeString(this.application);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_getMapreducesByApplication_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.MetadataServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MetadataService_getMapreducesByApplication_result.prototype = {};
MetadataService_getMapreducesByApplication_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size96 = 0;
        var _rtmp3100;
        this.success = [];
        var _etype99 = 0;
        _rtmp3100 = input.readListBegin();
        _etype99 = _rtmp3100.etype;
        _size96 = _rtmp3100.size;
        for (var _i101 = 0; _i101 < _size96; ++_i101)
        {
          var elem102 = null;
          elem102 = new ttypes.Mapreduce();
          elem102.read(input);
          this.success.push(elem102);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.MetadataServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_getMapreducesByApplication_result.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_getMapreducesByApplication_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter103 in this.success)
    {
      if (this.success.hasOwnProperty(iter103))
      {
        iter103 = this.success[iter103];
        iter103.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_getStreamsByApplication_args = function(args) {
  this.account = null;
  this.application = null;
  if (args) {
    if (args.account !== undefined) {
      this.account = args.account;
    }
    if (args.application !== undefined) {
      this.application = args.application;
    }
  }
};
MetadataService_getStreamsByApplication_args.prototype = {};
MetadataService_getStreamsByApplication_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.account = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.application = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_getStreamsByApplication_args.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_getStreamsByApplication_args');
  if (this.account !== null && this.account !== undefined) {
    output.writeFieldBegin('account', Thrift.Type.STRING, 1);
    output.writeString(this.account);
    output.writeFieldEnd();
  }
  if (this.application !== null && this.application !== undefined) {
    output.writeFieldBegin('application', Thrift.Type.STRING, 2);
    output.writeString(this.application);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_getStreamsByApplication_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.MetadataServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MetadataService_getStreamsByApplication_result.prototype = {};
MetadataService_getStreamsByApplication_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size104 = 0;
        var _rtmp3108;
        this.success = [];
        var _etype107 = 0;
        _rtmp3108 = input.readListBegin();
        _etype107 = _rtmp3108.etype;
        _size104 = _rtmp3108.size;
        for (var _i109 = 0; _i109 < _size104; ++_i109)
        {
          var elem110 = null;
          elem110 = new ttypes.Stream();
          elem110.read(input);
          this.success.push(elem110);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.MetadataServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_getStreamsByApplication_result.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_getStreamsByApplication_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter111 in this.success)
    {
      if (this.success.hasOwnProperty(iter111))
      {
        iter111 = this.success[iter111];
        iter111.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_getDatasetsByApplication_args = function(args) {
  this.account = null;
  this.application = null;
  if (args) {
    if (args.account !== undefined) {
      this.account = args.account;
    }
    if (args.application !== undefined) {
      this.application = args.application;
    }
  }
};
MetadataService_getDatasetsByApplication_args.prototype = {};
MetadataService_getDatasetsByApplication_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.account = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.application = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_getDatasetsByApplication_args.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_getDatasetsByApplication_args');
  if (this.account !== null && this.account !== undefined) {
    output.writeFieldBegin('account', Thrift.Type.STRING, 1);
    output.writeString(this.account);
    output.writeFieldEnd();
  }
  if (this.application !== null && this.application !== undefined) {
    output.writeFieldBegin('application', Thrift.Type.STRING, 2);
    output.writeString(this.application);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_getDatasetsByApplication_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.MetadataServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MetadataService_getDatasetsByApplication_result.prototype = {};
MetadataService_getDatasetsByApplication_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size112 = 0;
        var _rtmp3116;
        this.success = [];
        var _etype115 = 0;
        _rtmp3116 = input.readListBegin();
        _etype115 = _rtmp3116.etype;
        _size112 = _rtmp3116.size;
        for (var _i117 = 0; _i117 < _size112; ++_i117)
        {
          var elem118 = null;
          elem118 = new ttypes.Dataset();
          elem118.read(input);
          this.success.push(elem118);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.MetadataServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_getDatasetsByApplication_result.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_getDatasetsByApplication_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter119 in this.success)
    {
      if (this.success.hasOwnProperty(iter119))
      {
        iter119 = this.success[iter119];
        iter119.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_getFlowsByStream_args = function(args) {
  this.account = null;
  this.stream = null;
  if (args) {
    if (args.account !== undefined) {
      this.account = args.account;
    }
    if (args.stream !== undefined) {
      this.stream = args.stream;
    }
  }
};
MetadataService_getFlowsByStream_args.prototype = {};
MetadataService_getFlowsByStream_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.account = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.stream = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_getFlowsByStream_args.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_getFlowsByStream_args');
  if (this.account !== null && this.account !== undefined) {
    output.writeFieldBegin('account', Thrift.Type.STRING, 1);
    output.writeString(this.account);
    output.writeFieldEnd();
  }
  if (this.stream !== null && this.stream !== undefined) {
    output.writeFieldBegin('stream', Thrift.Type.STRING, 2);
    output.writeString(this.stream);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_getFlowsByStream_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.MetadataServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MetadataService_getFlowsByStream_result.prototype = {};
MetadataService_getFlowsByStream_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size120 = 0;
        var _rtmp3124;
        this.success = [];
        var _etype123 = 0;
        _rtmp3124 = input.readListBegin();
        _etype123 = _rtmp3124.etype;
        _size120 = _rtmp3124.size;
        for (var _i125 = 0; _i125 < _size120; ++_i125)
        {
          var elem126 = null;
          elem126 = new ttypes.Flow();
          elem126.read(input);
          this.success.push(elem126);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.MetadataServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_getFlowsByStream_result.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_getFlowsByStream_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter127 in this.success)
    {
      if (this.success.hasOwnProperty(iter127))
      {
        iter127 = this.success[iter127];
        iter127.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_getFlowsByDataset_args = function(args) {
  this.account = null;
  this.dataset = null;
  if (args) {
    if (args.account !== undefined) {
      this.account = args.account;
    }
    if (args.dataset !== undefined) {
      this.dataset = args.dataset;
    }
  }
};
MetadataService_getFlowsByDataset_args.prototype = {};
MetadataService_getFlowsByDataset_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.account = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dataset = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_getFlowsByDataset_args.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_getFlowsByDataset_args');
  if (this.account !== null && this.account !== undefined) {
    output.writeFieldBegin('account', Thrift.Type.STRING, 1);
    output.writeString(this.account);
    output.writeFieldEnd();
  }
  if (this.dataset !== null && this.dataset !== undefined) {
    output.writeFieldBegin('dataset', Thrift.Type.STRING, 2);
    output.writeString(this.dataset);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_getFlowsByDataset_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.MetadataServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MetadataService_getFlowsByDataset_result.prototype = {};
MetadataService_getFlowsByDataset_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size128 = 0;
        var _rtmp3132;
        this.success = [];
        var _etype131 = 0;
        _rtmp3132 = input.readListBegin();
        _etype131 = _rtmp3132.etype;
        _size128 = _rtmp3132.size;
        for (var _i133 = 0; _i133 < _size128; ++_i133)
        {
          var elem134 = null;
          elem134 = new ttypes.Flow();
          elem134.read(input);
          this.success.push(elem134);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.MetadataServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_getFlowsByDataset_result.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_getFlowsByDataset_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter135 in this.success)
    {
      if (this.success.hasOwnProperty(iter135))
      {
        iter135 = this.success[iter135];
        iter135.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_getQueriesByDataset_args = function(args) {
  this.account = null;
  this.dataset = null;
  if (args) {
    if (args.account !== undefined) {
      this.account = args.account;
    }
    if (args.dataset !== undefined) {
      this.dataset = args.dataset;
    }
  }
};
MetadataService_getQueriesByDataset_args.prototype = {};
MetadataService_getQueriesByDataset_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.account = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dataset = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_getQueriesByDataset_args.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_getQueriesByDataset_args');
  if (this.account !== null && this.account !== undefined) {
    output.writeFieldBegin('account', Thrift.Type.STRING, 1);
    output.writeString(this.account);
    output.writeFieldEnd();
  }
  if (this.dataset !== null && this.dataset !== undefined) {
    output.writeFieldBegin('dataset', Thrift.Type.STRING, 2);
    output.writeString(this.dataset);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_getQueriesByDataset_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.MetadataServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MetadataService_getQueriesByDataset_result.prototype = {};
MetadataService_getQueriesByDataset_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size136 = 0;
        var _rtmp3140;
        this.success = [];
        var _etype139 = 0;
        _rtmp3140 = input.readListBegin();
        _etype139 = _rtmp3140.etype;
        _size136 = _rtmp3140.size;
        for (var _i141 = 0; _i141 < _size136; ++_i141)
        {
          var elem142 = null;
          elem142 = new ttypes.Query();
          elem142.read(input);
          this.success.push(elem142);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.MetadataServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_getQueriesByDataset_result.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_getQueriesByDataset_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter143 in this.success)
    {
      if (this.success.hasOwnProperty(iter143))
      {
        iter143 = this.success[iter143];
        iter143.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_getMapreducesByDataset_args = function(args) {
  this.account = null;
  this.dataset = null;
  if (args) {
    if (args.account !== undefined) {
      this.account = args.account;
    }
    if (args.dataset !== undefined) {
      this.dataset = args.dataset;
    }
  }
};
MetadataService_getMapreducesByDataset_args.prototype = {};
MetadataService_getMapreducesByDataset_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.account = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dataset = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_getMapreducesByDataset_args.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_getMapreducesByDataset_args');
  if (this.account !== null && this.account !== undefined) {
    output.writeFieldBegin('account', Thrift.Type.STRING, 1);
    output.writeString(this.account);
    output.writeFieldEnd();
  }
  if (this.dataset !== null && this.dataset !== undefined) {
    output.writeFieldBegin('dataset', Thrift.Type.STRING, 2);
    output.writeString(this.dataset);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_getMapreducesByDataset_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.MetadataServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MetadataService_getMapreducesByDataset_result.prototype = {};
MetadataService_getMapreducesByDataset_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size144 = 0;
        var _rtmp3148;
        this.success = [];
        var _etype147 = 0;
        _rtmp3148 = input.readListBegin();
        _etype147 = _rtmp3148.etype;
        _size144 = _rtmp3148.size;
        for (var _i149 = 0; _i149 < _size144; ++_i149)
        {
          var elem150 = null;
          elem150 = new ttypes.Mapreduce();
          elem150.read(input);
          this.success.push(elem150);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.MetadataServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_getMapreducesByDataset_result.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_getMapreducesByDataset_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter151 in this.success)
    {
      if (this.success.hasOwnProperty(iter151))
      {
        iter151 = this.success[iter151];
        iter151.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_deleteAll_args = function(args) {
  this.account = null;
  if (args) {
    if (args.account !== undefined) {
      this.account = args.account;
    }
  }
};
MetadataService_deleteAll_args.prototype = {};
MetadataService_deleteAll_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.account = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_deleteAll_args.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_deleteAll_args');
  if (this.account !== null && this.account !== undefined) {
    output.writeFieldBegin('account', Thrift.Type.STRING, 1);
    output.writeString(this.account);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataService_deleteAll_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.MetadataServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MetadataService_deleteAll_result.prototype = {};
MetadataService_deleteAll_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.MetadataServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_deleteAll_result.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_deleteAll_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetadataServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {};
};
MetadataServiceClient.prototype = {};
MetadataServiceClient.prototype.createStream = function(account, stream, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_createStream(account, stream);
};

MetadataServiceClient.prototype.send_createStream = function(account, stream) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createStream', Thrift.MessageType.CALL, this.seqid);
  var args = new MetadataService_createStream_args();
  args.account = account;
  args.stream = stream;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MetadataServiceClient.prototype.recv_createStream = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MetadataService_createStream_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createStream failed: unknown result');
};
MetadataServiceClient.prototype.assertStream = function(account, stream, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_assertStream(account, stream);
};

MetadataServiceClient.prototype.send_assertStream = function(account, stream) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('assertStream', Thrift.MessageType.CALL, this.seqid);
  var args = new MetadataService_assertStream_args();
  args.account = account;
  args.stream = stream;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MetadataServiceClient.prototype.recv_assertStream = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MetadataService_assertStream_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('assertStream failed: unknown result');
};
MetadataServiceClient.prototype.deleteStream = function(account, stream, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_deleteStream(account, stream);
};

MetadataServiceClient.prototype.send_deleteStream = function(account, stream) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteStream', Thrift.MessageType.CALL, this.seqid);
  var args = new MetadataService_deleteStream_args();
  args.account = account;
  args.stream = stream;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MetadataServiceClient.prototype.recv_deleteStream = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MetadataService_deleteStream_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deleteStream failed: unknown result');
};
MetadataServiceClient.prototype.getStreams = function(account, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getStreams(account);
};

MetadataServiceClient.prototype.send_getStreams = function(account) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getStreams', Thrift.MessageType.CALL, this.seqid);
  var args = new MetadataService_getStreams_args();
  args.account = account;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MetadataServiceClient.prototype.recv_getStreams = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MetadataService_getStreams_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getStreams failed: unknown result');
};
MetadataServiceClient.prototype.getStream = function(account, stream, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getStream(account, stream);
};

MetadataServiceClient.prototype.send_getStream = function(account, stream) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getStream', Thrift.MessageType.CALL, this.seqid);
  var args = new MetadataService_getStream_args();
  args.account = account;
  args.stream = stream;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MetadataServiceClient.prototype.recv_getStream = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MetadataService_getStream_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getStream failed: unknown result');
};
MetadataServiceClient.prototype.createDataset = function(account, dataset, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_createDataset(account, dataset);
};

MetadataServiceClient.prototype.send_createDataset = function(account, dataset) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createDataset', Thrift.MessageType.CALL, this.seqid);
  var args = new MetadataService_createDataset_args();
  args.account = account;
  args.dataset = dataset;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MetadataServiceClient.prototype.recv_createDataset = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MetadataService_createDataset_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createDataset failed: unknown result');
};
MetadataServiceClient.prototype.assertDataset = function(account, dataset, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_assertDataset(account, dataset);
};

MetadataServiceClient.prototype.send_assertDataset = function(account, dataset) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('assertDataset', Thrift.MessageType.CALL, this.seqid);
  var args = new MetadataService_assertDataset_args();
  args.account = account;
  args.dataset = dataset;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MetadataServiceClient.prototype.recv_assertDataset = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MetadataService_assertDataset_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('assertDataset failed: unknown result');
};
MetadataServiceClient.prototype.deleteDataset = function(account, dataset, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_deleteDataset(account, dataset);
};

MetadataServiceClient.prototype.send_deleteDataset = function(account, dataset) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteDataset', Thrift.MessageType.CALL, this.seqid);
  var args = new MetadataService_deleteDataset_args();
  args.account = account;
  args.dataset = dataset;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MetadataServiceClient.prototype.recv_deleteDataset = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MetadataService_deleteDataset_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deleteDataset failed: unknown result');
};
MetadataServiceClient.prototype.getDatasets = function(account, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getDatasets(account);
};

MetadataServiceClient.prototype.send_getDatasets = function(account) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getDatasets', Thrift.MessageType.CALL, this.seqid);
  var args = new MetadataService_getDatasets_args();
  args.account = account;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MetadataServiceClient.prototype.recv_getDatasets = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MetadataService_getDatasets_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getDatasets failed: unknown result');
};
MetadataServiceClient.prototype.getDataset = function(account, dataset, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getDataset(account, dataset);
};

MetadataServiceClient.prototype.send_getDataset = function(account, dataset) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getDataset', Thrift.MessageType.CALL, this.seqid);
  var args = new MetadataService_getDataset_args();
  args.account = account;
  args.dataset = dataset;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MetadataServiceClient.prototype.recv_getDataset = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MetadataService_getDataset_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getDataset failed: unknown result');
};
MetadataServiceClient.prototype.createApplication = function(account, application, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_createApplication(account, application);
};

MetadataServiceClient.prototype.send_createApplication = function(account, application) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createApplication', Thrift.MessageType.CALL, this.seqid);
  var args = new MetadataService_createApplication_args();
  args.account = account;
  args.application = application;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MetadataServiceClient.prototype.recv_createApplication = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MetadataService_createApplication_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createApplication failed: unknown result');
};
MetadataServiceClient.prototype.updateApplication = function(account, application, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_updateApplication(account, application);
};

MetadataServiceClient.prototype.send_updateApplication = function(account, application) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateApplication', Thrift.MessageType.CALL, this.seqid);
  var args = new MetadataService_updateApplication_args();
  args.account = account;
  args.application = application;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MetadataServiceClient.prototype.recv_updateApplication = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MetadataService_updateApplication_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateApplication failed: unknown result');
};
MetadataServiceClient.prototype.deleteApplication = function(account, application, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_deleteApplication(account, application);
};

MetadataServiceClient.prototype.send_deleteApplication = function(account, application) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteApplication', Thrift.MessageType.CALL, this.seqid);
  var args = new MetadataService_deleteApplication_args();
  args.account = account;
  args.application = application;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MetadataServiceClient.prototype.recv_deleteApplication = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MetadataService_deleteApplication_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deleteApplication failed: unknown result');
};
MetadataServiceClient.prototype.getApplications = function(account, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getApplications(account);
};

MetadataServiceClient.prototype.send_getApplications = function(account) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getApplications', Thrift.MessageType.CALL, this.seqid);
  var args = new MetadataService_getApplications_args();
  args.account = account;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MetadataServiceClient.prototype.recv_getApplications = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MetadataService_getApplications_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getApplications failed: unknown result');
};
MetadataServiceClient.prototype.getApplication = function(account, application, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getApplication(account, application);
};

MetadataServiceClient.prototype.send_getApplication = function(account, application) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getApplication', Thrift.MessageType.CALL, this.seqid);
  var args = new MetadataService_getApplication_args();
  args.account = account;
  args.application = application;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MetadataServiceClient.prototype.recv_getApplication = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MetadataService_getApplication_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getApplication failed: unknown result');
};
MetadataServiceClient.prototype.createQuery = function(account, query, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_createQuery(account, query);
};

MetadataServiceClient.prototype.send_createQuery = function(account, query) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createQuery', Thrift.MessageType.CALL, this.seqid);
  var args = new MetadataService_createQuery_args();
  args.account = account;
  args.query = query;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MetadataServiceClient.prototype.recv_createQuery = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MetadataService_createQuery_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createQuery failed: unknown result');
};
MetadataServiceClient.prototype.updateQuery = function(account, query, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_updateQuery(account, query);
};

MetadataServiceClient.prototype.send_updateQuery = function(account, query) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateQuery', Thrift.MessageType.CALL, this.seqid);
  var args = new MetadataService_updateQuery_args();
  args.account = account;
  args.query = query;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MetadataServiceClient.prototype.recv_updateQuery = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MetadataService_updateQuery_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateQuery failed: unknown result');
};
MetadataServiceClient.prototype.addDatasetToQuery = function(account, app, query, dataset, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_addDatasetToQuery(account, app, query, dataset);
};

MetadataServiceClient.prototype.send_addDatasetToQuery = function(account, app, query, dataset) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addDatasetToQuery', Thrift.MessageType.CALL, this.seqid);
  var args = new MetadataService_addDatasetToQuery_args();
  args.account = account;
  args.app = app;
  args.query = query;
  args.dataset = dataset;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MetadataServiceClient.prototype.recv_addDatasetToQuery = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MetadataService_addDatasetToQuery_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('addDatasetToQuery failed: unknown result');
};
MetadataServiceClient.prototype.deleteQuery = function(account, query, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_deleteQuery(account, query);
};

MetadataServiceClient.prototype.send_deleteQuery = function(account, query) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteQuery', Thrift.MessageType.CALL, this.seqid);
  var args = new MetadataService_deleteQuery_args();
  args.account = account;
  args.query = query;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MetadataServiceClient.prototype.recv_deleteQuery = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MetadataService_deleteQuery_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deleteQuery failed: unknown result');
};
MetadataServiceClient.prototype.getQueries = function(account, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getQueries(account);
};

MetadataServiceClient.prototype.send_getQueries = function(account) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getQueries', Thrift.MessageType.CALL, this.seqid);
  var args = new MetadataService_getQueries_args();
  args.account = account;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MetadataServiceClient.prototype.recv_getQueries = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MetadataService_getQueries_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getQueries failed: unknown result');
};
MetadataServiceClient.prototype.getQuery = function(account, query, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getQuery(account, query);
};

MetadataServiceClient.prototype.send_getQuery = function(account, query) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getQuery', Thrift.MessageType.CALL, this.seqid);
  var args = new MetadataService_getQuery_args();
  args.account = account;
  args.query = query;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MetadataServiceClient.prototype.recv_getQuery = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MetadataService_getQuery_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getQuery failed: unknown result');
};
MetadataServiceClient.prototype.createMapreduce = function(account, mapreduce, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_createMapreduce(account, mapreduce);
};

MetadataServiceClient.prototype.send_createMapreduce = function(account, mapreduce) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createMapreduce', Thrift.MessageType.CALL, this.seqid);
  var args = new MetadataService_createMapreduce_args();
  args.account = account;
  args.mapreduce = mapreduce;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MetadataServiceClient.prototype.recv_createMapreduce = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MetadataService_createMapreduce_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createMapreduce failed: unknown result');
};
MetadataServiceClient.prototype.updateMapreduce = function(account, mapreduce, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_updateMapreduce(account, mapreduce);
};

MetadataServiceClient.prototype.send_updateMapreduce = function(account, mapreduce) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateMapreduce', Thrift.MessageType.CALL, this.seqid);
  var args = new MetadataService_updateMapreduce_args();
  args.account = account;
  args.mapreduce = mapreduce;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MetadataServiceClient.prototype.recv_updateMapreduce = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MetadataService_updateMapreduce_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateMapreduce failed: unknown result');
};
MetadataServiceClient.prototype.addDatasetToMapreduce = function(account, app, mapreduce, dataset, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_addDatasetToMapreduce(account, app, mapreduce, dataset);
};

MetadataServiceClient.prototype.send_addDatasetToMapreduce = function(account, app, mapreduce, dataset) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addDatasetToMapreduce', Thrift.MessageType.CALL, this.seqid);
  var args = new MetadataService_addDatasetToMapreduce_args();
  args.account = account;
  args.app = app;
  args.mapreduce = mapreduce;
  args.dataset = dataset;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MetadataServiceClient.prototype.recv_addDatasetToMapreduce = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MetadataService_addDatasetToMapreduce_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('addDatasetToMapreduce failed: unknown result');
};
MetadataServiceClient.prototype.deleteMapreduce = function(account, mapreduce, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_deleteMapreduce(account, mapreduce);
};

MetadataServiceClient.prototype.send_deleteMapreduce = function(account, mapreduce) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteMapreduce', Thrift.MessageType.CALL, this.seqid);
  var args = new MetadataService_deleteMapreduce_args();
  args.account = account;
  args.mapreduce = mapreduce;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MetadataServiceClient.prototype.recv_deleteMapreduce = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MetadataService_deleteMapreduce_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deleteMapreduce failed: unknown result');
};
MetadataServiceClient.prototype.getMapreduces = function(account, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getMapreduces(account);
};

MetadataServiceClient.prototype.send_getMapreduces = function(account) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getMapreduces', Thrift.MessageType.CALL, this.seqid);
  var args = new MetadataService_getMapreduces_args();
  args.account = account;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MetadataServiceClient.prototype.recv_getMapreduces = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MetadataService_getMapreduces_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getMapreduces failed: unknown result');
};
MetadataServiceClient.prototype.getMapreduce = function(account, mapreduce, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getMapreduce(account, mapreduce);
};

MetadataServiceClient.prototype.send_getMapreduce = function(account, mapreduce) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getMapreduce', Thrift.MessageType.CALL, this.seqid);
  var args = new MetadataService_getMapreduce_args();
  args.account = account;
  args.mapreduce = mapreduce;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MetadataServiceClient.prototype.recv_getMapreduce = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MetadataService_getMapreduce_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getMapreduce failed: unknown result');
};
MetadataServiceClient.prototype.createFlow = function(account, flow, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_createFlow(account, flow);
};

MetadataServiceClient.prototype.send_createFlow = function(account, flow) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createFlow', Thrift.MessageType.CALL, this.seqid);
  var args = new MetadataService_createFlow_args();
  args.account = account;
  args.flow = flow;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MetadataServiceClient.prototype.recv_createFlow = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MetadataService_createFlow_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createFlow failed: unknown result');
};
MetadataServiceClient.prototype.updateFlow = function(account, flow, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_updateFlow(account, flow);
};

MetadataServiceClient.prototype.send_updateFlow = function(account, flow) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateFlow', Thrift.MessageType.CALL, this.seqid);
  var args = new MetadataService_updateFlow_args();
  args.account = account;
  args.flow = flow;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MetadataServiceClient.prototype.recv_updateFlow = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MetadataService_updateFlow_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateFlow failed: unknown result');
};
MetadataServiceClient.prototype.addDatasetToFlow = function(account, app, flowid, dataset, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_addDatasetToFlow(account, app, flowid, dataset);
};

MetadataServiceClient.prototype.send_addDatasetToFlow = function(account, app, flowid, dataset) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addDatasetToFlow', Thrift.MessageType.CALL, this.seqid);
  var args = new MetadataService_addDatasetToFlow_args();
  args.account = account;
  args.app = app;
  args.flowid = flowid;
  args.dataset = dataset;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MetadataServiceClient.prototype.recv_addDatasetToFlow = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MetadataService_addDatasetToFlow_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('addDatasetToFlow failed: unknown result');
};
MetadataServiceClient.prototype.addStreamToFlow = function(account, app, flowid, stream, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_addStreamToFlow(account, app, flowid, stream);
};

MetadataServiceClient.prototype.send_addStreamToFlow = function(account, app, flowid, stream) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addStreamToFlow', Thrift.MessageType.CALL, this.seqid);
  var args = new MetadataService_addStreamToFlow_args();
  args.account = account;
  args.app = app;
  args.flowid = flowid;
  args.stream = stream;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MetadataServiceClient.prototype.recv_addStreamToFlow = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MetadataService_addStreamToFlow_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('addStreamToFlow failed: unknown result');
};
MetadataServiceClient.prototype.deleteFlow = function(account, app, flowid, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_deleteFlow(account, app, flowid);
};

MetadataServiceClient.prototype.send_deleteFlow = function(account, app, flowid) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteFlow', Thrift.MessageType.CALL, this.seqid);
  var args = new MetadataService_deleteFlow_args();
  args.account = account;
  args.app = app;
  args.flowid = flowid;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MetadataServiceClient.prototype.recv_deleteFlow = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MetadataService_deleteFlow_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deleteFlow failed: unknown result');
};
MetadataServiceClient.prototype.getFlows = function(account, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getFlows(account);
};

MetadataServiceClient.prototype.send_getFlows = function(account) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getFlows', Thrift.MessageType.CALL, this.seqid);
  var args = new MetadataService_getFlows_args();
  args.account = account;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MetadataServiceClient.prototype.recv_getFlows = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MetadataService_getFlows_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getFlows failed: unknown result');
};
MetadataServiceClient.prototype.getFlow = function(account, app, flowid, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getFlow(account, app, flowid);
};

MetadataServiceClient.prototype.send_getFlow = function(account, app, flowid) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getFlow', Thrift.MessageType.CALL, this.seqid);
  var args = new MetadataService_getFlow_args();
  args.account = account;
  args.app = app;
  args.flowid = flowid;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MetadataServiceClient.prototype.recv_getFlow = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MetadataService_getFlow_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getFlow failed: unknown result');
};
MetadataServiceClient.prototype.getFlowsByApplication = function(account, application, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getFlowsByApplication(account, application);
};

MetadataServiceClient.prototype.send_getFlowsByApplication = function(account, application) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getFlowsByApplication', Thrift.MessageType.CALL, this.seqid);
  var args = new MetadataService_getFlowsByApplication_args();
  args.account = account;
  args.application = application;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MetadataServiceClient.prototype.recv_getFlowsByApplication = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MetadataService_getFlowsByApplication_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getFlowsByApplication failed: unknown result');
};
MetadataServiceClient.prototype.getQueriesByApplication = function(account, application, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getQueriesByApplication(account, application);
};

MetadataServiceClient.prototype.send_getQueriesByApplication = function(account, application) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getQueriesByApplication', Thrift.MessageType.CALL, this.seqid);
  var args = new MetadataService_getQueriesByApplication_args();
  args.account = account;
  args.application = application;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MetadataServiceClient.prototype.recv_getQueriesByApplication = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MetadataService_getQueriesByApplication_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getQueriesByApplication failed: unknown result');
};
MetadataServiceClient.prototype.getMapreducesByApplication = function(account, application, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getMapreducesByApplication(account, application);
};

MetadataServiceClient.prototype.send_getMapreducesByApplication = function(account, application) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getMapreducesByApplication', Thrift.MessageType.CALL, this.seqid);
  var args = new MetadataService_getMapreducesByApplication_args();
  args.account = account;
  args.application = application;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MetadataServiceClient.prototype.recv_getMapreducesByApplication = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MetadataService_getMapreducesByApplication_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getMapreducesByApplication failed: unknown result');
};
MetadataServiceClient.prototype.getStreamsByApplication = function(account, application, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getStreamsByApplication(account, application);
};

MetadataServiceClient.prototype.send_getStreamsByApplication = function(account, application) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getStreamsByApplication', Thrift.MessageType.CALL, this.seqid);
  var args = new MetadataService_getStreamsByApplication_args();
  args.account = account;
  args.application = application;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MetadataServiceClient.prototype.recv_getStreamsByApplication = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MetadataService_getStreamsByApplication_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getStreamsByApplication failed: unknown result');
};
MetadataServiceClient.prototype.getDatasetsByApplication = function(account, application, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getDatasetsByApplication(account, application);
};

MetadataServiceClient.prototype.send_getDatasetsByApplication = function(account, application) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getDatasetsByApplication', Thrift.MessageType.CALL, this.seqid);
  var args = new MetadataService_getDatasetsByApplication_args();
  args.account = account;
  args.application = application;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MetadataServiceClient.prototype.recv_getDatasetsByApplication = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MetadataService_getDatasetsByApplication_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getDatasetsByApplication failed: unknown result');
};
MetadataServiceClient.prototype.getFlowsByStream = function(account, stream, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getFlowsByStream(account, stream);
};

MetadataServiceClient.prototype.send_getFlowsByStream = function(account, stream) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getFlowsByStream', Thrift.MessageType.CALL, this.seqid);
  var args = new MetadataService_getFlowsByStream_args();
  args.account = account;
  args.stream = stream;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MetadataServiceClient.prototype.recv_getFlowsByStream = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MetadataService_getFlowsByStream_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getFlowsByStream failed: unknown result');
};
MetadataServiceClient.prototype.getFlowsByDataset = function(account, dataset, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getFlowsByDataset(account, dataset);
};

MetadataServiceClient.prototype.send_getFlowsByDataset = function(account, dataset) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getFlowsByDataset', Thrift.MessageType.CALL, this.seqid);
  var args = new MetadataService_getFlowsByDataset_args();
  args.account = account;
  args.dataset = dataset;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MetadataServiceClient.prototype.recv_getFlowsByDataset = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MetadataService_getFlowsByDataset_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getFlowsByDataset failed: unknown result');
};
MetadataServiceClient.prototype.getQueriesByDataset = function(account, dataset, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getQueriesByDataset(account, dataset);
};

MetadataServiceClient.prototype.send_getQueriesByDataset = function(account, dataset) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getQueriesByDataset', Thrift.MessageType.CALL, this.seqid);
  var args = new MetadataService_getQueriesByDataset_args();
  args.account = account;
  args.dataset = dataset;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MetadataServiceClient.prototype.recv_getQueriesByDataset = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MetadataService_getQueriesByDataset_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getQueriesByDataset failed: unknown result');
};
MetadataServiceClient.prototype.getMapreducesByDataset = function(account, dataset, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getMapreducesByDataset(account, dataset);
};

MetadataServiceClient.prototype.send_getMapreducesByDataset = function(account, dataset) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getMapreducesByDataset', Thrift.MessageType.CALL, this.seqid);
  var args = new MetadataService_getMapreducesByDataset_args();
  args.account = account;
  args.dataset = dataset;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MetadataServiceClient.prototype.recv_getMapreducesByDataset = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MetadataService_getMapreducesByDataset_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getMapreducesByDataset failed: unknown result');
};
MetadataServiceClient.prototype.deleteAll = function(account, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_deleteAll(account);
};

MetadataServiceClient.prototype.send_deleteAll = function(account) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteAll', Thrift.MessageType.CALL, this.seqid);
  var args = new MetadataService_deleteAll_args();
  args.account = account;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MetadataServiceClient.prototype.recv_deleteAll = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MetadataService_deleteAll_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
MetadataServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
MetadataServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

MetadataServiceProcessor.prototype.process_createStream = function(seqid, input, output) {
  var args = new MetadataService_createStream_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.createStream(args.account, args.stream, function (err, result) {
    var result = new MetadataService_createStream_result((err != null ? err : {success: result}));
    output.writeMessageBegin("createStream", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MetadataServiceProcessor.prototype.process_assertStream = function(seqid, input, output) {
  var args = new MetadataService_assertStream_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.assertStream(args.account, args.stream, function (err, result) {
    var result = new MetadataService_assertStream_result((err != null ? err : {success: result}));
    output.writeMessageBegin("assertStream", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MetadataServiceProcessor.prototype.process_deleteStream = function(seqid, input, output) {
  var args = new MetadataService_deleteStream_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.deleteStream(args.account, args.stream, function (err, result) {
    var result = new MetadataService_deleteStream_result((err != null ? err : {success: result}));
    output.writeMessageBegin("deleteStream", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MetadataServiceProcessor.prototype.process_getStreams = function(seqid, input, output) {
  var args = new MetadataService_getStreams_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getStreams(args.account, function (err, result) {
    var result = new MetadataService_getStreams_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getStreams", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MetadataServiceProcessor.prototype.process_getStream = function(seqid, input, output) {
  var args = new MetadataService_getStream_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getStream(args.account, args.stream, function (err, result) {
    var result = new MetadataService_getStream_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getStream", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MetadataServiceProcessor.prototype.process_createDataset = function(seqid, input, output) {
  var args = new MetadataService_createDataset_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.createDataset(args.account, args.dataset, function (err, result) {
    var result = new MetadataService_createDataset_result((err != null ? err : {success: result}));
    output.writeMessageBegin("createDataset", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MetadataServiceProcessor.prototype.process_assertDataset = function(seqid, input, output) {
  var args = new MetadataService_assertDataset_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.assertDataset(args.account, args.dataset, function (err, result) {
    var result = new MetadataService_assertDataset_result((err != null ? err : {success: result}));
    output.writeMessageBegin("assertDataset", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MetadataServiceProcessor.prototype.process_deleteDataset = function(seqid, input, output) {
  var args = new MetadataService_deleteDataset_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.deleteDataset(args.account, args.dataset, function (err, result) {
    var result = new MetadataService_deleteDataset_result((err != null ? err : {success: result}));
    output.writeMessageBegin("deleteDataset", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MetadataServiceProcessor.prototype.process_getDatasets = function(seqid, input, output) {
  var args = new MetadataService_getDatasets_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getDatasets(args.account, function (err, result) {
    var result = new MetadataService_getDatasets_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getDatasets", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MetadataServiceProcessor.prototype.process_getDataset = function(seqid, input, output) {
  var args = new MetadataService_getDataset_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getDataset(args.account, args.dataset, function (err, result) {
    var result = new MetadataService_getDataset_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getDataset", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MetadataServiceProcessor.prototype.process_createApplication = function(seqid, input, output) {
  var args = new MetadataService_createApplication_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.createApplication(args.account, args.application, function (err, result) {
    var result = new MetadataService_createApplication_result((err != null ? err : {success: result}));
    output.writeMessageBegin("createApplication", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MetadataServiceProcessor.prototype.process_updateApplication = function(seqid, input, output) {
  var args = new MetadataService_updateApplication_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.updateApplication(args.account, args.application, function (err, result) {
    var result = new MetadataService_updateApplication_result((err != null ? err : {success: result}));
    output.writeMessageBegin("updateApplication", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MetadataServiceProcessor.prototype.process_deleteApplication = function(seqid, input, output) {
  var args = new MetadataService_deleteApplication_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.deleteApplication(args.account, args.application, function (err, result) {
    var result = new MetadataService_deleteApplication_result((err != null ? err : {success: result}));
    output.writeMessageBegin("deleteApplication", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MetadataServiceProcessor.prototype.process_getApplications = function(seqid, input, output) {
  var args = new MetadataService_getApplications_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getApplications(args.account, function (err, result) {
    var result = new MetadataService_getApplications_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getApplications", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MetadataServiceProcessor.prototype.process_getApplication = function(seqid, input, output) {
  var args = new MetadataService_getApplication_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getApplication(args.account, args.application, function (err, result) {
    var result = new MetadataService_getApplication_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getApplication", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MetadataServiceProcessor.prototype.process_createQuery = function(seqid, input, output) {
  var args = new MetadataService_createQuery_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.createQuery(args.account, args.query, function (err, result) {
    var result = new MetadataService_createQuery_result((err != null ? err : {success: result}));
    output.writeMessageBegin("createQuery", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MetadataServiceProcessor.prototype.process_updateQuery = function(seqid, input, output) {
  var args = new MetadataService_updateQuery_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.updateQuery(args.account, args.query, function (err, result) {
    var result = new MetadataService_updateQuery_result((err != null ? err : {success: result}));
    output.writeMessageBegin("updateQuery", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MetadataServiceProcessor.prototype.process_addDatasetToQuery = function(seqid, input, output) {
  var args = new MetadataService_addDatasetToQuery_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.addDatasetToQuery(args.account, args.app, args.query, args.dataset, function (err, result) {
    var result = new MetadataService_addDatasetToQuery_result((err != null ? err : {success: result}));
    output.writeMessageBegin("addDatasetToQuery", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MetadataServiceProcessor.prototype.process_deleteQuery = function(seqid, input, output) {
  var args = new MetadataService_deleteQuery_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.deleteQuery(args.account, args.query, function (err, result) {
    var result = new MetadataService_deleteQuery_result((err != null ? err : {success: result}));
    output.writeMessageBegin("deleteQuery", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MetadataServiceProcessor.prototype.process_getQueries = function(seqid, input, output) {
  var args = new MetadataService_getQueries_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getQueries(args.account, function (err, result) {
    var result = new MetadataService_getQueries_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getQueries", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MetadataServiceProcessor.prototype.process_getQuery = function(seqid, input, output) {
  var args = new MetadataService_getQuery_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getQuery(args.account, args.query, function (err, result) {
    var result = new MetadataService_getQuery_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getQuery", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MetadataServiceProcessor.prototype.process_createMapreduce = function(seqid, input, output) {
  var args = new MetadataService_createMapreduce_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.createMapreduce(args.account, args.mapreduce, function (err, result) {
    var result = new MetadataService_createMapreduce_result((err != null ? err : {success: result}));
    output.writeMessageBegin("createMapreduce", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MetadataServiceProcessor.prototype.process_updateMapreduce = function(seqid, input, output) {
  var args = new MetadataService_updateMapreduce_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.updateMapreduce(args.account, args.mapreduce, function (err, result) {
    var result = new MetadataService_updateMapreduce_result((err != null ? err : {success: result}));
    output.writeMessageBegin("updateMapreduce", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MetadataServiceProcessor.prototype.process_addDatasetToMapreduce = function(seqid, input, output) {
  var args = new MetadataService_addDatasetToMapreduce_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.addDatasetToMapreduce(args.account, args.app, args.mapreduce, args.dataset, function (err, result) {
    var result = new MetadataService_addDatasetToMapreduce_result((err != null ? err : {success: result}));
    output.writeMessageBegin("addDatasetToMapreduce", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MetadataServiceProcessor.prototype.process_deleteMapreduce = function(seqid, input, output) {
  var args = new MetadataService_deleteMapreduce_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.deleteMapreduce(args.account, args.mapreduce, function (err, result) {
    var result = new MetadataService_deleteMapreduce_result((err != null ? err : {success: result}));
    output.writeMessageBegin("deleteMapreduce", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MetadataServiceProcessor.prototype.process_getMapreduces = function(seqid, input, output) {
  var args = new MetadataService_getMapreduces_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getMapreduces(args.account, function (err, result) {
    var result = new MetadataService_getMapreduces_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getMapreduces", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MetadataServiceProcessor.prototype.process_getMapreduce = function(seqid, input, output) {
  var args = new MetadataService_getMapreduce_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getMapreduce(args.account, args.mapreduce, function (err, result) {
    var result = new MetadataService_getMapreduce_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getMapreduce", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MetadataServiceProcessor.prototype.process_createFlow = function(seqid, input, output) {
  var args = new MetadataService_createFlow_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.createFlow(args.account, args.flow, function (err, result) {
    var result = new MetadataService_createFlow_result((err != null ? err : {success: result}));
    output.writeMessageBegin("createFlow", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MetadataServiceProcessor.prototype.process_updateFlow = function(seqid, input, output) {
  var args = new MetadataService_updateFlow_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.updateFlow(args.account, args.flow, function (err, result) {
    var result = new MetadataService_updateFlow_result((err != null ? err : {success: result}));
    output.writeMessageBegin("updateFlow", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MetadataServiceProcessor.prototype.process_addDatasetToFlow = function(seqid, input, output) {
  var args = new MetadataService_addDatasetToFlow_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.addDatasetToFlow(args.account, args.app, args.flowid, args.dataset, function (err, result) {
    var result = new MetadataService_addDatasetToFlow_result((err != null ? err : {success: result}));
    output.writeMessageBegin("addDatasetToFlow", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MetadataServiceProcessor.prototype.process_addStreamToFlow = function(seqid, input, output) {
  var args = new MetadataService_addStreamToFlow_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.addStreamToFlow(args.account, args.app, args.flowid, args.stream, function (err, result) {
    var result = new MetadataService_addStreamToFlow_result((err != null ? err : {success: result}));
    output.writeMessageBegin("addStreamToFlow", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MetadataServiceProcessor.prototype.process_deleteFlow = function(seqid, input, output) {
  var args = new MetadataService_deleteFlow_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.deleteFlow(args.account, args.app, args.flowid, function (err, result) {
    var result = new MetadataService_deleteFlow_result((err != null ? err : {success: result}));
    output.writeMessageBegin("deleteFlow", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MetadataServiceProcessor.prototype.process_getFlows = function(seqid, input, output) {
  var args = new MetadataService_getFlows_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getFlows(args.account, function (err, result) {
    var result = new MetadataService_getFlows_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getFlows", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MetadataServiceProcessor.prototype.process_getFlow = function(seqid, input, output) {
  var args = new MetadataService_getFlow_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getFlow(args.account, args.app, args.flowid, function (err, result) {
    var result = new MetadataService_getFlow_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getFlow", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MetadataServiceProcessor.prototype.process_getFlowsByApplication = function(seqid, input, output) {
  var args = new MetadataService_getFlowsByApplication_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getFlowsByApplication(args.account, args.application, function (err, result) {
    var result = new MetadataService_getFlowsByApplication_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getFlowsByApplication", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MetadataServiceProcessor.prototype.process_getQueriesByApplication = function(seqid, input, output) {
  var args = new MetadataService_getQueriesByApplication_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getQueriesByApplication(args.account, args.application, function (err, result) {
    var result = new MetadataService_getQueriesByApplication_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getQueriesByApplication", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MetadataServiceProcessor.prototype.process_getMapreducesByApplication = function(seqid, input, output) {
  var args = new MetadataService_getMapreducesByApplication_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getMapreducesByApplication(args.account, args.application, function (err, result) {
    var result = new MetadataService_getMapreducesByApplication_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getMapreducesByApplication", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MetadataServiceProcessor.prototype.process_getStreamsByApplication = function(seqid, input, output) {
  var args = new MetadataService_getStreamsByApplication_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getStreamsByApplication(args.account, args.application, function (err, result) {
    var result = new MetadataService_getStreamsByApplication_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getStreamsByApplication", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MetadataServiceProcessor.prototype.process_getDatasetsByApplication = function(seqid, input, output) {
  var args = new MetadataService_getDatasetsByApplication_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getDatasetsByApplication(args.account, args.application, function (err, result) {
    var result = new MetadataService_getDatasetsByApplication_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getDatasetsByApplication", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MetadataServiceProcessor.prototype.process_getFlowsByStream = function(seqid, input, output) {
  var args = new MetadataService_getFlowsByStream_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getFlowsByStream(args.account, args.stream, function (err, result) {
    var result = new MetadataService_getFlowsByStream_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getFlowsByStream", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MetadataServiceProcessor.prototype.process_getFlowsByDataset = function(seqid, input, output) {
  var args = new MetadataService_getFlowsByDataset_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getFlowsByDataset(args.account, args.dataset, function (err, result) {
    var result = new MetadataService_getFlowsByDataset_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getFlowsByDataset", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MetadataServiceProcessor.prototype.process_getQueriesByDataset = function(seqid, input, output) {
  var args = new MetadataService_getQueriesByDataset_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getQueriesByDataset(args.account, args.dataset, function (err, result) {
    var result = new MetadataService_getQueriesByDataset_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getQueriesByDataset", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MetadataServiceProcessor.prototype.process_getMapreducesByDataset = function(seqid, input, output) {
  var args = new MetadataService_getMapreducesByDataset_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getMapreducesByDataset(args.account, args.dataset, function (err, result) {
    var result = new MetadataService_getMapreducesByDataset_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getMapreducesByDataset", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MetadataServiceProcessor.prototype.process_deleteAll = function(seqid, input, output) {
  var args = new MetadataService_deleteAll_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.deleteAll(args.account, function (err, result) {
    var result = new MetadataService_deleteAll_result((err != null ? err : {success: result}));
    output.writeMessageBegin("deleteAll", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

