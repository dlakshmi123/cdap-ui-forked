/*
 * Copyright 2012-2013 Continuuity,Inc. All Rights Reserved.
 */

package com.continuuity.logging.appender.file;

import ch.qos.logback.classic.spi.ILoggingEvent;
import com.continuuity.common.conf.CConfiguration;
import com.continuuity.logging.LoggingConfiguration;
import com.continuuity.logging.appender.LogAppender;
import com.continuuity.logging.serialize.LogSchema;
import com.google.common.base.Preconditions;
import com.google.common.base.Throwables;
import com.google.inject.Inject;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.LocalFileSystem;
import org.apache.hadoop.fs.Path;
import org.slf4j.MDC;

import java.io.IOException;
import java.util.concurrent.TimeUnit;

/**
 * Logback appender that writes log events to files.
 */
public class FileLogAppender extends LogAppender {
  public static final String APPENDER_NAME = "FileLogAppender";
  public static final String IGNORE_LOG = ".IGNORE_LOG_FILE_APPENDER";

  private final Configuration hConfig;
  private final Path logBaseDir;
  private final long logFileRotationIntervalMs;
  private final int syncIntervalBytes;
  private final long retentionDurationMs;

  private LogFileWriter logFileWriter;
  private FileSystem fileSystem;

  @Inject
  public FileLogAppender(CConfiguration cConfig, Configuration hConfig) {
    setName(APPENDER_NAME);

    this.hConfig = hConfig;

    String baseDir = cConfig.get(LoggingConfiguration.LOG_BASE_DIR);
    Preconditions.checkNotNull(baseDir, "Log base dir cannot be null");
    this.logBaseDir = new Path(baseDir);

    long rotationMins = cConfig.getLong(LoggingConfiguration.LOG_FILE_ROTATION_INTERVAL_MINS,
                                      TimeUnit.MINUTES.convert(1, TimeUnit.DAYS));
    Preconditions.checkArgument(rotationMins > 0, "Log file rotation interval is invalid: %s", rotationMins);
    this.logFileRotationIntervalMs = TimeUnit.MILLISECONDS.convert(rotationMins, TimeUnit.MINUTES);

    this.syncIntervalBytes = cConfig.getInt(LoggingConfiguration.LOG_FILE_SYNC_INTERVAL_BYTES, 5 * 1024 * 1024);
    Preconditions.checkArgument(this.syncIntervalBytes > 0,
                                "Log file sync interval is invalid: %s", this.syncIntervalBytes);

    long retentionDurationDays = cConfig.getLong(LoggingConfiguration.LOG_RETENTION_DURATION_DAYS, -1);
    Preconditions.checkArgument(retentionDurationDays > 0,
                                "Log file retention duration is invalid: %s", retentionDurationDays);
    this.retentionDurationMs = TimeUnit.MILLISECONDS.convert(retentionDurationDays, TimeUnit.DAYS);
  }

  @Override
  public void start() {
    super.start();
    try {
      fileSystem = FileSystem.get(hConfig);
      // local file system's hflush() does not work. Using the raw local file system fixes it.
      // https://issues.apache.org/jira/browse/HADOOP-7844
      if (fileSystem instanceof LocalFileSystem) {
        fileSystem = ((LocalFileSystem) fileSystem).getRawFileSystem();
      }
      logFileWriter = new LogFileWriter(fileSystem, logBaseDir, new LogSchema().getAvroSchema(),
                                        syncIntervalBytes, logFileRotationIntervalMs, retentionDurationMs);
    } catch (IOException e) {
      close();
      throw Throwables.propagate(e);
    }
  }

  @Override
  protected void append(ILoggingEvent eventObject) {
    // Don't publish log messages generated by FileLogAppender itself!
    if (MDC.get(IGNORE_LOG) != null) {
      return;
    }
    MDC.put(IGNORE_LOG, "");

    try {
      logFileWriter.append(eventObject);
    } catch (IOException e) {
      throw  Throwables.propagate(e);
    } finally {
      MDC.remove(IGNORE_LOG);
    }
  }

  private void close() {
    try {
      try {
        if (logFileWriter != null) {
          logFileWriter.close();
        }
      } finally {
        if (fileSystem != null) {
          fileSystem.close();
        }
      }
    } catch (IOException e) {
      throw Throwables.propagate(e);
    }
  }

  @Override
  public void stop() {
    super.stop();
    close();
  }
}
