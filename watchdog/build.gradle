apply plugin: 'java'

smartyFacts {
    api {
        enableJavadoc()
        enableSourceJar()
    }
}

// Specify all the dependencies.
dependencies {

    compile elastic([group: 'com.continuuity', name: 'common', version: "${version}", changing: true], "common")
    compile elastic([group: 'com.continuuity', name: 'data-fabric', version: "${version}", changing: true], "data-fabric")
    testCompile files(this.project(':data-fabric').sourceSets.test.output)

    apiCompile libraries.slf4j_api

    apiCompile libraries.slf4j_api
    apiCompile libraries.google_guava
    compile libraries.google_gson
    compile libraries.google_guava
    compile libraries.google_guice
    compile libraries.google_guice_multibindings
    compile libraries.jsr_305
    compile libraries.netty
    compile libraries.slf4j_api
    compile (libraries.hadoop_minicluster) {
        exclude group: 'commons-logging'
    }
    compile libraries.twill_common
    compile libraries.twill_core
    compile (libraries.twill_yarn) {
        exclude group: 'org.apache.hadoop'
    }
    compile libraries.twill_zookeeper

    compile libraries.hadoop_annotations
    compile libraries.hadoop_auth
    compile libraries.hadoop_common
    compile libraries.hadoop_yarn_api
    compile libraries.hadoop_yarn_client
    compile libraries.hadoop_yarn_common

    testCompile libraries.junit
    testCompile(libraries.hbase94_test) {
        exclude module: 'junit'
        exclude group: 'commons-logging'
        exclude group: 'org.apache.thrift'
    }
    testCompile libraries.hadoop_minicluster
    compile libraries.continuuity_netty_http
}

/**
 * Includes API output to main and test source sets.
 */
sourceSets {
    main {
        compileClasspath += api.output
        runtimeClasspath += api.output
    }
    test {
        compileClasspath += api.output
        runtimeClasspath += api.output
    }
}

/**
 * Generates API javadoc.
 */
javadoc {
    classpath += sourceSets.api.output
}

/**
 * Use io.netty instead of org.jboss.netty
 */
configurations {
    all*.exclude group: 'org.jboss.netty', module: 'netty'
    all*.exclude group: 'asm', module: 'asm'
    all {
        // Need to enforce our version of guava, otherwise some other components with newer versions may take over
        resolutionStrategy.force libraries.google_guava
    }
}

// filter duplicated dependency for IDEA export
def isClassesDependency(module) {
     (module instanceof org.gradle.plugins.ide.idea.model.ModuleLibrary) && module.classes.iterator()[0].url.toString().contains(rootProject.name)
}

idea {
      module {
          iml.whenMerged { module ->
              module.dependencies.removeAll(module.dependencies.grep{isClassesDependency(it)})
              module.dependencies*.exported = true
          }
      }
}


