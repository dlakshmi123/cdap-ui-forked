/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.continuuity.metrics2.thrift;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class FlowArgument implements org.apache.thrift.TBase<FlowArgument, FlowArgument._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FlowArgument");

  private static final org.apache.thrift.protocol.TField ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("accountId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField APPLICATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField FLOW_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("flowId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField RUN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("runId", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField FLOWLET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("flowletId", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField INSTANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("instanceId", org.apache.thrift.protocol.TType.I32, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FlowArgumentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FlowArgumentTupleSchemeFactory());
  }

  private String accountId; // required
  private String applicationId; // required
  private String flowId; // required
  private String runId; // optional
  private String flowletId; // optional
  private int instanceId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ACCOUNT_ID((short)1, "accountId"),
    APPLICATION_ID((short)2, "applicationId"),
    FLOW_ID((short)3, "flowId"),
    RUN_ID((short)4, "runId"),
    FLOWLET_ID((short)5, "flowletId"),
    INSTANCE_ID((short)6, "instanceId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACCOUNT_ID
          return ACCOUNT_ID;
        case 2: // APPLICATION_ID
          return APPLICATION_ID;
        case 3: // FLOW_ID
          return FLOW_ID;
        case 4: // RUN_ID
          return RUN_ID;
        case 5: // FLOWLET_ID
          return FLOWLET_ID;
        case 6: // INSTANCE_ID
          return INSTANCE_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INSTANCEID_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);
  private _Fields optionals[] = {_Fields.RUN_ID,_Fields.FLOWLET_ID,_Fields.INSTANCE_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("accountId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APPLICATION_ID, new org.apache.thrift.meta_data.FieldMetaData("applicationId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FLOW_ID, new org.apache.thrift.meta_data.FieldMetaData("flowId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RUN_ID, new org.apache.thrift.meta_data.FieldMetaData("runId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FLOWLET_ID, new org.apache.thrift.meta_data.FieldMetaData("flowletId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INSTANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("instanceId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FlowArgument.class, metaDataMap);
  }

  public FlowArgument() {
  }

  public FlowArgument(
    String accountId,
    String applicationId,
    String flowId)
  {
    this();
    this.accountId = accountId;
    this.applicationId = applicationId;
    this.flowId = flowId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FlowArgument(FlowArgument other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetAccountId()) {
      this.accountId = other.accountId;
    }
    if (other.isSetApplicationId()) {
      this.applicationId = other.applicationId;
    }
    if (other.isSetFlowId()) {
      this.flowId = other.flowId;
    }
    if (other.isSetRunId()) {
      this.runId = other.runId;
    }
    if (other.isSetFlowletId()) {
      this.flowletId = other.flowletId;
    }
    this.instanceId = other.instanceId;
  }

  public FlowArgument deepCopy() {
    return new FlowArgument(this);
  }

  @Override
  public void clear() {
    this.accountId = null;
    this.applicationId = null;
    this.flowId = null;
    this.runId = null;
    this.flowletId = null;
    setInstanceIdIsSet(false);
    this.instanceId = 0;
  }

  public String getAccountId() {
    return this.accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }

  public void unsetAccountId() {
    this.accountId = null;
  }

  /** Returns true if field accountId is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountId() {
    return this.accountId != null;
  }

  public void setAccountIdIsSet(boolean value) {
    if (!value) {
      this.accountId = null;
    }
  }

  public String getApplicationId() {
    return this.applicationId;
  }

  public void setApplicationId(String applicationId) {
    this.applicationId = applicationId;
  }

  public void unsetApplicationId() {
    this.applicationId = null;
  }

  /** Returns true if field applicationId is set (has been assigned a value) and false otherwise */
  public boolean isSetApplicationId() {
    return this.applicationId != null;
  }

  public void setApplicationIdIsSet(boolean value) {
    if (!value) {
      this.applicationId = null;
    }
  }

  public String getFlowId() {
    return this.flowId;
  }

  public void setFlowId(String flowId) {
    this.flowId = flowId;
  }

  public void unsetFlowId() {
    this.flowId = null;
  }

  /** Returns true if field flowId is set (has been assigned a value) and false otherwise */
  public boolean isSetFlowId() {
    return this.flowId != null;
  }

  public void setFlowIdIsSet(boolean value) {
    if (!value) {
      this.flowId = null;
    }
  }

  public String getRunId() {
    return this.runId;
  }

  public void setRunId(String runId) {
    this.runId = runId;
  }

  public void unsetRunId() {
    this.runId = null;
  }

  /** Returns true if field runId is set (has been assigned a value) and false otherwise */
  public boolean isSetRunId() {
    return this.runId != null;
  }

  public void setRunIdIsSet(boolean value) {
    if (!value) {
      this.runId = null;
    }
  }

  public String getFlowletId() {
    return this.flowletId;
  }

  public void setFlowletId(String flowletId) {
    this.flowletId = flowletId;
  }

  public void unsetFlowletId() {
    this.flowletId = null;
  }

  /** Returns true if field flowletId is set (has been assigned a value) and false otherwise */
  public boolean isSetFlowletId() {
    return this.flowletId != null;
  }

  public void setFlowletIdIsSet(boolean value) {
    if (!value) {
      this.flowletId = null;
    }
  }

  public int getInstanceId() {
    return this.instanceId;
  }

  public void setInstanceId(int instanceId) {
    this.instanceId = instanceId;
    setInstanceIdIsSet(true);
  }

  public void unsetInstanceId() {
    __isset_bit_vector.clear(__INSTANCEID_ISSET_ID);
  }

  /** Returns true if field instanceId is set (has been assigned a value) and false otherwise */
  public boolean isSetInstanceId() {
    return __isset_bit_vector.get(__INSTANCEID_ISSET_ID);
  }

  public void setInstanceIdIsSet(boolean value) {
    __isset_bit_vector.set(__INSTANCEID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ACCOUNT_ID:
      if (value == null) {
        unsetAccountId();
      } else {
        setAccountId((String)value);
      }
      break;

    case APPLICATION_ID:
      if (value == null) {
        unsetApplicationId();
      } else {
        setApplicationId((String)value);
      }
      break;

    case FLOW_ID:
      if (value == null) {
        unsetFlowId();
      } else {
        setFlowId((String)value);
      }
      break;

    case RUN_ID:
      if (value == null) {
        unsetRunId();
      } else {
        setRunId((String)value);
      }
      break;

    case FLOWLET_ID:
      if (value == null) {
        unsetFlowletId();
      } else {
        setFlowletId((String)value);
      }
      break;

    case INSTANCE_ID:
      if (value == null) {
        unsetInstanceId();
      } else {
        setInstanceId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ACCOUNT_ID:
      return getAccountId();

    case APPLICATION_ID:
      return getApplicationId();

    case FLOW_ID:
      return getFlowId();

    case RUN_ID:
      return getRunId();

    case FLOWLET_ID:
      return getFlowletId();

    case INSTANCE_ID:
      return Integer.valueOf(getInstanceId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ACCOUNT_ID:
      return isSetAccountId();
    case APPLICATION_ID:
      return isSetApplicationId();
    case FLOW_ID:
      return isSetFlowId();
    case RUN_ID:
      return isSetRunId();
    case FLOWLET_ID:
      return isSetFlowletId();
    case INSTANCE_ID:
      return isSetInstanceId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FlowArgument)
      return this.equals((FlowArgument)that);
    return false;
  }

  public boolean equals(FlowArgument that) {
    if (that == null)
      return false;

    boolean this_present_accountId = true && this.isSetAccountId();
    boolean that_present_accountId = true && that.isSetAccountId();
    if (this_present_accountId || that_present_accountId) {
      if (!(this_present_accountId && that_present_accountId))
        return false;
      if (!this.accountId.equals(that.accountId))
        return false;
    }

    boolean this_present_applicationId = true && this.isSetApplicationId();
    boolean that_present_applicationId = true && that.isSetApplicationId();
    if (this_present_applicationId || that_present_applicationId) {
      if (!(this_present_applicationId && that_present_applicationId))
        return false;
      if (!this.applicationId.equals(that.applicationId))
        return false;
    }

    boolean this_present_flowId = true && this.isSetFlowId();
    boolean that_present_flowId = true && that.isSetFlowId();
    if (this_present_flowId || that_present_flowId) {
      if (!(this_present_flowId && that_present_flowId))
        return false;
      if (!this.flowId.equals(that.flowId))
        return false;
    }

    boolean this_present_runId = true && this.isSetRunId();
    boolean that_present_runId = true && that.isSetRunId();
    if (this_present_runId || that_present_runId) {
      if (!(this_present_runId && that_present_runId))
        return false;
      if (!this.runId.equals(that.runId))
        return false;
    }

    boolean this_present_flowletId = true && this.isSetFlowletId();
    boolean that_present_flowletId = true && that.isSetFlowletId();
    if (this_present_flowletId || that_present_flowletId) {
      if (!(this_present_flowletId && that_present_flowletId))
        return false;
      if (!this.flowletId.equals(that.flowletId))
        return false;
    }

    boolean this_present_instanceId = true && this.isSetInstanceId();
    boolean that_present_instanceId = true && that.isSetInstanceId();
    if (this_present_instanceId || that_present_instanceId) {
      if (!(this_present_instanceId && that_present_instanceId))
        return false;
      if (this.instanceId != that.instanceId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_accountId = true && (isSetAccountId());
    builder.append(present_accountId);
    if (present_accountId)
      builder.append(accountId);

    boolean present_applicationId = true && (isSetApplicationId());
    builder.append(present_applicationId);
    if (present_applicationId)
      builder.append(applicationId);

    boolean present_flowId = true && (isSetFlowId());
    builder.append(present_flowId);
    if (present_flowId)
      builder.append(flowId);

    boolean present_runId = true && (isSetRunId());
    builder.append(present_runId);
    if (present_runId)
      builder.append(runId);

    boolean present_flowletId = true && (isSetFlowletId());
    builder.append(present_flowletId);
    if (present_flowletId)
      builder.append(flowletId);

    boolean present_instanceId = true && (isSetInstanceId());
    builder.append(present_instanceId);
    if (present_instanceId)
      builder.append(instanceId);

    return builder.toHashCode();
  }

  public int compareTo(FlowArgument other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    FlowArgument typedOther = (FlowArgument)other;

    lastComparison = Boolean.valueOf(isSetAccountId()).compareTo(typedOther.isSetAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountId, typedOther.accountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplicationId()).compareTo(typedOther.isSetApplicationId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplicationId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationId, typedOther.applicationId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlowId()).compareTo(typedOther.isSetFlowId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlowId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flowId, typedOther.flowId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRunId()).compareTo(typedOther.isSetRunId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRunId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runId, typedOther.runId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlowletId()).compareTo(typedOther.isSetFlowletId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlowletId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flowletId, typedOther.flowletId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstanceId()).compareTo(typedOther.isSetInstanceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstanceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instanceId, typedOther.instanceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FlowArgument(");
    boolean first = true;

    sb.append("accountId:");
    if (this.accountId == null) {
      sb.append("null");
    } else {
      sb.append(this.accountId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("applicationId:");
    if (this.applicationId == null) {
      sb.append("null");
    } else {
      sb.append(this.applicationId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("flowId:");
    if (this.flowId == null) {
      sb.append("null");
    } else {
      sb.append(this.flowId);
    }
    first = false;
    if (isSetRunId()) {
      if (!first) sb.append(", ");
      sb.append("runId:");
      if (this.runId == null) {
        sb.append("null");
      } else {
        sb.append(this.runId);
      }
      first = false;
    }
    if (isSetFlowletId()) {
      if (!first) sb.append(", ");
      sb.append("flowletId:");
      if (this.flowletId == null) {
        sb.append("null");
      } else {
        sb.append(this.flowletId);
      }
      first = false;
    }
    if (isSetInstanceId()) {
      if (!first) sb.append(", ");
      sb.append("instanceId:");
      sb.append(this.instanceId);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FlowArgumentStandardSchemeFactory implements SchemeFactory {
    public FlowArgumentStandardScheme getScheme() {
      return new FlowArgumentStandardScheme();
    }
  }

  private static class FlowArgumentStandardScheme extends StandardScheme<FlowArgument> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FlowArgument struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.accountId = iprot.readString();
              struct.setAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // APPLICATION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.applicationId = iprot.readString();
              struct.setApplicationIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FLOW_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.flowId = iprot.readString();
              struct.setFlowIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RUN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.runId = iprot.readString();
              struct.setRunIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FLOWLET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.flowletId = iprot.readString();
              struct.setFlowletIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // INSTANCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.instanceId = iprot.readI32();
              struct.setInstanceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FlowArgument struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.accountId != null) {
        oprot.writeFieldBegin(ACCOUNT_ID_FIELD_DESC);
        oprot.writeString(struct.accountId);
        oprot.writeFieldEnd();
      }
      if (struct.applicationId != null) {
        oprot.writeFieldBegin(APPLICATION_ID_FIELD_DESC);
        oprot.writeString(struct.applicationId);
        oprot.writeFieldEnd();
      }
      if (struct.flowId != null) {
        oprot.writeFieldBegin(FLOW_ID_FIELD_DESC);
        oprot.writeString(struct.flowId);
        oprot.writeFieldEnd();
      }
      if (struct.runId != null) {
        if (struct.isSetRunId()) {
          oprot.writeFieldBegin(RUN_ID_FIELD_DESC);
          oprot.writeString(struct.runId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.flowletId != null) {
        if (struct.isSetFlowletId()) {
          oprot.writeFieldBegin(FLOWLET_ID_FIELD_DESC);
          oprot.writeString(struct.flowletId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetInstanceId()) {
        oprot.writeFieldBegin(INSTANCE_ID_FIELD_DESC);
        oprot.writeI32(struct.instanceId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FlowArgumentTupleSchemeFactory implements SchemeFactory {
    public FlowArgumentTupleScheme getScheme() {
      return new FlowArgumentTupleScheme();
    }
  }

  private static class FlowArgumentTupleScheme extends TupleScheme<FlowArgument> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FlowArgument struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAccountId()) {
        optionals.set(0);
      }
      if (struct.isSetApplicationId()) {
        optionals.set(1);
      }
      if (struct.isSetFlowId()) {
        optionals.set(2);
      }
      if (struct.isSetRunId()) {
        optionals.set(3);
      }
      if (struct.isSetFlowletId()) {
        optionals.set(4);
      }
      if (struct.isSetInstanceId()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetAccountId()) {
        oprot.writeString(struct.accountId);
      }
      if (struct.isSetApplicationId()) {
        oprot.writeString(struct.applicationId);
      }
      if (struct.isSetFlowId()) {
        oprot.writeString(struct.flowId);
      }
      if (struct.isSetRunId()) {
        oprot.writeString(struct.runId);
      }
      if (struct.isSetFlowletId()) {
        oprot.writeString(struct.flowletId);
      }
      if (struct.isSetInstanceId()) {
        oprot.writeI32(struct.instanceId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FlowArgument struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.accountId = iprot.readString();
        struct.setAccountIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.applicationId = iprot.readString();
        struct.setApplicationIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.flowId = iprot.readString();
        struct.setFlowIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.runId = iprot.readString();
        struct.setRunIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.flowletId = iprot.readString();
        struct.setFlowletIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.instanceId = iprot.readI32();
        struct.setInstanceIdIsSet(true);
      }
    }
  }

}

