/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.continuuity.metrics2.thrift;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Collection of data points for a given metric.
 */
public class Points implements org.apache.thrift.TBase<Points, Points._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Points");

  private static final org.apache.thrift.protocol.TField POINTS_FIELD_DESC = new org.apache.thrift.protocol.TField("points", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField LATEST_FIELD_DESC = new org.apache.thrift.protocol.TField("latest", org.apache.thrift.protocol.TType.MAP, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PointsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PointsTupleSchemeFactory());
  }

  private Map<String,List<Point>> points; // required
  private Map<String,Double> latest; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    POINTS((short)1, "points"),
    LATEST((short)2, "latest");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // POINTS
          return POINTS;
        case 2: // LATEST
          return LATEST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.POINTS, new org.apache.thrift.meta_data.FieldMetaData("points", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Point.class)))));
    tmpMap.put(_Fields.LATEST, new org.apache.thrift.meta_data.FieldMetaData("latest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Points.class, metaDataMap);
  }

  public Points() {
  }

  public Points(
    Map<String,List<Point>> points,
    Map<String,Double> latest)
  {
    this();
    this.points = points;
    this.latest = latest;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Points(Points other) {
    if (other.isSetPoints()) {
      Map<String,List<Point>> __this__points = new HashMap<String,List<Point>>();
      for (Map.Entry<String, List<Point>> other_element : other.points.entrySet()) {

        String other_element_key = other_element.getKey();
        List<Point> other_element_value = other_element.getValue();

        String __this__points_copy_key = other_element_key;

        List<Point> __this__points_copy_value = new ArrayList<Point>();
        for (Point other_element_value_element : other_element_value) {
          __this__points_copy_value.add(new Point(other_element_value_element));
        }

        __this__points.put(__this__points_copy_key, __this__points_copy_value);
      }
      this.points = __this__points;
    }
    if (other.isSetLatest()) {
      Map<String,Double> __this__latest = new HashMap<String,Double>();
      for (Map.Entry<String, Double> other_element : other.latest.entrySet()) {

        String other_element_key = other_element.getKey();
        Double other_element_value = other_element.getValue();

        String __this__latest_copy_key = other_element_key;

        Double __this__latest_copy_value = other_element_value;

        __this__latest.put(__this__latest_copy_key, __this__latest_copy_value);
      }
      this.latest = __this__latest;
    }
  }

  public Points deepCopy() {
    return new Points(this);
  }

  @Override
  public void clear() {
    this.points = null;
    this.latest = null;
  }

  public int getPointsSize() {
    return (this.points == null) ? 0 : this.points.size();
  }

  public void putToPoints(String key, List<Point> val) {
    if (this.points == null) {
      this.points = new HashMap<String,List<Point>>();
    }
    this.points.put(key, val);
  }

  public Map<String,List<Point>> getPoints() {
    return this.points;
  }

  public void setPoints(Map<String,List<Point>> points) {
    this.points = points;
  }

  public void unsetPoints() {
    this.points = null;
  }

  /** Returns true if field points is set (has been assigned a value) and false otherwise */
  public boolean isSetPoints() {
    return this.points != null;
  }

  public void setPointsIsSet(boolean value) {
    if (!value) {
      this.points = null;
    }
  }

  public int getLatestSize() {
    return (this.latest == null) ? 0 : this.latest.size();
  }

  public void putToLatest(String key, double val) {
    if (this.latest == null) {
      this.latest = new HashMap<String,Double>();
    }
    this.latest.put(key, val);
  }

  public Map<String,Double> getLatest() {
    return this.latest;
  }

  public void setLatest(Map<String,Double> latest) {
    this.latest = latest;
  }

  public void unsetLatest() {
    this.latest = null;
  }

  /** Returns true if field latest is set (has been assigned a value) and false otherwise */
  public boolean isSetLatest() {
    return this.latest != null;
  }

  public void setLatestIsSet(boolean value) {
    if (!value) {
      this.latest = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case POINTS:
      if (value == null) {
        unsetPoints();
      } else {
        setPoints((Map<String,List<Point>>)value);
      }
      break;

    case LATEST:
      if (value == null) {
        unsetLatest();
      } else {
        setLatest((Map<String,Double>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case POINTS:
      return getPoints();

    case LATEST:
      return getLatest();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case POINTS:
      return isSetPoints();
    case LATEST:
      return isSetLatest();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Points)
      return this.equals((Points)that);
    return false;
  }

  public boolean equals(Points that) {
    if (that == null)
      return false;

    boolean this_present_points = true && this.isSetPoints();
    boolean that_present_points = true && that.isSetPoints();
    if (this_present_points || that_present_points) {
      if (!(this_present_points && that_present_points))
        return false;
      if (!this.points.equals(that.points))
        return false;
    }

    boolean this_present_latest = true && this.isSetLatest();
    boolean that_present_latest = true && that.isSetLatest();
    if (this_present_latest || that_present_latest) {
      if (!(this_present_latest && that_present_latest))
        return false;
      if (!this.latest.equals(that.latest))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_points = true && (isSetPoints());
    builder.append(present_points);
    if (present_points)
      builder.append(points);

    boolean present_latest = true && (isSetLatest());
    builder.append(present_latest);
    if (present_latest)
      builder.append(latest);

    return builder.toHashCode();
  }

  public int compareTo(Points other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Points typedOther = (Points)other;

    lastComparison = Boolean.valueOf(isSetPoints()).compareTo(typedOther.isSetPoints());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoints()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.points, typedOther.points);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLatest()).compareTo(typedOther.isSetLatest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLatest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.latest, typedOther.latest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Points(");
    boolean first = true;

    sb.append("points:");
    if (this.points == null) {
      sb.append("null");
    } else {
      sb.append(this.points);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("latest:");
    if (this.latest == null) {
      sb.append("null");
    } else {
      sb.append(this.latest);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PointsStandardSchemeFactory implements SchemeFactory {
    public PointsStandardScheme getScheme() {
      return new PointsStandardScheme();
    }
  }

  private static class PointsStandardScheme extends StandardScheme<Points> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Points struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // POINTS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map8 = iprot.readMapBegin();
                struct.points = new HashMap<String,List<Point>>(2*_map8.size);
                for (int _i9 = 0; _i9 < _map8.size; ++_i9)
                {
                  String _key10; // optional
                  List<Point> _val11; // required
                  _key10 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TList _list12 = iprot.readListBegin();
                    _val11 = new ArrayList<Point>(_list12.size);
                    for (int _i13 = 0; _i13 < _list12.size; ++_i13)
                    {
                      Point _elem14; // required
                      _elem14 = new Point();
                      _elem14.read(iprot);
                      _val11.add(_elem14);
                    }
                    iprot.readListEnd();
                  }
                  struct.points.put(_key10, _val11);
                }
                iprot.readMapEnd();
              }
              struct.setPointsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LATEST
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map15 = iprot.readMapBegin();
                struct.latest = new HashMap<String,Double>(2*_map15.size);
                for (int _i16 = 0; _i16 < _map15.size; ++_i16)
                {
                  String _key17; // optional
                  double _val18; // required
                  _key17 = iprot.readString();
                  _val18 = iprot.readDouble();
                  struct.latest.put(_key17, _val18);
                }
                iprot.readMapEnd();
              }
              struct.setLatestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Points struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.points != null) {
        oprot.writeFieldBegin(POINTS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.points.size()));
          for (Map.Entry<String, List<Point>> _iter19 : struct.points.entrySet())
          {
            oprot.writeString(_iter19.getKey());
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter19.getValue().size()));
              for (Point _iter20 : _iter19.getValue())
              {
                _iter20.write(oprot);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.latest != null) {
        oprot.writeFieldBegin(LATEST_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, struct.latest.size()));
          for (Map.Entry<String, Double> _iter21 : struct.latest.entrySet())
          {
            oprot.writeString(_iter21.getKey());
            oprot.writeDouble(_iter21.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PointsTupleSchemeFactory implements SchemeFactory {
    public PointsTupleScheme getScheme() {
      return new PointsTupleScheme();
    }
  }

  private static class PointsTupleScheme extends TupleScheme<Points> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Points struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPoints()) {
        optionals.set(0);
      }
      if (struct.isSetLatest()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetPoints()) {
        {
          oprot.writeI32(struct.points.size());
          for (Map.Entry<String, List<Point>> _iter22 : struct.points.entrySet())
          {
            oprot.writeString(_iter22.getKey());
            {
              oprot.writeI32(_iter22.getValue().size());
              for (Point _iter23 : _iter22.getValue())
              {
                _iter23.write(oprot);
              }
            }
          }
        }
      }
      if (struct.isSetLatest()) {
        {
          oprot.writeI32(struct.latest.size());
          for (Map.Entry<String, Double> _iter24 : struct.latest.entrySet())
          {
            oprot.writeString(_iter24.getKey());
            oprot.writeDouble(_iter24.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Points struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map25 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.points = new HashMap<String,List<Point>>(2*_map25.size);
          for (int _i26 = 0; _i26 < _map25.size; ++_i26)
          {
            String _key27; // optional
            List<Point> _val28; // required
            _key27 = iprot.readString();
            {
              org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
              _val28 = new ArrayList<Point>(_list29.size);
              for (int _i30 = 0; _i30 < _list29.size; ++_i30)
              {
                Point _elem31; // required
                _elem31 = new Point();
                _elem31.read(iprot);
                _val28.add(_elem31);
              }
            }
            struct.points.put(_key27, _val28);
          }
        }
        struct.setPointsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map32 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.latest = new HashMap<String,Double>(2*_map32.size);
          for (int _i33 = 0; _i33 < _map32.size; ++_i33)
          {
            String _key34; // optional
            double _val35; // required
            _key34 = iprot.readString();
            _val35 = iprot.readDouble();
            struct.latest.put(_key34, _val35);
          }
        }
        struct.setLatestIsSet(true);
      }
    }
  }

}

