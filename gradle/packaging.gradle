if(! has('epoch')) {
 ext.epoch =  (int)System.currentTimeMillis()/1000
}
// componentName is the name used in packaging and directory layout. defaults to project name
// any project that needs to change it must set this property *before* applying this plugin
// since it is used during configuration phase
if(! has('componentName')) {
 project.ext.componentName = project.name
}

/**
 * Prepackager stages the project files into a directory that is then 
 * picked up by FPM packager to create debian or rpm packages. The 
 * staging is important as we would like to have all the necessary 
 * primary and tertiary dependencies to be pulled in. 
 */
task ('prepackager', dependsOn : ['build']) {
  def stageDir = file("$buildDir/stage-packaging")
  def componentName = project.ext.componentName
  def installDir = file("$stageDir/opt/continuuity/$componentName")

  doLast {
    copy {
      from 'bin'
      into "${installDir}/bin"
    }

    copy {
      from "$rootProject.projectDir/common/bin"
      into "${installDir}/bin"
    }

    copy {
      from 'conf'
      into "${installDir}/conf"
    }

    copy {
      from "$rootProject.projectDir/version.txt"
      into "${installDir}"
      rename("version.txt", "VERSION")
    }

    copy {
      from configurations.runtime
      from configurations.archives.allArtifacts.files
      exclude '**/*source*.jar', '**/*integration.jar', '**/*javadoc.jar'
      // Important: excluding all hadoop, hbase and protobuf libraries in favor of continuuity-hadoop-libs-* packages
      exclude '**/hadoop-*.jar'
      exclude '**/hbase-*.jar'
      exclude '**/protobuf-java-*.jar'
      into "${installDir}/lib"
    }

    // separating out from above to prevent exclude patterns matching
    copy {
      from jar.outputs.files
      into "${installDir}/lib"
    }

    copy {
      from "$rootProject.projectDir/distributions/src/LICENSE-2.0.txt"
      into "${installDir}"
    }
  }
}

import org.apache.tools.ant.filters.ReplaceTokens

task ('debianPrepackager', dependsOn: ['prepackager']) {
  def stageDir = file("$buildDir/stage-packaging")
  def componentName = project.ext.componentName
  def installDir = file("$stageDir/opt/continuuity/$componentName")

  doLast {
    File confDir = file("$projectDir/conf")
    envfiles = files { confDir.listFiles() }
    envfiles.collect { relativePath(it) }.each {
      if(it =~ /conf\/(.*)-env.sh/) {
        service = it.substring(it.indexOf("conf/") + 5, it.indexOf("-env.sh"))
        println "creating service script from template for $componentName : $service"
        copy {
          from "$rootProject.projectDir/distributions/src/debian/init.d"
          into "${stageDir}/etc/init.d"
          include "continuuity-service"
          rename 'continuuity-service', "continuuity-$service"
          filter(ReplaceTokens, tokens: [packagename: componentName, servicename: service])
        }
      }
    }
  }
}

task ('rpmPrepackager', dependsOn: ['prepackager']) {
  def stageDir = file("$buildDir/stage-packaging")
  def componentName = project.ext.componentName
  def installDir = file("$stageDir/opt/continuuity/$componentName")

  doLast {
    File confDir = file("$projectDir/conf")
    envfiles = files { confDir.listFiles() }
    envfiles.collect { relativePath(it) }.each {
      if(it =~ /conf\/(.*)-env.sh/) {
        service = it.substring(it.indexOf("conf/") + 5, it.indexOf("-env.sh"))
        println "creating service script from template for $componentName : $service"
        copy {
          from "$rootProject.projectDir/distributions/src/rpm/init.d"
          into "${stageDir}/etc/rc.d/init.d"
          include "continuuity-service"
          rename 'continuuity-service', "continuuity-$service"
          filter(ReplaceTokens, tokens: [packagename: componentName, servicename: service])
        }
      }
    }
  }
}

/**
 * Applies FPM packager to create debian or rpm packages. 
 */
apply plugin: 'fpm-packaging'

/**
 * Creates a sanitized version, if it's a SNAPSHOT, then it replaces
 * it with unix timestamp or if teamcity build number is available then
 * uses the teamcity build number.
 */
def getPomVersion = {
  def ver = rootProject.version;
  def timestamp = ext.epoch;
  def k = ver.split("-");
  def length = k.length;
  if (length == 1) {
    ver = k[0];
  } else if (length == 2) {
    if (k[1] =~ /SNAPSHOT/) {
      ver = "${k[0]}.${timestamp}";
    } else {
      ver = k[0];
    }
  } else if (length == 3) {
    ver = "${k[0]}.${timestamp}";
  }
  ver;
}

/**
 * Given a version, we extract the iteration to be used for packaging. 
 */
def getVersionIteration = {
  def iteration = rootProject.version;
  def k = iteration.split("-");
  def length = k.length;
  if (length == 1) {
    iteration = "1";
  } else if (length == 2) {
    if (k[1] =~ /SNAPSHOT/) {
      iteration = "1";
    } else {
      iteration = k[1];
    }
  } else if (length == 3) {
    iteration = k[1];
  }
  iteration;
}



/**
 * Generates debian package.
 */
packaging {
  baseDir = "$project.buildDir/stage-packaging"
  dependencies = [
                   'continuuity'
                 ]
  extraOptions = [
                   '--name': "continuuity-$componentName",
                   '--vendor': 'Continuuity Inc.',
                   '--maintainer': 'support@continuuity.com',
                   '--license': 'Copyright 2012-2013 Continuuity,Inc. All Rights Reserved.',
                   '--description': 'Component of Continuuity Enterprise Reactor',
                   '--directories': "/opt/continuuity/$componentName",
                   '--category': 'misc',
                   '--url': 'http://www.continuuity.com/products',
                   '--architecture': 'all',
                   '--version': "${getPomVersion()}",
                   '--deb-user': 'root',
                   '--after-install': "$rootProject.projectDir/distributions/src/debian/scripts/postinst",
                   '--before-remove': "$rootProject.projectDir/distributions/src/debian/scripts/prerm",
                   '--after-remove': "$rootProject.projectDir/distributions/src/debian/scripts/postrm",
                   '--template-value': "project=$componentName",
                   '--iteration': "${getVersionIteration()}"
  ]
}

/**
 * Generates rpm package.
 */
rpm {
  baseDir = "$project.buildDir/stage-packaging"
  dependencies = [
                   'continuuity'
                 ]

}


// The packaging extra options do not allow for rpm-specific settings.  As a workaround,
//   override them directly in the rpm task
rpm.doFirst {
  // we also override this for the common package
  if(packaging.extraOptions['--after-install'] == "$rootProject.projectDir/distributions/src/debian/scripts/postinst") {
    packaging.extraOptions['--after-install'] = "$rootProject.projectDir/distributions/src/rpm/scripts/postinst"
  }
  if(packaging.extraOptions['--before-remove'] == "$rootProject.projectDir/distributions/src/debian/scripts/prerm") {
    packaging.extraOptions['--before-remove'] = "$rootProject.projectDir/distributions/src/rpm/scripts/prerm"
  }
  if(packaging.extraOptions['--after-remove'] == "$rootProject.projectDir/distributions/src/debian/scripts/postrm") {
    packaging.extraOptions['--after-remove'] = "$rootProject.projectDir/distributions/src/rpm/scripts/postrm"
  }
}

/**
 * Generates a tarball distribution.
 */
task tgz(type: Tar, dependsOn : ['prepackager']) {
  compression = Compression.GZIP
  baseName = "continuuity-$componentName"
  version = getPomVersion()
  include 'opt/continuuity/**'
  includeEmptyDirs false
  from "$project.buildDir/stage-packaging"
  eachFile { it.setPath(it.getPath().replaceFirst("^opt/continuuity/$componentName/", "continuuity-$componentName-$version/")) }
}


// Make the dependency on prepackager.
debian.dependsOn debianPrepackager
rpm.dependsOn rpmPrepackager

/**
 * Uploads packages.
 */
configurations{
  packages
}

if (project.name == 'distributions') {
  artifacts {
    packages file: file("$buildDir/linux-package/continuuity_${getPomVersion()}-${getVersionIteration()}_all.deb"), name: "continuuity"
    packages file: file("$buildDir/linux-package/continuuity-${getPomVersion()}-${getVersionIteration()}.noarch.rpm"), name: "continuuity"
  }
} else {
  // Temporary fix to ensure that data fabric packages are generated as continnuity-app-fabric
  if (project.name == 'data-fabric-runtime') {
    artifacts {
      packages file: file("$buildDir/linux-package/continuuity-${project.ext.componentName}_${getPomVersion()}-${getVersionIteration()}_all.deb"), name: "continuuity-${project.ext.componentName}"
      packages file: file("$buildDir/linux-package/continuuity-${project.ext.componentName}-${getPomVersion()}-${getVersionIteration()}.noarch.rpm"), name: "continuuity-${project.ext.componentName}"
      packages file: file("$buildDir/distributions/${tgz.archiveName}"), name: "continuuity-${project.ext.componentName}"
    }
  } else {
    artifacts {
      packages file: file("$buildDir/linux-package/continuuity-${project.name}_${getPomVersion()}-${getVersionIteration()}_all.deb"), name: "continuuity-${project.name}"
      packages file: file("$buildDir/linux-package/continuuity-${project.name}-${getPomVersion()}-${getVersionIteration()}.noarch.rpm"), name: "continuuity-${project.name}"
      packages file: file("$buildDir/distributions/${tgz.archiveName}"), name: "continuuity-${project.name}"

    }
  }
}

uploadPackages {
  repositories {
    repositories.mavenDeployer {
      repository(url: "https://repository.continuuity.com/service/local/staging/deploy/maven2") {
        authentication(userName: nexusUsername, password: nexusPassword)
      }
      snapshotRepository(url: "https://repository.continuuity.com/content/repositories/snapshots") {
        authentication(userName: nexusUsername, password: nexusPassword)
      }

      pom.whenConfigured { pom ->
        // Removes groovy dependency and test dependencies from generated pom file
        pom.dependencies = pom.dependencies.findAll { dep ->
          dep.artifactId != 'groovy-all' && (dep.scope != 'test' || dep.scope != 'integration' || dep.scope != 'sources')
        }
        pom.groupId = finalRelease ? 'com.continuuity.distributions.release' : 'com.continuuity.distributions.snapshots'
        pom.version = rootProject.version
      }
    }
  }
}

uploadPackages.dependsOn debian
uploadPackages.dependsOn rpm
uploadPackages.dependsOn tgz

