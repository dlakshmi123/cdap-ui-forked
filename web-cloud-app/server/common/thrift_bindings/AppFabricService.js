//
// Autogenerated by Thrift Compiler (0.8.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = require('./app-fabric_types');
//HELPER FUNCTIONS AND STRUCTURES

var AppFabricService_start_args = function(args) {
  this.token = null;
  this.descriptor = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.descriptor !== undefined) {
      this.descriptor = args.descriptor;
    }
  }
};
AppFabricService_start_args.prototype = {};
AppFabricService_start_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.AuthToken();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.descriptor = new ttypes.FlowDescriptor();
        this.descriptor.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppFabricService_start_args.prototype.write = function(output) {
  output.writeStructBegin('AppFabricService_start_args');
  if (this.token) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  if (this.descriptor) {
    output.writeFieldBegin('descriptor', Thrift.Type.STRUCT, 2);
    this.descriptor.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AppFabricService_start_result = function(args) {
  this.success = null;
  this.e = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
AppFabricService_start_result.prototype = {};
AppFabricService_start_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.RunIdentifier();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.AppFabricServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppFabricService_start_result.prototype.write = function(output) {
  output.writeStructBegin('AppFabricService_start_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AppFabricService_status_args = function(args) {
  this.token = null;
  this.identifier = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.identifier !== undefined) {
      this.identifier = args.identifier;
    }
  }
};
AppFabricService_status_args.prototype = {};
AppFabricService_status_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.AuthToken();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.identifier = new ttypes.FlowIdentifier();
        this.identifier.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppFabricService_status_args.prototype.write = function(output) {
  output.writeStructBegin('AppFabricService_status_args');
  if (this.token) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  if (this.identifier) {
    output.writeFieldBegin('identifier', Thrift.Type.STRUCT, 2);
    this.identifier.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AppFabricService_status_result = function(args) {
  this.success = null;
  this.e = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
AppFabricService_status_result.prototype = {};
AppFabricService_status_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.FlowStatus();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.AppFabricServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppFabricService_status_result.prototype.write = function(output) {
  output.writeStructBegin('AppFabricService_status_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AppFabricService_stop_args = function(args) {
  this.token = null;
  this.identifier = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.identifier !== undefined) {
      this.identifier = args.identifier;
    }
  }
};
AppFabricService_stop_args.prototype = {};
AppFabricService_stop_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.AuthToken();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.identifier = new ttypes.FlowIdentifier();
        this.identifier.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppFabricService_stop_args.prototype.write = function(output) {
  output.writeStructBegin('AppFabricService_stop_args');
  if (this.token) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  if (this.identifier) {
    output.writeFieldBegin('identifier', Thrift.Type.STRUCT, 2);
    this.identifier.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AppFabricService_stop_result = function(args) {
  this.success = null;
  this.e = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
AppFabricService_stop_result.prototype = {};
AppFabricService_stop_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.RunIdentifier();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.AppFabricServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppFabricService_stop_result.prototype.write = function(output) {
  output.writeStructBegin('AppFabricService_stop_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AppFabricService_setInstances_args = function(args) {
  this.token = null;
  this.identifier = null;
  this.flowletId = null;
  this.instances = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.identifier !== undefined) {
      this.identifier = args.identifier;
    }
    if (args.flowletId !== undefined) {
      this.flowletId = args.flowletId;
    }
    if (args.instances !== undefined) {
      this.instances = args.instances;
    }
  }
};
AppFabricService_setInstances_args.prototype = {};
AppFabricService_setInstances_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.AuthToken();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.identifier = new ttypes.FlowIdentifier();
        this.identifier.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.flowletId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I16) {
        this.instances = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppFabricService_setInstances_args.prototype.write = function(output) {
  output.writeStructBegin('AppFabricService_setInstances_args');
  if (this.token) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  if (this.identifier) {
    output.writeFieldBegin('identifier', Thrift.Type.STRUCT, 2);
    this.identifier.write(output);
    output.writeFieldEnd();
  }
  if (this.flowletId) {
    output.writeFieldBegin('flowletId', Thrift.Type.STRING, 3);
    output.writeString(this.flowletId);
    output.writeFieldEnd();
  }
  if (this.instances) {
    output.writeFieldBegin('instances', Thrift.Type.I16, 4);
    output.writeI16(this.instances);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AppFabricService_setInstances_result = function(args) {
  this.e = null;
  if (args) {
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
AppFabricService_setInstances_result.prototype = {};
AppFabricService_setInstances_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.AppFabricServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppFabricService_setInstances_result.prototype.write = function(output) {
  output.writeStructBegin('AppFabricService_setInstances_result');
  if (this.e) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AppFabricService_getFlows_args = function(args) {
  this.accountId = null;
  if (args) {
    if (args.accountId !== undefined) {
      this.accountId = args.accountId;
    }
  }
};
AppFabricService_getFlows_args.prototype = {};
AppFabricService_getFlows_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.accountId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppFabricService_getFlows_args.prototype.write = function(output) {
  output.writeStructBegin('AppFabricService_getFlows_args');
  if (this.accountId) {
    output.writeFieldBegin('accountId', Thrift.Type.STRING, 1);
    output.writeString(this.accountId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AppFabricService_getFlows_result = function(args) {
  this.success = null;
  this.e = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
AppFabricService_getFlows_result.prototype = {};
AppFabricService_getFlows_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size18 = 0;
        var _rtmp322;
        this.success = [];
        var _etype21 = 0;
        _rtmp322 = input.readListBegin();
        _etype21 = _rtmp322.etype;
        _size18 = _rtmp322.size;
        for (var _i23 = 0; _i23 < _size18; ++_i23)
        {
          var elem24 = null;
          elem24 = new ttypes.ActiveFlow();
          elem24.read(input);
          this.success.push(elem24);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.AppFabricServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppFabricService_getFlows_result.prototype.write = function(output) {
  output.writeStructBegin('AppFabricService_getFlows_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter25 in this.success)
    {
      if (this.success.hasOwnProperty(iter25))
      {
        iter25 = this.success[iter25];
        iter25.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AppFabricService_getFlowDefinition_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
  }
};
AppFabricService_getFlowDefinition_args.prototype = {};
AppFabricService_getFlowDefinition_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.id = new ttypes.FlowIdentifier();
        this.id.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppFabricService_getFlowDefinition_args.prototype.write = function(output) {
  output.writeStructBegin('AppFabricService_getFlowDefinition_args');
  if (this.id) {
    output.writeFieldBegin('id', Thrift.Type.STRUCT, 1);
    this.id.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AppFabricService_getFlowDefinition_result = function(args) {
  this.success = null;
  this.e = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
AppFabricService_getFlowDefinition_result.prototype = {};
AppFabricService_getFlowDefinition_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.AppFabricServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppFabricService_getFlowDefinition_result.prototype.write = function(output) {
  output.writeStructBegin('AppFabricService_getFlowDefinition_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AppFabricService_getFlowHistory_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
  }
};
AppFabricService_getFlowHistory_args.prototype = {};
AppFabricService_getFlowHistory_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.id = new ttypes.FlowIdentifier();
        this.id.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppFabricService_getFlowHistory_args.prototype.write = function(output) {
  output.writeStructBegin('AppFabricService_getFlowHistory_args');
  if (this.id) {
    output.writeFieldBegin('id', Thrift.Type.STRUCT, 1);
    this.id.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AppFabricService_getFlowHistory_result = function(args) {
  this.success = null;
  this.e = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
AppFabricService_getFlowHistory_result.prototype = {};
AppFabricService_getFlowHistory_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size26 = 0;
        var _rtmp330;
        this.success = [];
        var _etype29 = 0;
        _rtmp330 = input.readListBegin();
        _etype29 = _rtmp330.etype;
        _size26 = _rtmp330.size;
        for (var _i31 = 0; _i31 < _size26; ++_i31)
        {
          var elem32 = null;
          elem32 = new ttypes.FlowRunRecord();
          elem32.read(input);
          this.success.push(elem32);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.AppFabricServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppFabricService_getFlowHistory_result.prototype.write = function(output) {
  output.writeStructBegin('AppFabricService_getFlowHistory_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter33 in this.success)
    {
      if (this.success.hasOwnProperty(iter33))
      {
        iter33 = this.success[iter33];
        iter33.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AppFabricService_stopAll_args = function(args) {
  this.accountId = null;
  if (args) {
    if (args.accountId !== undefined) {
      this.accountId = args.accountId;
    }
  }
};
AppFabricService_stopAll_args.prototype = {};
AppFabricService_stopAll_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.accountId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppFabricService_stopAll_args.prototype.write = function(output) {
  output.writeStructBegin('AppFabricService_stopAll_args');
  if (this.accountId) {
    output.writeFieldBegin('accountId', Thrift.Type.STRING, 1);
    output.writeString(this.accountId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AppFabricService_stopAll_result = function(args) {
  this.e = null;
  if (args) {
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
AppFabricService_stopAll_result.prototype = {};
AppFabricService_stopAll_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.AppFabricServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppFabricService_stopAll_result.prototype.write = function(output) {
  output.writeStructBegin('AppFabricService_stopAll_result');
  if (this.e) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AppFabricService_init_args = function(args) {
  this.token = null;
  this.info = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.info !== undefined) {
      this.info = args.info;
    }
  }
};
AppFabricService_init_args.prototype = {};
AppFabricService_init_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.AuthToken();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.info = new ttypes.ResourceInfo();
        this.info.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppFabricService_init_args.prototype.write = function(output) {
  output.writeStructBegin('AppFabricService_init_args');
  if (this.token) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  if (this.info) {
    output.writeFieldBegin('info', Thrift.Type.STRUCT, 2);
    this.info.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AppFabricService_init_result = function(args) {
  this.success = null;
  this.e = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
AppFabricService_init_result.prototype = {};
AppFabricService_init_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ResourceIdentifier();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.AppFabricServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppFabricService_init_result.prototype.write = function(output) {
  output.writeStructBegin('AppFabricService_init_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AppFabricService_chunk_args = function(args) {
  this.token = null;
  this.resource = null;
  this.chunk = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.resource !== undefined) {
      this.resource = args.resource;
    }
    if (args.chunk !== undefined) {
      this.chunk = args.chunk;
    }
  }
};
AppFabricService_chunk_args.prototype = {};
AppFabricService_chunk_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.AuthToken();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.resource = new ttypes.ResourceIdentifier();
        this.resource.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.chunk = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppFabricService_chunk_args.prototype.write = function(output) {
  output.writeStructBegin('AppFabricService_chunk_args');
  if (this.token) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  if (this.resource) {
    output.writeFieldBegin('resource', Thrift.Type.STRUCT, 2);
    this.resource.write(output);
    output.writeFieldEnd();
  }
  if (this.chunk) {
    output.writeFieldBegin('chunk', Thrift.Type.STRING, 3);
    output.writeString(this.chunk);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AppFabricService_chunk_result = function(args) {
  this.e = null;
  if (args) {
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
AppFabricService_chunk_result.prototype = {};
AppFabricService_chunk_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.AppFabricServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppFabricService_chunk_result.prototype.write = function(output) {
  output.writeStructBegin('AppFabricService_chunk_result');
  if (this.e) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AppFabricService_deploy_args = function(args) {
  this.token = null;
  this.resource = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.resource !== undefined) {
      this.resource = args.resource;
    }
  }
};
AppFabricService_deploy_args.prototype = {};
AppFabricService_deploy_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.AuthToken();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.resource = new ttypes.ResourceIdentifier();
        this.resource.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppFabricService_deploy_args.prototype.write = function(output) {
  output.writeStructBegin('AppFabricService_deploy_args');
  if (this.token) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  if (this.resource) {
    output.writeFieldBegin('resource', Thrift.Type.STRUCT, 2);
    this.resource.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AppFabricService_deploy_result = function(args) {
  this.e = null;
  if (args) {
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
AppFabricService_deploy_result.prototype = {};
AppFabricService_deploy_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.AppFabricServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppFabricService_deploy_result.prototype.write = function(output) {
  output.writeStructBegin('AppFabricService_deploy_result');
  if (this.e) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AppFabricService_dstatus_args = function(args) {
  this.token = null;
  this.resource = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.resource !== undefined) {
      this.resource = args.resource;
    }
  }
};
AppFabricService_dstatus_args.prototype = {};
AppFabricService_dstatus_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.AuthToken();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.resource = new ttypes.ResourceIdentifier();
        this.resource.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppFabricService_dstatus_args.prototype.write = function(output) {
  output.writeStructBegin('AppFabricService_dstatus_args');
  if (this.token) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  if (this.resource) {
    output.writeFieldBegin('resource', Thrift.Type.STRUCT, 2);
    this.resource.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AppFabricService_dstatus_result = function(args) {
  this.success = null;
  this.e = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
AppFabricService_dstatus_result.prototype = {};
AppFabricService_dstatus_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.DeploymentStatus();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.AppFabricServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppFabricService_dstatus_result.prototype.write = function(output) {
  output.writeStructBegin('AppFabricService_dstatus_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AppFabricService_promote_args = function(args) {
  this.token = null;
  this.identifier = null;
  this.hostname = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.identifier !== undefined) {
      this.identifier = args.identifier;
    }
    if (args.hostname !== undefined) {
      this.hostname = args.hostname;
    }
  }
};
AppFabricService_promote_args.prototype = {};
AppFabricService_promote_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.AuthToken();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.identifier = new ttypes.ResourceIdentifier();
        this.identifier.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.hostname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppFabricService_promote_args.prototype.write = function(output) {
  output.writeStructBegin('AppFabricService_promote_args');
  if (this.token) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  if (this.identifier) {
    output.writeFieldBegin('identifier', Thrift.Type.STRUCT, 2);
    this.identifier.write(output);
    output.writeFieldEnd();
  }
  if (this.hostname) {
    output.writeFieldBegin('hostname', Thrift.Type.STRING, 3);
    output.writeString(this.hostname);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AppFabricService_promote_result = function(args) {
  this.success = null;
  this.e = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
AppFabricService_promote_result.prototype = {};
AppFabricService_promote_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.AppFabricServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppFabricService_promote_result.prototype.write = function(output) {
  output.writeStructBegin('AppFabricService_promote_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AppFabricService_remove_args = function(args) {
  this.token = null;
  this.identifier = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.identifier !== undefined) {
      this.identifier = args.identifier;
    }
  }
};
AppFabricService_remove_args.prototype = {};
AppFabricService_remove_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.AuthToken();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.identifier = new ttypes.FlowIdentifier();
        this.identifier.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppFabricService_remove_args.prototype.write = function(output) {
  output.writeStructBegin('AppFabricService_remove_args');
  if (this.token) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  if (this.identifier) {
    output.writeFieldBegin('identifier', Thrift.Type.STRUCT, 2);
    this.identifier.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AppFabricService_remove_result = function(args) {
  this.e = null;
  if (args) {
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
AppFabricService_remove_result.prototype = {};
AppFabricService_remove_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.AppFabricServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppFabricService_remove_result.prototype.write = function(output) {
  output.writeStructBegin('AppFabricService_remove_result');
  if (this.e) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AppFabricService_removeApplication_args = function(args) {
  this.token = null;
  this.id = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.id !== undefined) {
      this.id = args.id;
    }
  }
};
AppFabricService_removeApplication_args.prototype = {};
AppFabricService_removeApplication_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.AuthToken();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.id = new ttypes.FlowIdentifier();
        this.id.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppFabricService_removeApplication_args.prototype.write = function(output) {
  output.writeStructBegin('AppFabricService_removeApplication_args');
  if (this.token) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  if (this.id) {
    output.writeFieldBegin('id', Thrift.Type.STRUCT, 2);
    this.id.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AppFabricService_removeApplication_result = function(args) {
  this.e = null;
  if (args) {
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
AppFabricService_removeApplication_result.prototype = {};
AppFabricService_removeApplication_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.AppFabricServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppFabricService_removeApplication_result.prototype.write = function(output) {
  output.writeStructBegin('AppFabricService_removeApplication_result');
  if (this.e) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AppFabricService_removeAll_args = function(args) {
  this.token = null;
  this.accountId = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.accountId !== undefined) {
      this.accountId = args.accountId;
    }
  }
};
AppFabricService_removeAll_args.prototype = {};
AppFabricService_removeAll_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.AuthToken();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.accountId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppFabricService_removeAll_args.prototype.write = function(output) {
  output.writeStructBegin('AppFabricService_removeAll_args');
  if (this.token) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  if (this.accountId) {
    output.writeFieldBegin('accountId', Thrift.Type.STRING, 2);
    output.writeString(this.accountId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AppFabricService_removeAll_result = function(args) {
  this.e = null;
  if (args) {
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
AppFabricService_removeAll_result.prototype = {};
AppFabricService_removeAll_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.AppFabricServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppFabricService_removeAll_result.prototype.write = function(output) {
  output.writeStructBegin('AppFabricService_removeAll_result');
  if (this.e) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AppFabricService_reset_args = function(args) {
  this.token = null;
  this.accountId = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.accountId !== undefined) {
      this.accountId = args.accountId;
    }
  }
};
AppFabricService_reset_args.prototype = {};
AppFabricService_reset_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.AuthToken();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.accountId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppFabricService_reset_args.prototype.write = function(output) {
  output.writeStructBegin('AppFabricService_reset_args');
  if (this.token) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  if (this.accountId) {
    output.writeFieldBegin('accountId', Thrift.Type.STRING, 2);
    output.writeString(this.accountId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AppFabricService_reset_result = function(args) {
  this.e = null;
  if (args) {
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
AppFabricService_reset_result.prototype = {};
AppFabricService_reset_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.AppFabricServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppFabricService_reset_result.prototype.write = function(output) {
  output.writeStructBegin('AppFabricService_reset_result');
  if (this.e) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AppFabricServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {};
};
AppFabricServiceClient.prototype = {};
AppFabricServiceClient.prototype.start = function(token, descriptor, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_start(token, descriptor);
};

AppFabricServiceClient.prototype.send_start = function(token, descriptor) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('start', Thrift.MessageType.CALL, this.seqid);
  var args = new AppFabricService_start_args();
  args.token = token;
  args.descriptor = descriptor;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AppFabricServiceClient.prototype.recv_start = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AppFabricService_start_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('start failed: unknown result');
};
AppFabricServiceClient.prototype.status = function(token, identifier, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_status(token, identifier);
};

AppFabricServiceClient.prototype.send_status = function(token, identifier) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('status', Thrift.MessageType.CALL, this.seqid);
  var args = new AppFabricService_status_args();
  args.token = token;
  args.identifier = identifier;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AppFabricServiceClient.prototype.recv_status = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AppFabricService_status_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('status failed: unknown result');
};
AppFabricServiceClient.prototype.stop = function(token, identifier, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_stop(token, identifier);
};

AppFabricServiceClient.prototype.send_stop = function(token, identifier) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('stop', Thrift.MessageType.CALL, this.seqid);
  var args = new AppFabricService_stop_args();
  args.token = token;
  args.identifier = identifier;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AppFabricServiceClient.prototype.recv_stop = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AppFabricService_stop_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('stop failed: unknown result');
};
AppFabricServiceClient.prototype.setInstances = function(token, identifier, flowletId, instances, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_setInstances(token, identifier, flowletId, instances);
};

AppFabricServiceClient.prototype.send_setInstances = function(token, identifier, flowletId, instances) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('setInstances', Thrift.MessageType.CALL, this.seqid);
  var args = new AppFabricService_setInstances_args();
  args.token = token;
  args.identifier = identifier;
  args.flowletId = flowletId;
  args.instances = instances;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AppFabricServiceClient.prototype.recv_setInstances = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AppFabricService_setInstances_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
AppFabricServiceClient.prototype.getFlows = function(accountId, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getFlows(accountId);
};

AppFabricServiceClient.prototype.send_getFlows = function(accountId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getFlows', Thrift.MessageType.CALL, this.seqid);
  var args = new AppFabricService_getFlows_args();
  args.accountId = accountId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AppFabricServiceClient.prototype.recv_getFlows = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AppFabricService_getFlows_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getFlows failed: unknown result');
};
AppFabricServiceClient.prototype.getFlowDefinition = function(id, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getFlowDefinition(id);
};

AppFabricServiceClient.prototype.send_getFlowDefinition = function(id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getFlowDefinition', Thrift.MessageType.CALL, this.seqid);
  var args = new AppFabricService_getFlowDefinition_args();
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AppFabricServiceClient.prototype.recv_getFlowDefinition = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AppFabricService_getFlowDefinition_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getFlowDefinition failed: unknown result');
};
AppFabricServiceClient.prototype.getFlowHistory = function(id, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getFlowHistory(id);
};

AppFabricServiceClient.prototype.send_getFlowHistory = function(id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getFlowHistory', Thrift.MessageType.CALL, this.seqid);
  var args = new AppFabricService_getFlowHistory_args();
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AppFabricServiceClient.prototype.recv_getFlowHistory = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AppFabricService_getFlowHistory_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getFlowHistory failed: unknown result');
};
AppFabricServiceClient.prototype.stopAll = function(accountId, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_stopAll(accountId);
};

AppFabricServiceClient.prototype.send_stopAll = function(accountId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('stopAll', Thrift.MessageType.CALL, this.seqid);
  var args = new AppFabricService_stopAll_args();
  args.accountId = accountId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AppFabricServiceClient.prototype.recv_stopAll = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AppFabricService_stopAll_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
AppFabricServiceClient.prototype.init = function(token, info, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_init(token, info);
};

AppFabricServiceClient.prototype.send_init = function(token, info) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('init', Thrift.MessageType.CALL, this.seqid);
  var args = new AppFabricService_init_args();
  args.token = token;
  args.info = info;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AppFabricServiceClient.prototype.recv_init = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AppFabricService_init_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('init failed: unknown result');
};
AppFabricServiceClient.prototype.chunk = function(token, resource, chunk, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_chunk(token, resource, chunk);
};

AppFabricServiceClient.prototype.send_chunk = function(token, resource, chunk) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('chunk', Thrift.MessageType.CALL, this.seqid);
  var args = new AppFabricService_chunk_args();
  args.token = token;
  args.resource = resource;
  args.chunk = chunk;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AppFabricServiceClient.prototype.recv_chunk = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AppFabricService_chunk_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
AppFabricServiceClient.prototype.deploy = function(token, resource, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_deploy(token, resource);
};

AppFabricServiceClient.prototype.send_deploy = function(token, resource) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deploy', Thrift.MessageType.CALL, this.seqid);
  var args = new AppFabricService_deploy_args();
  args.token = token;
  args.resource = resource;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AppFabricServiceClient.prototype.recv_deploy = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AppFabricService_deploy_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
AppFabricServiceClient.prototype.dstatus = function(token, resource, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_dstatus(token, resource);
};

AppFabricServiceClient.prototype.send_dstatus = function(token, resource) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('dstatus', Thrift.MessageType.CALL, this.seqid);
  var args = new AppFabricService_dstatus_args();
  args.token = token;
  args.resource = resource;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AppFabricServiceClient.prototype.recv_dstatus = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AppFabricService_dstatus_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('dstatus failed: unknown result');
};
AppFabricServiceClient.prototype.promote = function(token, identifier, hostname, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_promote(token, identifier, hostname);
};

AppFabricServiceClient.prototype.send_promote = function(token, identifier, hostname) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('promote', Thrift.MessageType.CALL, this.seqid);
  var args = new AppFabricService_promote_args();
  args.token = token;
  args.identifier = identifier;
  args.hostname = hostname;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AppFabricServiceClient.prototype.recv_promote = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AppFabricService_promote_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('promote failed: unknown result');
};
AppFabricServiceClient.prototype.remove = function(token, identifier, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_remove(token, identifier);
};

AppFabricServiceClient.prototype.send_remove = function(token, identifier) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('remove', Thrift.MessageType.CALL, this.seqid);
  var args = new AppFabricService_remove_args();
  args.token = token;
  args.identifier = identifier;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AppFabricServiceClient.prototype.recv_remove = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AppFabricService_remove_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
AppFabricServiceClient.prototype.removeApplication = function(token, id, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_removeApplication(token, id);
};

AppFabricServiceClient.prototype.send_removeApplication = function(token, id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('removeApplication', Thrift.MessageType.CALL, this.seqid);
  var args = new AppFabricService_removeApplication_args();
  args.token = token;
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AppFabricServiceClient.prototype.recv_removeApplication = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AppFabricService_removeApplication_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
AppFabricServiceClient.prototype.removeAll = function(token, accountId, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_removeAll(token, accountId);
};

AppFabricServiceClient.prototype.send_removeAll = function(token, accountId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('removeAll', Thrift.MessageType.CALL, this.seqid);
  var args = new AppFabricService_removeAll_args();
  args.token = token;
  args.accountId = accountId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AppFabricServiceClient.prototype.recv_removeAll = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AppFabricService_removeAll_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
AppFabricServiceClient.prototype.reset = function(token, accountId, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_reset(token, accountId);
};

AppFabricServiceClient.prototype.send_reset = function(token, accountId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('reset', Thrift.MessageType.CALL, this.seqid);
  var args = new AppFabricService_reset_args();
  args.token = token;
  args.accountId = accountId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AppFabricServiceClient.prototype.recv_reset = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AppFabricService_reset_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
var AppFabricServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
AppFabricServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

AppFabricServiceProcessor.prototype.process_start = function(seqid, input, output) {
  var args = new AppFabricService_start_args();
  args.read(input);
  input.readMessageEnd();
  var result = new AppFabricService_start_result();
  this._handler.start(args.token, args.descriptor, function (success) {
    result.success = success;
    output.writeMessageBegin("start", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AppFabricServiceProcessor.prototype.process_status = function(seqid, input, output) {
  var args = new AppFabricService_status_args();
  args.read(input);
  input.readMessageEnd();
  var result = new AppFabricService_status_result();
  this._handler.status(args.token, args.identifier, function (success) {
    result.success = success;
    output.writeMessageBegin("status", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AppFabricServiceProcessor.prototype.process_stop = function(seqid, input, output) {
  var args = new AppFabricService_stop_args();
  args.read(input);
  input.readMessageEnd();
  var result = new AppFabricService_stop_result();
  this._handler.stop(args.token, args.identifier, function (success) {
    result.success = success;
    output.writeMessageBegin("stop", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AppFabricServiceProcessor.prototype.process_setInstances = function(seqid, input, output) {
  var args = new AppFabricService_setInstances_args();
  args.read(input);
  input.readMessageEnd();
  var result = new AppFabricService_setInstances_result();
  this._handler.setInstances(args.token, args.identifier, args.flowletId, args.instances, function (success) {
    result.success = success;
    output.writeMessageBegin("setInstances", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AppFabricServiceProcessor.prototype.process_getFlows = function(seqid, input, output) {
  var args = new AppFabricService_getFlows_args();
  args.read(input);
  input.readMessageEnd();
  var result = new AppFabricService_getFlows_result();
  this._handler.getFlows(args.accountId, function (success) {
    result.success = success;
    output.writeMessageBegin("getFlows", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AppFabricServiceProcessor.prototype.process_getFlowDefinition = function(seqid, input, output) {
  var args = new AppFabricService_getFlowDefinition_args();
  args.read(input);
  input.readMessageEnd();
  var result = new AppFabricService_getFlowDefinition_result();
  this._handler.getFlowDefinition(args.id, function (success) {
    result.success = success;
    output.writeMessageBegin("getFlowDefinition", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AppFabricServiceProcessor.prototype.process_getFlowHistory = function(seqid, input, output) {
  var args = new AppFabricService_getFlowHistory_args();
  args.read(input);
  input.readMessageEnd();
  var result = new AppFabricService_getFlowHistory_result();
  this._handler.getFlowHistory(args.id, function (success) {
    result.success = success;
    output.writeMessageBegin("getFlowHistory", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AppFabricServiceProcessor.prototype.process_stopAll = function(seqid, input, output) {
  var args = new AppFabricService_stopAll_args();
  args.read(input);
  input.readMessageEnd();
  var result = new AppFabricService_stopAll_result();
  this._handler.stopAll(args.accountId, function (success) {
    result.success = success;
    output.writeMessageBegin("stopAll", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AppFabricServiceProcessor.prototype.process_init = function(seqid, input, output) {
  var args = new AppFabricService_init_args();
  args.read(input);
  input.readMessageEnd();
  var result = new AppFabricService_init_result();
  this._handler.init(args.token, args.info, function (success) {
    result.success = success;
    output.writeMessageBegin("init", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AppFabricServiceProcessor.prototype.process_chunk = function(seqid, input, output) {
  var args = new AppFabricService_chunk_args();
  args.read(input);
  input.readMessageEnd();
  var result = new AppFabricService_chunk_result();
  this._handler.chunk(args.token, args.resource, args.chunk, function (success) {
    result.success = success;
    output.writeMessageBegin("chunk", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AppFabricServiceProcessor.prototype.process_deploy = function(seqid, input, output) {
  var args = new AppFabricService_deploy_args();
  args.read(input);
  input.readMessageEnd();
  var result = new AppFabricService_deploy_result();
  this._handler.deploy(args.token, args.resource, function (success) {
    result.success = success;
    output.writeMessageBegin("deploy", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AppFabricServiceProcessor.prototype.process_dstatus = function(seqid, input, output) {
  var args = new AppFabricService_dstatus_args();
  args.read(input);
  input.readMessageEnd();
  var result = new AppFabricService_dstatus_result();
  this._handler.dstatus(args.token, args.resource, function (success) {
    result.success = success;
    output.writeMessageBegin("dstatus", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AppFabricServiceProcessor.prototype.process_promote = function(seqid, input, output) {
  var args = new AppFabricService_promote_args();
  args.read(input);
  input.readMessageEnd();
  var result = new AppFabricService_promote_result();
  this._handler.promote(args.token, args.identifier, args.hostname, function (success) {
    result.success = success;
    output.writeMessageBegin("promote", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AppFabricServiceProcessor.prototype.process_remove = function(seqid, input, output) {
  var args = new AppFabricService_remove_args();
  args.read(input);
  input.readMessageEnd();
  var result = new AppFabricService_remove_result();
  this._handler.remove(args.token, args.identifier, function (success) {
    result.success = success;
    output.writeMessageBegin("remove", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AppFabricServiceProcessor.prototype.process_removeApplication = function(seqid, input, output) {
  var args = new AppFabricService_removeApplication_args();
  args.read(input);
  input.readMessageEnd();
  var result = new AppFabricService_removeApplication_result();
  this._handler.removeApplication(args.token, args.id, function (success) {
    result.success = success;
    output.writeMessageBegin("removeApplication", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AppFabricServiceProcessor.prototype.process_removeAll = function(seqid, input, output) {
  var args = new AppFabricService_removeAll_args();
  args.read(input);
  input.readMessageEnd();
  var result = new AppFabricService_removeAll_result();
  this._handler.removeAll(args.token, args.accountId, function (success) {
    result.success = success;
    output.writeMessageBegin("removeAll", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AppFabricServiceProcessor.prototype.process_reset = function(seqid, input, output) {
  var args = new AppFabricService_reset_args();
  args.read(input);
  input.readMessageEnd();
  var result = new AppFabricService_reset_result();
  this._handler.reset(args.token, args.accountId, function (success) {
    result.success = success;
    output.writeMessageBegin("reset", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

