//
// Autogenerated by Thrift Compiler (0.9.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = require('./metricsservice_types');
//HELPER FUNCTIONS AND STRUCTURES

MetricsFrontendService_getCounters_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
MetricsFrontendService_getCounters_args.prototype = {};
MetricsFrontendService_getCounters_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.CounterRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetricsFrontendService_getCounters_args.prototype.write = function(output) {
  output.writeStructBegin('MetricsFrontendService_getCounters_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetricsFrontendService_getCounters_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.MetricsServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MetricsFrontendService_getCounters_result.prototype = {};
MetricsFrontendService_getCounters_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size44 = 0;
        var _rtmp348;
        this.success = [];
        var _etype47 = 0;
        _rtmp348 = input.readListBegin();
        _etype47 = _rtmp348.etype;
        _size44 = _rtmp348.size;
        for (var _i49 = 0; _i49 < _size44; ++_i49)
        {
          var elem50 = null;
          elem50 = new ttypes.Counter();
          elem50.read(input);
          this.success.push(elem50);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.MetricsServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetricsFrontendService_getCounters_result.prototype.write = function(output) {
  output.writeStructBegin('MetricsFrontendService_getCounters_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter51 in this.success)
    {
      if (this.success.hasOwnProperty(iter51))
      {
        iter51 = this.success[iter51];
        iter51.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetricsFrontendService_getTimeSeries_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
MetricsFrontendService_getTimeSeries_args.prototype = {};
MetricsFrontendService_getTimeSeries_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.TimeseriesRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetricsFrontendService_getTimeSeries_args.prototype.write = function(output) {
  output.writeStructBegin('MetricsFrontendService_getTimeSeries_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetricsFrontendService_getTimeSeries_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.MetricsServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MetricsFrontendService_getTimeSeries_result.prototype = {};
MetricsFrontendService_getTimeSeries_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Points();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.MetricsServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetricsFrontendService_getTimeSeries_result.prototype.write = function(output) {
  output.writeStructBegin('MetricsFrontendService_getTimeSeries_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetricsFrontendService_clear_args = function(args) {
  this.accountId = null;
  this.applicationId = null;
  if (args) {
    if (args.accountId !== undefined) {
      this.accountId = args.accountId;
    }
    if (args.applicationId !== undefined) {
      this.applicationId = args.applicationId;
    }
  }
};
MetricsFrontendService_clear_args.prototype = {};
MetricsFrontendService_clear_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.accountId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.applicationId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetricsFrontendService_clear_args.prototype.write = function(output) {
  output.writeStructBegin('MetricsFrontendService_clear_args');
  if (this.accountId !== null && this.accountId !== undefined) {
    output.writeFieldBegin('accountId', Thrift.Type.STRING, 1);
    output.writeString(this.accountId);
    output.writeFieldEnd();
  }
  if (this.applicationId !== null && this.applicationId !== undefined) {
    output.writeFieldBegin('applicationId', Thrift.Type.STRING, 2);
    output.writeString(this.applicationId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetricsFrontendService_clear_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.MetricsServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MetricsFrontendService_clear_result.prototype = {};
MetricsFrontendService_clear_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.MetricsServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetricsFrontendService_clear_result.prototype.write = function(output) {
  output.writeStructBegin('MetricsFrontendService_clear_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetricsFrontendService_reset_args = function(args) {
  this.accountId = null;
  if (args) {
    if (args.accountId !== undefined) {
      this.accountId = args.accountId;
    }
  }
};
MetricsFrontendService_reset_args.prototype = {};
MetricsFrontendService_reset_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.accountId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetricsFrontendService_reset_args.prototype.write = function(output) {
  output.writeStructBegin('MetricsFrontendService_reset_args');
  if (this.accountId !== null && this.accountId !== undefined) {
    output.writeFieldBegin('accountId', Thrift.Type.STRING, 1);
    output.writeString(this.accountId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetricsFrontendService_reset_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.MetricsServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MetricsFrontendService_reset_result.prototype = {};
MetricsFrontendService_reset_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.MetricsServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetricsFrontendService_reset_result.prototype.write = function(output) {
  output.writeStructBegin('MetricsFrontendService_reset_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetricsFrontendService_getLog_args = function(args) {
  this.accountId = null;
  this.applicationId = null;
  this.flowId = null;
  this.size = null;
  if (args) {
    if (args.accountId !== undefined) {
      this.accountId = args.accountId;
    }
    if (args.applicationId !== undefined) {
      this.applicationId = args.applicationId;
    }
    if (args.flowId !== undefined) {
      this.flowId = args.flowId;
    }
    if (args.size !== undefined) {
      this.size = args.size;
    }
  }
};
MetricsFrontendService_getLog_args.prototype = {};
MetricsFrontendService_getLog_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.accountId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.applicationId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.flowId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.size = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetricsFrontendService_getLog_args.prototype.write = function(output) {
  output.writeStructBegin('MetricsFrontendService_getLog_args');
  if (this.accountId !== null && this.accountId !== undefined) {
    output.writeFieldBegin('accountId', Thrift.Type.STRING, 1);
    output.writeString(this.accountId);
    output.writeFieldEnd();
  }
  if (this.applicationId !== null && this.applicationId !== undefined) {
    output.writeFieldBegin('applicationId', Thrift.Type.STRING, 2);
    output.writeString(this.applicationId);
    output.writeFieldEnd();
  }
  if (this.flowId !== null && this.flowId !== undefined) {
    output.writeFieldBegin('flowId', Thrift.Type.STRING, 3);
    output.writeString(this.flowId);
    output.writeFieldEnd();
  }
  if (this.size !== null && this.size !== undefined) {
    output.writeFieldBegin('size', Thrift.Type.I32, 4);
    output.writeI32(this.size);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetricsFrontendService_getLog_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.MetricsServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MetricsFrontendService_getLog_result.prototype = {};
MetricsFrontendService_getLog_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size52 = 0;
        var _rtmp356;
        this.success = [];
        var _etype55 = 0;
        _rtmp356 = input.readListBegin();
        _etype55 = _rtmp356.etype;
        _size52 = _rtmp356.size;
        for (var _i57 = 0; _i57 < _size52; ++_i57)
        {
          var elem58 = null;
          elem58 = input.readString();
          this.success.push(elem58);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.MetricsServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetricsFrontendService_getLog_result.prototype.write = function(output) {
  output.writeStructBegin('MetricsFrontendService_getLog_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter59 in this.success)
    {
      if (this.success.hasOwnProperty(iter59))
      {
        iter59 = this.success[iter59];
        output.writeString(iter59);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetricsFrontendService_getLogNext_args = function(args) {
  this.accountId = null;
  this.applicationId = null;
  this.entityId = null;
  this.entityType = null;
  this.fromOffset = null;
  this.maxEvents = null;
  this.filter = null;
  if (args) {
    if (args.accountId !== undefined) {
      this.accountId = args.accountId;
    }
    if (args.applicationId !== undefined) {
      this.applicationId = args.applicationId;
    }
    if (args.entityId !== undefined) {
      this.entityId = args.entityId;
    }
    if (args.entityType !== undefined) {
      this.entityType = args.entityType;
    }
    if (args.fromOffset !== undefined) {
      this.fromOffset = args.fromOffset;
    }
    if (args.maxEvents !== undefined) {
      this.maxEvents = args.maxEvents;
    }
    if (args.filter !== undefined) {
      this.filter = args.filter;
    }
  }
};
MetricsFrontendService_getLogNext_args.prototype = {};
MetricsFrontendService_getLogNext_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.accountId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.applicationId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.entityId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.entityType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.fromOffset = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.maxEvents = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.filter = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetricsFrontendService_getLogNext_args.prototype.write = function(output) {
  output.writeStructBegin('MetricsFrontendService_getLogNext_args');
  if (this.accountId !== null && this.accountId !== undefined) {
    output.writeFieldBegin('accountId', Thrift.Type.STRING, 1);
    output.writeString(this.accountId);
    output.writeFieldEnd();
  }
  if (this.applicationId !== null && this.applicationId !== undefined) {
    output.writeFieldBegin('applicationId', Thrift.Type.STRING, 2);
    output.writeString(this.applicationId);
    output.writeFieldEnd();
  }
  if (this.entityId !== null && this.entityId !== undefined) {
    output.writeFieldBegin('entityId', Thrift.Type.STRING, 3);
    output.writeString(this.entityId);
    output.writeFieldEnd();
  }
  if (this.entityType !== null && this.entityType !== undefined) {
    output.writeFieldBegin('entityType', Thrift.Type.I32, 4);
    output.writeI32(this.entityType);
    output.writeFieldEnd();
  }
  if (this.fromOffset !== null && this.fromOffset !== undefined) {
    output.writeFieldBegin('fromOffset', Thrift.Type.I64, 5);
    output.writeI64(this.fromOffset);
    output.writeFieldEnd();
  }
  if (this.maxEvents !== null && this.maxEvents !== undefined) {
    output.writeFieldBegin('maxEvents', Thrift.Type.I32, 6);
    output.writeI32(this.maxEvents);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRING, 7);
    output.writeString(this.filter);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetricsFrontendService_getLogNext_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.MetricsServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MetricsFrontendService_getLogNext_result.prototype = {};
MetricsFrontendService_getLogNext_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size60 = 0;
        var _rtmp364;
        this.success = [];
        var _etype63 = 0;
        _rtmp364 = input.readListBegin();
        _etype63 = _rtmp364.etype;
        _size60 = _rtmp364.size;
        for (var _i65 = 0; _i65 < _size60; ++_i65)
        {
          var elem66 = null;
          elem66 = new ttypes.TLogResult();
          elem66.read(input);
          this.success.push(elem66);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.MetricsServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetricsFrontendService_getLogNext_result.prototype.write = function(output) {
  output.writeStructBegin('MetricsFrontendService_getLogNext_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter67 in this.success)
    {
      if (this.success.hasOwnProperty(iter67))
      {
        iter67 = this.success[iter67];
        iter67.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetricsFrontendService_getLogPrev_args = function(args) {
  this.accountId = null;
  this.applicationId = null;
  this.entityId = null;
  this.entityType = null;
  this.fromOffset = null;
  this.maxEvents = null;
  this.filter = null;
  if (args) {
    if (args.accountId !== undefined) {
      this.accountId = args.accountId;
    }
    if (args.applicationId !== undefined) {
      this.applicationId = args.applicationId;
    }
    if (args.entityId !== undefined) {
      this.entityId = args.entityId;
    }
    if (args.entityType !== undefined) {
      this.entityType = args.entityType;
    }
    if (args.fromOffset !== undefined) {
      this.fromOffset = args.fromOffset;
    }
    if (args.maxEvents !== undefined) {
      this.maxEvents = args.maxEvents;
    }
    if (args.filter !== undefined) {
      this.filter = args.filter;
    }
  }
};
MetricsFrontendService_getLogPrev_args.prototype = {};
MetricsFrontendService_getLogPrev_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.accountId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.applicationId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.entityId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.entityType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.fromOffset = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.maxEvents = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.filter = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetricsFrontendService_getLogPrev_args.prototype.write = function(output) {
  output.writeStructBegin('MetricsFrontendService_getLogPrev_args');
  if (this.accountId !== null && this.accountId !== undefined) {
    output.writeFieldBegin('accountId', Thrift.Type.STRING, 1);
    output.writeString(this.accountId);
    output.writeFieldEnd();
  }
  if (this.applicationId !== null && this.applicationId !== undefined) {
    output.writeFieldBegin('applicationId', Thrift.Type.STRING, 2);
    output.writeString(this.applicationId);
    output.writeFieldEnd();
  }
  if (this.entityId !== null && this.entityId !== undefined) {
    output.writeFieldBegin('entityId', Thrift.Type.STRING, 3);
    output.writeString(this.entityId);
    output.writeFieldEnd();
  }
  if (this.entityType !== null && this.entityType !== undefined) {
    output.writeFieldBegin('entityType', Thrift.Type.I32, 4);
    output.writeI32(this.entityType);
    output.writeFieldEnd();
  }
  if (this.fromOffset !== null && this.fromOffset !== undefined) {
    output.writeFieldBegin('fromOffset', Thrift.Type.I64, 5);
    output.writeI64(this.fromOffset);
    output.writeFieldEnd();
  }
  if (this.maxEvents !== null && this.maxEvents !== undefined) {
    output.writeFieldBegin('maxEvents', Thrift.Type.I32, 6);
    output.writeI32(this.maxEvents);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRING, 7);
    output.writeString(this.filter);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetricsFrontendService_getLogPrev_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.MetricsServiceException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MetricsFrontendService_getLogPrev_result.prototype = {};
MetricsFrontendService_getLogPrev_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size68 = 0;
        var _rtmp372;
        this.success = [];
        var _etype71 = 0;
        _rtmp372 = input.readListBegin();
        _etype71 = _rtmp372.etype;
        _size68 = _rtmp372.size;
        for (var _i73 = 0; _i73 < _size68; ++_i73)
        {
          var elem74 = null;
          elem74 = new ttypes.TLogResult();
          elem74.read(input);
          this.success.push(elem74);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.MetricsServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetricsFrontendService_getLogPrev_result.prototype.write = function(output) {
  output.writeStructBegin('MetricsFrontendService_getLogPrev_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter75 in this.success)
    {
      if (this.success.hasOwnProperty(iter75))
      {
        iter75 = this.success[iter75];
        iter75.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetricsFrontendServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {};
};
MetricsFrontendServiceClient.prototype = {};
MetricsFrontendServiceClient.prototype.getCounters = function(request, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getCounters(request);
};

MetricsFrontendServiceClient.prototype.send_getCounters = function(request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getCounters', Thrift.MessageType.CALL, this.seqid);
  var args = new MetricsFrontendService_getCounters_args();
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MetricsFrontendServiceClient.prototype.recv_getCounters = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MetricsFrontendService_getCounters_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getCounters failed: unknown result');
};
MetricsFrontendServiceClient.prototype.getTimeSeries = function(request, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getTimeSeries(request);
};

MetricsFrontendServiceClient.prototype.send_getTimeSeries = function(request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getTimeSeries', Thrift.MessageType.CALL, this.seqid);
  var args = new MetricsFrontendService_getTimeSeries_args();
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MetricsFrontendServiceClient.prototype.recv_getTimeSeries = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MetricsFrontendService_getTimeSeries_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getTimeSeries failed: unknown result');
};
MetricsFrontendServiceClient.prototype.clear = function(accountId, applicationId, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_clear(accountId, applicationId);
};

MetricsFrontendServiceClient.prototype.send_clear = function(accountId, applicationId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('clear', Thrift.MessageType.CALL, this.seqid);
  var args = new MetricsFrontendService_clear_args();
  args.accountId = accountId;
  args.applicationId = applicationId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MetricsFrontendServiceClient.prototype.recv_clear = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MetricsFrontendService_clear_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
MetricsFrontendServiceClient.prototype.reset = function(accountId, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_reset(accountId);
};

MetricsFrontendServiceClient.prototype.send_reset = function(accountId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('reset', Thrift.MessageType.CALL, this.seqid);
  var args = new MetricsFrontendService_reset_args();
  args.accountId = accountId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MetricsFrontendServiceClient.prototype.recv_reset = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MetricsFrontendService_reset_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
MetricsFrontendServiceClient.prototype.getLog = function(accountId, applicationId, flowId, size, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getLog(accountId, applicationId, flowId, size);
};

MetricsFrontendServiceClient.prototype.send_getLog = function(accountId, applicationId, flowId, size) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getLog', Thrift.MessageType.CALL, this.seqid);
  var args = new MetricsFrontendService_getLog_args();
  args.accountId = accountId;
  args.applicationId = applicationId;
  args.flowId = flowId;
  args.size = size;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MetricsFrontendServiceClient.prototype.recv_getLog = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MetricsFrontendService_getLog_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getLog failed: unknown result');
};
MetricsFrontendServiceClient.prototype.getLogNext = function(accountId, applicationId, entityId, entityType, fromOffset, maxEvents, filter, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getLogNext(accountId, applicationId, entityId, entityType, fromOffset, maxEvents, filter);
};

MetricsFrontendServiceClient.prototype.send_getLogNext = function(accountId, applicationId, entityId, entityType, fromOffset, maxEvents, filter) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getLogNext', Thrift.MessageType.CALL, this.seqid);
  var args = new MetricsFrontendService_getLogNext_args();
  args.accountId = accountId;
  args.applicationId = applicationId;
  args.entityId = entityId;
  args.entityType = entityType;
  args.fromOffset = fromOffset;
  args.maxEvents = maxEvents;
  args.filter = filter;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MetricsFrontendServiceClient.prototype.recv_getLogNext = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MetricsFrontendService_getLogNext_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getLogNext failed: unknown result');
};
MetricsFrontendServiceClient.prototype.getLogPrev = function(accountId, applicationId, entityId, entityType, fromOffset, maxEvents, filter, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getLogPrev(accountId, applicationId, entityId, entityType, fromOffset, maxEvents, filter);
};

MetricsFrontendServiceClient.prototype.send_getLogPrev = function(accountId, applicationId, entityId, entityType, fromOffset, maxEvents, filter) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getLogPrev', Thrift.MessageType.CALL, this.seqid);
  var args = new MetricsFrontendService_getLogPrev_args();
  args.accountId = accountId;
  args.applicationId = applicationId;
  args.entityId = entityId;
  args.entityType = entityType;
  args.fromOffset = fromOffset;
  args.maxEvents = maxEvents;
  args.filter = filter;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MetricsFrontendServiceClient.prototype.recv_getLogPrev = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MetricsFrontendService_getLogPrev_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getLogPrev failed: unknown result');
};
MetricsFrontendServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
MetricsFrontendServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

MetricsFrontendServiceProcessor.prototype.process_getCounters = function(seqid, input, output) {
  var args = new MetricsFrontendService_getCounters_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getCounters(args.request, function (err, result) {
    var result = new MetricsFrontendService_getCounters_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getCounters", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MetricsFrontendServiceProcessor.prototype.process_getTimeSeries = function(seqid, input, output) {
  var args = new MetricsFrontendService_getTimeSeries_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getTimeSeries(args.request, function (err, result) {
    var result = new MetricsFrontendService_getTimeSeries_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getTimeSeries", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MetricsFrontendServiceProcessor.prototype.process_clear = function(seqid, input, output) {
  var args = new MetricsFrontendService_clear_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.clear(args.accountId, args.applicationId, function (err, result) {
    var result = new MetricsFrontendService_clear_result((err != null ? err : {success: result}));
    output.writeMessageBegin("clear", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MetricsFrontendServiceProcessor.prototype.process_reset = function(seqid, input, output) {
  var args = new MetricsFrontendService_reset_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.reset(args.accountId, function (err, result) {
    var result = new MetricsFrontendService_reset_result((err != null ? err : {success: result}));
    output.writeMessageBegin("reset", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MetricsFrontendServiceProcessor.prototype.process_getLog = function(seqid, input, output) {
  var args = new MetricsFrontendService_getLog_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getLog(args.accountId, args.applicationId, args.flowId, args.size, function (err, result) {
    var result = new MetricsFrontendService_getLog_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getLog", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MetricsFrontendServiceProcessor.prototype.process_getLogNext = function(seqid, input, output) {
  var args = new MetricsFrontendService_getLogNext_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getLogNext(args.accountId, args.applicationId, args.entityId, args.entityType, args.fromOffset, args.maxEvents, args.filter, function (err, result) {
    var result = new MetricsFrontendService_getLogNext_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getLogNext", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MetricsFrontendServiceProcessor.prototype.process_getLogPrev = function(seqid, input, output) {
  var args = new MetricsFrontendService_getLogPrev_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getLogPrev(args.accountId, args.applicationId, args.entityId, args.entityType, args.fromOffset, args.maxEvents, args.filter, function (err, result) {
    var result = new MetricsFrontendService_getLogPrev_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getLogPrev", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

